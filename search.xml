<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基础算法</title>
      <link href="/posts/b7e144d1.html"/>
      <url>/posts/b7e144d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础算法">基础算法</h2><h3 id="快速排序">快速排序</h3><ul><li>思路：<br>1.选择一个基准值<br>2.将数组分为两个子数组，左边的子数组元素都小于基准值，右边的子数组元素都大于基准值<br>3.<strong>递归</strong>地对这两个子数组进行排序</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> key = q[(l + r + <span class="number">1</span>) / <span class="number">2</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span> (q[i] &lt;= key);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span> (q[j] &gt;= key);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">quickSort</span>(q, l, i<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">quickSort</span>(q, i, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序">归并排序</h3><ul><li>思路：<br>1.将数组分成两半，分别对它们进行排序<br>2.将排序好的两半合并成一个有序数组</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( l&gt;= r ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">mergeSort</span>(q, l, mid), <span class="built_in">mergeSort</span>(q, mid+<span class="number">1</span>, r);</span><br><span class="line">    <span class="type">int</span> tmp[r - l + <span class="number">1</span>], k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++] = q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line">    <span class="keyword">for</span>(i = l, j = <span class="number">0</span>; j &lt; k; j++, i++) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="pivot的选取">pivot的选取</h4><p>上述代码默认选取数组中间值作为pivot，但实际上pivot选取为数组中位数(即每次都能二分数组)时，时间复杂度会更接近$O(nlogn)$.</p><ul><li>使用median of medians算法：<br>1.将数组每5个元素分成一组，取出每组的中位数<br>2.取这组中位数的中位数作为pivot</li></ul><h3 id="二分法">二分法</h3><p>主要用于在<strong>有序</strong>数组中查找某一特定元素,时间复杂度为$O(logn)$.<br>在一个有序的区间中，每次选择中间点，将搜索区间分成两半，并根据中间点的值判断目标值落在哪一半，从而抛弃另一半，继续在剩余的区间内搜索，直到找到目标值或者区间缩小至无法再分.</p><ul><li><p>注意：</p><ol><li>mid的选取需要注意是否会造成死循环</li><li>二分法假定在搜索区间内一定存在解. 使用前最好确保问题本身是有解的，或者至少能够通过合理的处理（如返回近似解）来处理无解的情况</li></ol></li><li><p>应用：</p><ol><li>有序数组的查找</li><li>求解方程的根</li><li>最优化问题的求解</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区间[l, r]被分成[l, mid]和[mid+1, r]</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch_1</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(a[mid], x)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被分成[l, mid-1]和[mid, r]</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch_2</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(a[mid], x)) l = mid;</span><br><span class="line">        <span class="comment">// 当l = r -1如果mid = (l + r) / 2 = l, 会导致死循环</span></span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度">高精度</h3><p>即超出标准数据类型所表示范围的数值计算.</p><p>整数的高精度计算（加减乘除）通过数组存储数字的每一位，再模拟手工计算方法过程实现.</p><h3 id="前缀和与差分">前缀和与差分</h3><ol><li><p>一维前缀和即 $S[n]=\sum_{i=1}^{n}a[i]$ 其中 $S[n]=S[n-1]+a[n], S[0]=0$，可以快速计算数组 $a[l]+\dots +a[r]=S[r]-S[l-1]$.</p></li><li><p>二维前缀和 $S[i][j]=S[i][j-1]+S[i-1][j]-S[i-1][j-1]+a[i][j]$.</p></li><li><p>差分即前缀和的逆运算，$D[n]=a[n]-a[n-1], \sum_{i=1}^{n}D[i]=a[i]$, 可以快速将 $[l,r]$ 范围内数加上c：$D[l]+=c, D[r+1]-=c$, 而不引起其元素变化.</p></li></ol><ul><li>作用：可以显著提高处理数组相关问题的效率.</li></ul><h3 id="离散化">离散化</h3><p>将连续的或者较大范围的数值映射到有限的整数集合中，离散化的核心是通过排序和去重等操作将原始数据映射到更小的数据范围，减少空间和时间复杂度。</p><ul><li><p>时间复杂度：排序 $O(n\log n)$ + 去重 $O(n)$ + 查找(二分) $O(k\log n) = O((n+k)\log n)$.</p></li><li><p>离散化并不会改变数值之间的相对大小关系，因此在区间查询、统计等场景中，离散化后的操作结果仍然能反映原始数据的关系。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; all; <span class="comment">// all存储需要处理的所有数据，包括更新操作和查找操作的值</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; query; <span class="comment">// 存储查询操作的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 离散后的查找函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x, vector&lt;<span class="type">int</span>&gt; a)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = a.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = r + l &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid] &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>; <span class="comment">// 返回离散后的下标从1开始</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 输入数据</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(all.<span class="built_in">begin</span>(), all.<span class="built_in">end</span>()); <span class="comment">// 排序</span></span><br><span class="line">    all.<span class="built_in">erase</span>(<span class="built_in">unique</span>(all.<span class="built_in">begin</span>(), all.<span class="built_in">end</span>()), all.<span class="built_in">end</span>()); <span class="comment">// 去重</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> val: query)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">find</span>(val, all); <span class="comment">//x为离散化后的值，即数组下标</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>应用：<ol><li>区间求和：将较大范围的数值离散化为较小范围，配合树状数组、线段树等数据结构，可以高效进行区间求和、更新等操作。</li><li>动态规划：离散化可以减少状态空间的规模，从而优化算法的时间和空间复杂度。</li><li>统计问题：在一些需要对稀疏数据进行处理的问题中，离散化可以减少无效操作，提升效率。</li></ol></li></ul><h3 id="区间合并">区间合并</h3><p>将重叠或相邻的区间合并成一个区间。常用于处理如区间覆盖、会议时间安排等问题。</p><ul><li>思路：将区间按照左端点排序后，从左到右遍历，每个区间后面的区间有两种情况：<ol><li>两个区间有重叠，即 $ed \geq item.first$. 两个区间右端点中大的成为新的右端点。</li><li>两个区间不重叠，即 $ed &lt; item.first$. 前一个区间合并完成，新区间成为新的比较区间。</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">-1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()); <span class="comment">// 按左端点排序</span></span><br><span class="line"></span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; tmp;</span><br><span class="line">    <span class="type">int</span> st = INF, ed = INF; <span class="comment">//st, ed初始值设为较小值或无穷小</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> item: a)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ed &lt; item.first)&#123; <span class="comment">// 前一个区间合并完成</span></span><br><span class="line">            <span class="keyword">if</span>(st != INF) tmp.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line">            st = item.first, ed = item.second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ed = <span class="built_in">max</span>(ed, item.second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(st != INF) tmp.<span class="built_in">push_back</span>(&#123;st, ed&#125;); <span class="comment">//最后一个区间加入数组</span></span><br><span class="line">    a = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; a;</span><br><span class="line">    <span class="comment">// 输入</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">merge</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构">数据结构</h2><h3 id="链表">链表</h3><p>此处链表用数组实现，相较于结构体实现效率高，内存消耗小，适用于节点数固定或上限已知的情况。</p><ul><li>基本操作: 头部或尾部插入一个节点、在第k个插入节点或第k个节点的左端或右端插入节点、删除第k个插入的节点或第k个节点,每插入一个节点都需要考虑两侧节点的变化。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N; <span class="comment">// 最高节点数目</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> val[N], l[N], r[N], idx;<span class="comment">// 存储值、左节点下标、右节点下标、存储的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点a右边插入一个数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    val[idx] = x;</span><br><span class="line">    l[idx] = a, r[idx] = r[a];</span><br><span class="line">    l[r[a]] = idx;</span><br><span class="line">    r[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    r[l[a]] = r[a];</span><br><span class="line">    l[r[a]] = l[a];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 0是左端点，1是右端点</span></span><br><span class="line">    <span class="comment">// 此初始化省去了考虑边界是否为头尾节点的判断操作</span></span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k, x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">0</span>, x); <span class="comment">// 头部插入x</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">insert</span>(l[<span class="number">1</span>], x); <span class="comment">// 尾部插入x</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">insert</span>(k+<span class="number">1</span>, x); <span class="comment">// 第k个插入节点的右边插入x</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">insert</span>(l[k+<span class="number">1</span>], x); <span class="comment">// 第k个插入节点的左边插入x</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">remove</span>(k+<span class="number">1</span>); <span class="comment">// 删除第k个插入的节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KMP">KMP</h3><p>KMP是一个模式串匹配算法, 时间复杂度为 $O(m+n)$, m为模式串长度, n为主串长度。相比于朴素模式匹配算法利用了模式串本身的部分匹配信息, 避免了不必要的重复匹配。</p><ul><li>核心: 前缀表(部分匹配表, 通常为next数组), 记录了每个模式串中前缀和后缀的最长匹配长度。当发生不匹配时，能将模式串向后移动合适的位置，避免重复检查已经匹配过的字符。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">char</span> s[n], t[m];</span><br><span class="line"><span class="type">int</span> ne[m]; <span class="comment">//next数组设置为全局变量最好，默认初始化为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到next数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_next</span><span class="params">(<span class="keyword">auto</span> t[], <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>, j=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; t[i] != t[j]) j = ne[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(t[i] == t[j]) j++;</span><br><span class="line">        ne[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从主串中查找子串，返回子串出现的初始位置</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kmp_search</span><span class="params">(<span class="keyword">auto</span> s[], <span class="type">int</span> n, <span class="keyword">auto</span> t[], <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; s[i] != t[j]) j = ne[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>( s[i] == t[j]) j++;</span><br><span class="line">        <span class="keyword">if</span>(j == m)&#123;</span><br><span class="line">            cout &lt;&lt; i - j + <span class="number">1</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Trie-前缀树-字符串统计">Trie(前缀树)字符串统计</h3><p>一种用于高效查找和存储字符串的数据结构，适合处理字符串前缀匹配问题。</p><p>每个节点代表一个字符，所有从根节点到叶节点的路径构成一个字符串，再用一个标记表示每个节点结束的字符串的数量。</p><ul><li>插入和查询时间都是 $O(m), m$为字符串长度.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设只存储小写字母构成的字符串</span></span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>]; <span class="comment">// 字符串总长度不超过N，小写字母共26个</span></span><br><span class="line"><span class="type">int</span> count[N]; <span class="comment">// 表示每个字符串的个数</span></span><br><span class="line"><span class="type">int</span> idx; <span class="comment">// idx记录节点个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span> <span class="params">(<span class="type">char</span> str[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; str[i]; i++) <span class="comment">// char[]类型末尾存储空字符，可用于判断</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> q = str[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 转换成对应的26个数字</span></span><br><span class="line">        <span class="keyword">if</span>(!son[p][q]) son[p][q] = ++idx;</span><br><span class="line">        p = son[p][q];</span><br><span class="line">    &#125;</span><br><span class="line">    count[p]++; <span class="comment">// 每个节点都有一个编号p</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span> <span class="params">(<span class="type">char</span> str[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; str[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> q = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!son[p][q]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][q];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集-Disjoint-Set-Union">并查集(Disjoint Set Union)</h3><p>一种处理<strong>不相交</strong>集合的合并和查找两个元素是否属于同一集合的数据结构。</p><ul><li>并查集的合并和查找几乎为常数时间复杂度 $O(1)$.</li></ul><p>基本结构：</p><ol><li>父节点数组：记录每个元素的父节点，初始时每个元素的父节点是本身，最后根节点的父节点也为本身。</li><li>秩(Rank)：即树的高度，用于优化合并集合的操作。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N;</span><br><span class="line"><span class="type">int</span> p[N], rank[N]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, i&lt;=n; i++)&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    rank[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">// 查找操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x) p[x] = <span class="built_in">find</span>(p[x]); <span class="comment">// 路径压缩，每个节点直接连向祖先节点</span></span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="comment">// 合并x和y所在的两个集合</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rx = <span class="built_in">find</span>(x), ry = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(rx == ry) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 按秩合并</span></span><br><span class="line">    <span class="keyword">if</span>(rank[x] &lt; rank[y]) p[rx] = ry;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rank[x] &gt; rank[y]) p[ry] = rx;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        p[rx] = ry;</span><br><span class="line">        rank[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆">堆</h3><p>常用于解决堆排序和优先队列的问题，是一棵完全二叉树， 分为大顶堆和小顶堆。</p><ul><li><p>优先队列(STL中的priorty_queue), 插入和删除元素均为 $O(\log n)$, 取最小(或最大)元素为 $O(1)$.</p></li><li><p>关键操作：上浮(up)和下沉(down).</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N;</span><br><span class="line"><span class="type">int</span> heap[N], sz; <span class="comment">// sz用于记录当前数组中元素个数</span></span><br><span class="line"><span class="comment">// hp[i]记录当前数组的第i个位置的插入元素的序号</span></span><br><span class="line"><span class="comment">// ph[i]记录第i个插入元素的位置</span></span><br><span class="line"><span class="comment">// idx记录插入元素的个数</span></span><br><span class="line"><span class="type">int</span> hp[N], ph[N], idx; <span class="comment">// 用于删除或修改第k个插入的节点的操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(heap[a], heap[b]);</span><br><span class="line">    <span class="built_in">swap</span>(hp[a], hp[b]);</span><br><span class="line">    ph[hp[a]] = a;</span><br><span class="line">    ph[hp[b]] = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &gt; <span class="number">1</span> &amp;&amp; heap[x] &lt; heap[x/<span class="number">2</span>])&#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(x, x/<span class="number">2</span>);</span><br><span class="line">        x /= <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="comment">// 也可以递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = x;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">2</span>*x &lt;= sz &amp;&amp; heap[t] &gt; heap[<span class="number">2</span>*x]) t = <span class="number">2</span>*x;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">2</span>*x+<span class="number">1</span> &lt;= sz &amp;&amp; heap[t] &gt; heap[<span class="number">2</span>*x+<span class="number">1</span>]) t = <span class="number">2</span>*x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t != x)&#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(x, t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    heap[++sz] = a;</span><br><span class="line">    hp[sz] = ++idx;</span><br><span class="line">    ph[idx] = sz;</span><br><span class="line">    <span class="built_in">up</span>(sz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除头节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">heap_swap</span>(<span class="number">1</span>, sz--);</span><br><span class="line">    <span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第k个插入的节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove_k</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> pos = ph[k];</span><br><span class="line">    <span class="built_in">heap_swap</span>(pos, sz--);</span><br><span class="line">    <span class="built_in">up</span>(pos); <span class="built_in">down</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改第k个插入的节点为x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change_k</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> pos = ph[k];</span><br><span class="line">    heap[pos] = x;</span><br><span class="line">    <span class="built_in">up</span>(pos); <span class="built_in">down</span>(pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希表">哈希表</h3><p>又称散列表，一种基于键值对的数据结构，通过哈希函数将键值映射到数组的索引位置，直接访问数据，减少查找的时间复杂度。</p><ol><li>基本概念：<ol><li>哈希函数：将值映射到哈希表中，好的哈希函数应尽量避免冲突。</li><li>哈希冲突：多个值映射到一个位置时产生冲突，处理冲突的方法主要为：<ul><li>链地址法：使用链表在相同位置储存散列值相同的数据</li><li>开放寻址法：发生冲突时在数组寻找下一个空闲位置插入</li></ul></li><li>装载因子：哈希表中元素个数与数组大小的比值。过大时冲突的概率会增加，导致查找效率变低。</li></ol></li><li>操作：插入、查找和删除，平均时间复杂度为 $O(1)$.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处哈希函数为取一个质数的模，冲突概率最小</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N; <span class="comment">// N为质数</span></span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx; <span class="comment">// idx记录链表数组的节点个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h)); <span class="comment">// 初始化h，-1代表为空</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = (k % N + N) % N; <span class="comment">// 负数取模为负数，取模加上N后再取模转化为正数</span></span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = h[k]; <span class="comment">// 插入到链表头部，将当前元素的next指向当前头元素</span></span><br><span class="line">    h[k] = idx++; <span class="comment">// 更新链表头为当前元素，idx自增</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = (k % N + N) % N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[k]; i!=<span class="number">-1</span>; i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串哈希">字符串哈希</h4><p>通过将字符串映射为一个整数（哈希值）来进行快速比较和查找的技术。常用于字符串匹配、字符串去重和处理大量字符串的数据结构中。</p><ul><li>单项哈希：将字符串看做一个基数为P的多项式，选择较大质数作为基数(131、13331)和模数(2e64)，以减少哈希冲突。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL; <span class="comment">// 自动取2e64的模</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N, P = <span class="number">131</span>;</span><br><span class="line"></span><br><span class="line">ULL h[N], p[N]; <span class="comment">// p[i]记录P的i次方</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算哈希值</span></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l<span class="number">-1</span>]*p[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> str[N];</span><br><span class="line">    <span class="comment">// 预处理</span></span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        p[i] = p[i<span class="number">-1</span>]*P;</span><br><span class="line">        h[i] = h[i<span class="number">-1</span>]*P + str[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
